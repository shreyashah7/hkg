define(["hkg","ruleService","customFieldService","messageService","notificationService","activityFlowService","addMasterValue","ruleField","dynamicForm","jqueryAtWho","jqueryCaret"],function(a){a.register.controller("NotificationController",["$rootScope","$scope","$location","RuleService","CustomFieldService","Messaging","NotificationService","DynamicFormService","ActivityFlowService","$filter",function(l,q,k,j,r,e,f,o,h,m){l.maskLoading();
l.mainMenu="manageLink";
l.childMenu="manageNotifications";
l.activateMenu();
q.notification={};
q.ruleObject={};
q.dbType={};
q.copyFlag=false;
q.mapOfActivitySerice={};
q.entity="NOTIFICATION.";
q.endRepeat={};
q.listOfModelsOfDateType=[];
q.dynamicNotificationData=o.resetSection(q.generalNotificationTemplate);
var g=o.retrieveSectionWiseCustomFieldInfo("manageNotifications");
g.then(function(u){console.log("section:::::"+JSON.stringify(u));
q.generalNotificationTemplate=u.Configuration;
if(q.generalNotificationTemplate!==null&&q.generalNotificationTemplate!==undefined){angular.forEach(q.generalNotificationTemplate,function(v){if(v.type!==null&&v.type!==undefined&&v.type==="date"){q.listOfModelsOfDateType.push(v.model)
}})
}},function(u){console.log("Failed: "+u)
},function(u){console.log("Got notification: "+u)
});
q.applyList=["All","Any"];
q.operationFlag="add";
var s={Number:"Numeric","Text field":"String","Text area":"String",Dropdown:"String","Radio button":"String",Date:"Date",Datepicker:"Date","Date range":"Date range",Time:"Date","Time range":"Date range",Password:"String",Currency:"Numeric",Decimal:"Numeric",Email:"String",Phone:"String",Checkbox:"Boolean",Percent:"Numeric",Formula:"Numeric",Pointer:"Numeric",AutoGenerated:"Boolean",MultiSelect:"String",UserMultiSelect:"String",Angle:"Numeric",Image:"Image",Upload:"Image"};
q.fieldListForActSer=[{id:-1,label:"Status",oldLabelName:"Status",type:"Dropdown",validationPattern:"{}",isNewField:false,fieldType:"Long"},{id:-2,label:"No. of occurance",oldLabelName:"No. of occurance",type:"Number",validationPattern:"{}",isNewField:false,fieldType:"Number"},{id:-3,label:"Time",oldLabelName:"Time",type:"Decimal",validationPattern:"{}",isNewField:false,fieldType:"String"},{id:-4,label:"Name",oldLabelName:"Name",type:"Dropdown",validationPattern:"{}",isNewField:false,fieldType:"String"}];
q.mapOfActivitySerice={};
q.mapOfActivities={};
h.retrievePrerequisite(function(u){if(!!u){h.retrieveServices(function(v){q.serviceList=v;
l.unMaskLoading();
h.retrieveActivityFlowVersion(u.activityflowbycompany[0]["custom2"][0].value,function(w){console.log("res3.data['activityFlowGroups']::"+JSON.stringify(w.data.activityFlowGroups));
angular.forEach(w.data.activityFlowGroups,function(x){q.mapOfActivitySerice[x.groupId]=[];
q.mapOfActivities[x.groupId]=x.flowGroupName;
angular.forEach(x.nodeDataBeanList,function(z){var y=m("filter")(q.serviceList,function(A){return A.id===z.associatedService
})[0];
y.nodeId=z.nodeId;
q.mapOfActivitySerice[x.groupId].push(y)
})
})
})
})
}});
q.popover="<NOBR><font color='red;'>Use the shortcuts to search</font></NOBR><br/><table cellpadding='0' cellspacing='0'><tr><td> \n '@D'  </td> <td> &nbsp;  &nbsp;</td><td align='left'>Departments</td></tr> <tr><td>'@E'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Employees</td></tr> <tr><td>'@R'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Roles</td></tr> <tr><td>'@G'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Groups</td></tr> <tr><td>'@A'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Activities</td></tr> </table> ";
q.ruleList=[];
q.dateOptions={"year-format":"'yy'","starting-day":1};
q.format=l.dateFormat;
q.datePicker={};
q.open=function(u,v){u.preventDefault();
u.stopPropagation();
q.datePicker[v]=true
};
q.minEndRepeatDate=l.getCurrentServerDate();
q.minDueDate=l.getCurrentServerDate();
q.hstep=1;
q.mstep=1;
q.options={hstep:[1,2,3],mstep:[1,5,10,15,25,30]};
q.ismeridian=true;
q.setEditTaskEndRepeatMinDate=function(){q.minEndRepeatDate=l.getCurrentServerDate()
};
q.enableTagging=function(){r.retrieveAllFields(function(u){q.varList=[];
angular.forEach(u,function(w,v){q.varList.push(w)
});
$(".tagging").atwho({at:"$",data:q.varList})
})
};
q.initData=function(){q.notification={};
q.notification.apply=q.applyList[0];
q.notification.atTime=l.getCurrentServerDate();
q.notification.repeatativeMode="D";
q.notification.endRepeatMode="OD";
q.notification.basedOn="1";
j.retrievePrerequisite(function(w){q.entityList=w.entity;
h.retrievePrerequisite(function(z){var x=false;
if(!!z&&!!z.activityflowbycompany&&z.activityflowbycompany.length>0&&!!z.activityflowbycompany[0].custom2){for(var y=0;
y<z.activityflowbycompany[0].custom2.length;
y++){if(z.activityflowbycompany[0].custom2[y].description==="A"){x=true;
q.version=z.activityflowbycompany[0].custom2[y].value;
break
}}if(x){q.entityList["-1"]="Current Activity";
q.entityList["-2"]="Next Activity";
q.entityList["-3"]="Previous Activity";
q.entityList["-4"]="Current Service";
q.entityList["-5"]="Next Service";
q.entityList["-6"]="Previous Service"
}}});
q.operators=w.operator
});
q.weekList=[{code:"M",value:"2"},{code:"Tu",value:"3"},{code:"W",value:"4"},{code:"Th",value:"5"},{code:"F",value:"6"},{code:"Sa",value:"7"},{code:"Su",value:"1"}];
q.dayList=new Array();
for(var u=0;
u<31;
u++){q.dayList.push(u+1)
}var v=n();
q.ruleList.push(v);
r.retrieveAllFields(function(w){q.varList=[];
angular.forEach(JSON.parse(angular.toJson(w)),function(y,x){q.varList.push(y)
});
$(".tagging").atwho({at:"$",data:q.varList})
});
q.autoCompleteInvitees={multiple:true,closeOnSelect:false,placeholder:"Select members",initSelection:function(w,y){var x=[];
angular.forEach(q.recipients,function(z){x.push({id:z.recipientInstance+":"+z.recipientType,text:z.recipientValue})
});
y(x)
},formatResult:function(w){return w.text
},formatSelection:function(w){return w.text
},query:function(z){var y=z.term;
q.names=[];
var A=function(B){if(B.length!==0){q.names=B;
angular.forEach(B,function(C){q.names.push({id:C.value+":"+C.description,text:C.label})
})
}z.callback({results:q.names})
};
var w=function(){};
if(y.substring(0,2)==="@E"||y.substring(0,2)==="@e"){var x=z.term.slice(2);
e.retrieveUserList(x.trim(),A,w)
}else{if(y.substring(0,2)==="@D"||y.substring(0,2)==="@d"){var x=z.term.slice(2);
e.retrieveDepartmentList(x.trim(),A,w)
}else{if(y.substring(0,2)==="@R"||y.substring(0,2)==="@r"){var x=z.term.slice(2);
e.retrieveRoleList(x.trim(),A,w)
}else{if(y.substring(0,2)==="@A"||y.substring(0,2)==="@a"){var x=z.term.slice(2);
e.retrieveActivityList(x.trim(),A,w)
}else{if(y.substring(0,2)==="@G"||y.substring(0,2)==="@g"){var x=z.term.slice(2);
e.retrieveGroupList(x.trim(),A,w)
}else{if(y.length>0){var x=y;
e.retrieveUserList(x.trim(),A,w)
}else{z.callback({results:q.names})
}}}}}}}};
q.retrieveNotificationsList()
};
var n=function(){var u={};
u.entity="";
u.field="";
u.operator="";
u.options=null;
u.operatorList=[];
u.fieldList=[];
u.rowsubmitted=false;
u.hint="Enter value";
u.values=[];
return u
};
var b=["abc","bcd","cde","def","efg"];
q.onEntityChange=function(u){if(q.ruleList[u].entity!==null){q.ruleList[u].field={};
q.ruleList[u].operatorList=[];
var v=q.ruleList[u].entity;
q.ruleList[u].showtemplate=false;
q.ruleList[u].values=[];
q.ruleList[u].rowsubmitted=false;
if(parseInt(v)>0){j.retrieveFieldsByEntity('{"primaryKey": '+v+"}",function(w){q.ruleList[u].fieldList=w
})
}else{q.ruleList[u].fieldList=q.fieldListForActSer
}}};
q.onFieldChange=function(w){if(q.ruleList[w].field!==null){q.ruleList[w].operator={};
var v=q.ruleList[w].field.type;
q.ruleList[w].operatorList=[];
var A;
if(v==="Pointer"){var z;
var y=q.ruleList[w].field.validationPattern.replace("{","").replace("}","");
var u=[];
var B=[];
u=y.split(",");
angular.forEach(u,function(C){if(C.indexOf('"pointer":')>-1){B=C.split(":");
A=B[1].replace(/["']/g,"");
q.ruleList[w].field.pointerId=A
}});
angular.forEach(q.ruleList[w].fieldList,function(C){if(C.id.toString()===A.toString()){z=C.type;
q.ruleList[w].field.pointertype=z
}});
q.ruleList[w].operatorList=q.operators[s[z]]
}else{if(v==="SubEntity"){q.ruleList[w].field.subEntityType="Dropdown";
q.ruleList[w].operatorList=q.operators[s.Dropdown];
j.retrieveDropListForSubEntity(q.ruleList[w].field.id,function(C){q.ruleList[w].options=C;
q.ruleList[w].field.subentityDropListType=C[0].description
})
}else{q.ruleList[w].operatorList=q.operators[s[q.ruleList[w].field.type]]
}}if(v==="Dropdown"||v==="Radio button"||v==="MultiSelect"){if(parseInt(q.ruleList[w].entity)<=-1&&parseInt(q.ruleList[w].entity)>=-3&&parseInt(q.ruleList[w].field.id)!==-1){j.retrieveActivityMasterByFieldById('{"primaryKey": '+q.version+"}",function(C){q.ruleList[w].options=C
})
}else{if(parseInt(q.ruleList[w].entity)<=-4&&parseInt(q.ruleList[w].entity)>=-6&&parseInt(q.ruleList[w].field.id)!==-1){j.retrieveServiceMasterByFieldById('{"primaryKey": '+q.version+"}",function(C){q.ruleList[w].options=C
})
}else{if(q.ruleList[w].field.dbFieldName==="lot_status"||q.ruleList[w].field.dbFieldName==="packet_status"||q.ruleList[w].field.dbFieldName==="status_of_plan"||q.ruleList[w].field.dbFieldName==="parcel_status"||q.ruleList[w].field.dbFieldName==="invoice_status"||q.ruleList[w].field.dbFieldName==="issue_status"||q.ruleList[w].field.dbFieldName==="type_of_plan"){var x=q.ruleList[w].field.dbFieldName;
j.retrieveLotStatus(x,function(C){q.ruleList[w].options=C
})
}else{j.retrieveMasterByFieldById('{"primaryKey": '+q.ruleList[w].field.id+"}",function(C){q.ruleList[w].options=C
})
}}}}else{if(v==="Checkbox"){q.ruleList[w].options=[{label:"True",value:true},{label:"False",value:false}]
}else{if(v==="Pointer"){j.retrieveMasterByFieldById('{"primaryKey": '+A+"}",function(C){q.ruleList[w].options=C
})
}}}q.ruleList[w].showtemplate=false;
q.ruleList[w].values=[];
q.ruleList[w].rowsubmitted=false
}};
q.onOperatorChange=function(v){q.ruleList[v].showtemplate=false;
q.ruleList[v].rowsubmitted=false;
q.ruleList[v].values=[];
var u=q.ruleList[v].operator;
if(!!u){if(u.label==="contains"||u.label==="has no value"||u.label==="has any value"){q.ruleList[v].hint="Enter comma separated list"
}q.ruleList[v].showtemplate=true;
angular.forEach(q.ruleList,function(A){var B=A.field.validationPattern;
var x=false;
var w=false;
var z=false;
var y=B.replace("{","").replace("}","").split(",");
angular.forEach(y,function(C){if(C.indexOf('"isEmployee":')>-1){x=true
}if(C.indexOf('"isDepartment":')>-1){w=true
}if(C.indexOf('"isDesignation":')>-1){z=true
}});
A.multiselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.multiselectSingleComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.dropdownMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.dropdownSingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.subEntityMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.subEntitySingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.pointerMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.pointerSingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(D){var C=D.term;
q.names=[];
if(A.options.length!==0){q.names=angular.copy(A.options);
angular.forEach(A.options,function(E){q.names.push({id:E.value,text:E.label})
})
}D.callback({results:q.names})
}};
A.userMultiselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(C,D){},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(F){var E=F.term;
q.names=[];
var G=function(H){if(H.length!==0){q.names=H;
angular.forEach(H,function(I){q.names.push({id:I.value+":"+I.description,text:I.label})
})
}F.callback({results:q.names})
};
var C=function(){};
if(x&&E.substring(0,2)==="@E"||E.substring(0,2)==="@e"){var D=F.term.slice(2);
e.retrieveUserList(D.trim(),G,C)
}else{if(w&&E.substring(0,2)==="@D"||E.substring(0,2)==="@d"){var D=F.term.slice(2);
e.retrieveDepartmentList(D.trim(),G,C)
}else{if(z&&E.substring(0,2)==="@R"||E.substring(0,2)==="@r"){var D=F.term.slice(2);
e.retrieveRoleList(D.trim(),G,C)
}else{F.callback({results:q.names})
}}}}};
A.userSingleselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(C,E){var D=[];
E(D)
},formatResult:function(C){return C.text
},formatSelection:function(C){return C.text
},query:function(F){var E=F.term;
q.names=[];
var G=function(H){if(H.length!==0){q.names=H;
angular.forEach(H,function(I){q.names.push({id:I.value+":"+I.description,text:I.label})
})
}F.callback({results:q.names})
};
var C=function(){};
if(x&&E.substring(0,2)==="@E"||E.substring(0,2)==="@e"){var D=F.term.slice(2);
e.retrieveUserList(D.trim(),G,C)
}else{if(w&&E.substring(0,2)==="@D"||E.substring(0,2)==="@d"){var D=F.term.slice(2);
e.retrieveDepartmentList(D.trim(),G,C)
}else{if(z&&E.substring(0,2)==="@R"||E.substring(0,2)==="@r"){var D=F.term.slice(2);
e.retrieveRoleList(D.trim(),G,C)
}else{}}}}}
});
q.ruleList[v].showtemplate=true
}else{q.ruleList[v].showtemplate=false
}};
q.onOperatorClick=function(u){q.ruleList[u].showtemplate=false;
q.ruleList[u].rowsubmitted=false
};
q.addRule=function(y,v){q.ruleList[v].rowsubmitted=true;
if(y.$valid){var u=true;
var x=q.ruleList[v].operator.shortcutCode;
for(var w=0;
w<x;
w++){var B=q.ruleList[v].values[w];
if(q.ruleList[v].operator.label!=="has no value"&&q.ruleList[v].operator.label!=="has any value"){if(q.ruleList[v].field.type==="MultiSelect"){var A=q.ruleList[v].values;
u=(u&&true)
}else{if(B!==null&&B!==undefined){u=(u&&true)
}else{u=false
}}}else{u=(u&&true)
}}if(u){var z=n();
q.ruleList.push(z)
}}};
q.remove=function(u){q.ruleList.splice(u,1);
if(q.ruleList.length===0){var v=n();
q.ruleList.push(v);
q.ruleList[u].rowsubmitted=false
}};
q.saveNotification=function(v){q.submitted=true;
q.save(v);
q.notificationToSave=angular.copy(q.notification);
q.setModelValues();
if(q.notificationForm.$valid){if(q.notification.basedOn==1){var u={};
u.id=q.ruleSetId;
u.rules=q.allRules;
u.rules[0].apply=q.notification.apply;
q.notificationToSave.ruleSet=u
}q.notificationToSave.taskCustom=q.dynamicNotificationData;
q.notificationToSave.dbType=q.dbType;
q.notificationToSave.activity=q.notification.activity;
q.notificationToSave.service=q.notification.service;
delete q.notificationToSave.copyOf;
if(q.operationFlag==="add"){l.maskLoading();
f.createNotificationConfiguration(q.notificationToSave,function(x){l.unMaskLoading();
q.notification={};
q.notificationToSave={};
q.endRepeat={};
q.allRules=[];
q.ruleList=[];
q.submitted=false;
q.recipients=[];
$("#invitees").select2("val",[]);
q.notificationList=[];
q.retrieveNotificationsList();
var y="Notification configuration added successfully";
var w=l.success;
l.addMessage(y,w);
q.operationFlag="add";
q.initData();
$("#scrollable-dropdown-menu.typeahead").typeahead("val","");
q.dynamicNotificationData={};
q.notificationForm.$setPristine()
},function(){l.unMaskLoading();
var x="Error while creating notification configuration";
var w=l.failure;
l.addMessage(x,w)
})
}else{if(q.operationFlag==="edit"){l.maskLoading();
f.updateNotificationConfiguration(q.notificationToSave,function(){l.unMaskLoading();
q.notification={};
q.notificationToSave={};
q.endRepeat={};
q.allRules=[];
q.ruleList=[];
q.submitted=false;
q.recipients=[];
$("#invitees").select2("val",[]);
q.notificationList=[];
q.retrieveNotificationsList();
var x="Notification configuration updated successfully";
var w=l.success;
l.addMessage(x,w);
q.operationFlag="add";
q.initData();
$("#scrollable-dropdown-menu.typeahead").typeahead("val","");
q.dynamicNotificationData={};
q.notificationForm.$setPristine()
},function(){l.unMaskLoading();
var x="Error while updating notification configuration";
var w=l.failure;
l.addMessage(x,w)
})
}}}else{console.log("Invalid...."+JSON.stringify(q.notificationForm.$error))
}};
q.save=function(w){q.ruleSubmitted=true;
var y=[];
var v=q.ruleList.length;
for(var u=0;
u<v;
u++){q.ruleList[u].rowsubmitted=true;
var z={};
z=angular.copy(q.ruleList[u]);
var x={};
x.id=u;
x.entity=z.entity;
x.field=z.field.id;
x.operator=z.operator.label;
x.fieldType=z.field.type;
if(x.fieldType!=="Pointer"&&x.fieldType!=="SubEntity"){if(x.fieldType!=="Date range"&&x.fieldType!=="UserMultiSelect"&&x.fieldType!=="MultiSelect"&&x.fieldType!=="Dropdown"){x.value=z.values[0];
if(z.values.length>1){x.value1=z.values[1]
}}else{if(x.fieldType!=="UserMultiSelect"&&x.fieldType!=="MultiSelect"&&x.fieldType!=="Dropdown"){x.value=z.values[0]+","+z.values[1]
}else{if(z.operator.label!=="has any value from"){if(z.values.toString().indexOf(",")>-1){z.values.toString().replace(/,/g,"")
}}x.value=z.values
}if(z.values.length>1&&x.fieldType!=="UserMultiSelect"&&x.fieldType!=="MultiSelect"&&x.fieldType!=="Dropdown"){x.value1=z.values[2]+","+z.values[3]
}}}else{if(x.fieldType==="SubEntity"){if(z.field.subentityDropListType==="Date "){x.value=z.values[0];
if(z.values.length>1){x.value1=z.values[1]
}}else{if(z.operator.label!=="has any value from"){if(z.values.toString().indexOf(",")>-1){z.values.toString().replace(/,/g,"")
}}x.value=z.values
}if(z.values.length>1&&z.field.subentityDropListType==="Date "){x.value1=z.values[2]+","+z.values[3]
}}else{if(z.field.pointertype!=="MultiSelect"&&z.field.pointertype!=="Dropdown"){x.value=z.values[0];
if(z.values.length>1){x.value1=z.values[1]
}}else{if(z.field.pointertype!=="MultiSelect"&&z.field.pointertype!=="Dropdown"){x.value=z.values[0]+","+z.values[1]
}else{if(z.operator.label!=="has any value from"){if(z.values.toString().indexOf(",")>-1){z.values.toString().replace(/,/g,"")
}}x.value=z.values
}if(z.values.length>1&&z.field.pointertype!=="MultiSelect"&&z.field.pointertype!=="Dropdown"){x.value1=z.values[2]+","+z.values[3]
}}}}y.push(x)
}if(w.$valid){q.ruleObject.criterias=angular.copy(y);
q.ruleObject.isArchive=false;
if(q.operationFlag==="edit"){q.allRules[0].ruleName=angular.copy(q.ruleObject.ruleName);
q.allRules[0].remarks=angular.copy(q.ruleObject.remarks);
q.allRules[0].apply=angular.copy(q.ruleObject.apply);
q.allRules[0].criterias=angular.copy(q.ruleObject.criterias);
q.allRules[0].isActive=true;
q.allRules[0].isArchive=false
}else{if(q.ruleObject.id===null){q.lastRuleId++;
if(!!q.allRules){q.ruleObject.id=q.allRules.length
}else{q.ruleObject.id=0
}}if(!!!q.allRules){q.allRules=[]
}q.allRules.push(q.ruleObject);
q.selectedRule=q.ruleObject
}q.ruleSubmitted=false
}};
var c=0;
q.setModelValues=function(){if(q.operationFlag==="edit"||q.copyFlag){q.notificationToSave.taskRecipients=$("#invitees").select2("val").toString().split(",")
}else{if(q.notification.taskRecipients!==undefined&&q.notification.taskRecipients.length>0){q.notificationToSave.taskRecipients=q.notification.taskRecipients.split(",")
}}if(q.notificationToSave.repeatativeMode==="W"){q.notificationToSave.weeklyOnDays="";
angular.forEach(q.weekList,function(v,u){if(v.isChecked){q.notificationToSave.weeklyOnDays+=v.value;
q.notificationToSave.weeklyOnDays+="|"
}});
q.notificationToSave.weeklyOnDays=q.notificationToSave.weeklyOnDays.substring(0,q.notificationToSave.weeklyOnDays.length-1)
}if(q.notificationToSave.endRepeatMode==="AD"){q.notificationToSave.afterUnits=q.endRepeat.afterDaysUnits
}else{if(q.notificationToSave.endRepeatMode==="AR"){q.notificationToSave.afterUnits=q.endRepeat.afterRepititionsUnits
}}};
q.makeACopy=function(){var u=angular.copy(q.notification.copyOf);
if(!!u){q.endRepeat={};
q.copyFlag=true;
if(!!!q.notification.name){u.name="copy of "+u.name
}q.notification={};
q.notification.name=u.name;
q.notification.desc=u.desc;
q.notification.copyOf=u;
q.notification.repeatativeMode=u.repeatativeMode;
q.notification.weeklyOnDays=u.weeklyOnDays;
q.notification.monthlyOnDay=u.monthlyOnDay;
q.notification.endRepeatMode=u.endRepeatMode;
q.notification.endDate=u.endDate;
if(!!u.activity){q.notification.activity=u.activity.toString
}q.retrieveServices();
q.notification.service=u.service;
q.retrieveServices();
if(q.notification.endRepeatMode=="AD"){q.endRepeat.afterDaysUnits=u.afterUnits
}if(q.notification.endRepeatMode=="AR"){q.endRepeat.afterRepititionsUnits=u.afterUnits
}var w=u.taskRecipients;
q.notification.repetitionCount=u.repetitionCount;
q.notification.basedOn=u.basedOn;
q.notification.interfaceEType=u.interfaceEType;
q.notification.interfaceETypeText=u.interfaceETypeText;
q.notification.interfaceWType=u.interfaceWType;
q.notification.interfaceWTypeText=u.interfaceWTypeText;
q.notification.atTime=u.atTime;
q.recipients=u.taskRecipientDataBeanList;
q.dynamicNotificationData=u.taskCustom;
if(!!q.dynamicNotificationData){angular.forEach(q.listOfModelsOfDateType,function(y){if(q.dynamicNotificationData.hasOwnProperty(y)){if(q.dynamicNotificationData[y]!==null&&q.dynamicNotificationData[y]!==undefined){q.dynamicNotificationData[y]=new Date(q.dynamicNotificationData[y])
}else{q.dynamicNotificationData[y]=""
}}})
}if(!!u.ruleSet&&!!u.ruleSet.rules){q.ruleSetId=u.ruleSet.id;
q.allRules=u.ruleSet.rules;
q.notification.apply=u.ruleSet.rules[u.ruleSet.rules.length-1].apply;
d(u.ruleSet.rules[u.ruleSet.rules.length-1])
}if(q.notification.repeatativeMode==="W"){var x=q.notification.weeklyOnDays.split("|");
var v=0;
angular.forEach(q.weekList,function(z,y){if(z.value===x[v]){z.isChecked="true";
v++
}})
}$("#invitees").select2("val",[])
}};
function d(w){q.ruleObject={};
q.ruleList=[];
if(w!==null&&w!==undefined){q.ruleObject.id=w.id;
q.ruleObject.isActive=w.isActive;
q.ruleObject.isArchive=w.isArchive;
q.ruleObject.remarks=w.remarks;
q.ruleObject.ruleName=w.ruleName;
q.ruleObject.apply=w.apply;
var u=0;
for(var v=0;
v<w.criterias.length;
v++){if(w.criterias[v].id>u){u=w.criterias[v].id
}}q.lastRuleId=u;
p(w.criterias,0)
}}function p(x,v){if(v<x.length){var w={};
w.values=[];
w.options=null;
w.hint="Enter value";
if(x[v].fieldType==="Date range"){w.values[0]=x[v].value.split(",")[0];
w.values[1]=x[v].value.split(",")[1];
if(x[v].value1!==null){w.values[2]=x[v].value1.split(",")[0];
w.values[3]=x[v].value1.split(",")[1]
}}else{if(x[v].fieldType!=="Pointer"&&x[v].fieldType!=="SubEntity"){if(x[v].fieldType==="MultiSelect"||x[v].fieldType==="Dropdown"){w.values=x[v].value
}else{w.values[0]=x[v].value;
if(x[v].value1!==null){w.values[1]=x[v].value1
}}}else{if(x[v].fieldType==="SubEntity"){if(x[v].subentityComponentType!=="Date"){w.values=x[v].value
}else{w.values[0]=x[v].value;
if(x[v].value1!==null){w.values[1]=x[v].value1
}}}else{if(x[v].pointerComponentType==="MultiSelect"||x[v].pointerComponentType==="Dropdown"){w.values=x[v].value
}else{w.values[0]=x[v].value;
if(x[v].value1!==null){w.values[1]=x[v].value1
}}}}}w.id=x[v].id;
w.entity=x[v].entity.toString();
var y=x[v].field;
var u=x[v].operator;
if(parseInt(w.entity)<0){w.fieldList=q.fieldListForActSer;
$.grep(w.fieldList,function(A,z){if(A.id==y){w.field=w.fieldList[z];
return true
}});
t(w,u,x,v)
}else{j.retrieveFieldsByEntity('{"primaryKey": '+w.entity+"}",function(z){w.fieldList=z;
$.grep(w.fieldList,function(B,A){if(B.id==y){w.field=w.fieldList[A];
return true
}});
t(w,u,x,v)
})
}}}function t(B,v,E,A){B.operatorList=[];
if(B.field.type!=="SubEntity"){B.operatorList=q.operators[s[B.field.type]]
}else{B.operatorList=q.operators[s.Dropdown]
}$.grep(B.operatorList,function(G,F){if(G.label===v){B.operator=B.operatorList[F];
return true
}});
if(B.field.type==="Dropdown"||B.field.type==="Radio button"||B.field.type==="MultiSelect"){if(parseInt(B.entity)<=-1&&parseInt(B.entity)>=-3&&parseInt(B.field.id)!==-1){j.retrieveActivityMasterByFieldById('{"primaryKey": '+q.version+"}",function(F){B.options=F;
$.grep(B.options,function(H,G){if(H.value===B.value){B.value[0]=B.options[G];
return true
}});
if(B.value1!==null){$.grep(B.options,function(H,G){if(H.value===B.value1){B.value[1]=B.options[G];
return true
}})
}})
}else{if(parseInt(B.entity)<=-4&&parseInt(B.entity)>=-6&&parseInt(B.field.id)!==-1){j.retrieveServiceMasterByFieldById('{"primaryKey": '+q.version+"}",function(F){B.options=F;
$.grep(B.options,function(H,G){if(H.value===B.value){B.value[0]=B.options[G];
return true
}});
if(B.value1!==null){$.grep(B.options,function(H,G){if(H.value===B.value1){B.value[1]=B.options[G];
return true
}})
}})
}else{if(B.field.dbFieldName==="lot_status"||B.field.dbFieldName==="packet_status"||B.field.dbFieldName==="status_of_plan"||B.field.dbFieldName==="parcel_status"||B.field.dbFieldName==="invoice_status"||B.field.dbFieldName==="issue_status"||B.field.dbFieldName==="type_of_plan"){var u=B.field.dbFieldName;
j.retrieveLotStatus(u,function(F){B.options=F;
$.grep(B.options,function(H,G){if(H.value===B.value){B.value[0]=B.options[G];
return true
}});
if(B.value1!==null){$.grep(B.options,function(H,G){if(H.value===B.value1){B.value[1]=B.options[G];
return true
}})
}})
}else{j.retrieveMasterByFieldById('{"primaryKey": '+B.field.id+"}",function(F){B.options=F;
if(B.field.type!=="MultiSelect"){$.grep(B.options,function(H,G){if(H.value===B.value){B.value[0]=B.options[G];
return true
}});
if(B.value1!==null){$.grep(B.options,function(H,G){if(H.value===B.value1){B.value[1]=B.options[G];
return true
}})
}}})
}}}}else{if(B.field.type==="Checkbox"){B.options=[{label:"True",value:true},{label:"False",value:false}]
}else{if(B.field.type==="Pointer"){var x;
var D=B.field.validationPattern.replace("{","").replace("}","");
var y=[];
var w=[];
var C;
y=D.split(",");
angular.forEach(y,function(F){if(F.indexOf('"pointer":')>-1){w=F.split(":");
C=w[1].replace(/["']/g,"");
B.field.pointerId=C
}});
angular.forEach(B.fieldList,function(F){if(F.id.toString()===C.toString()){x=F.type;
B.field.pointertype=x
}});
j.retrieveMasterByFieldById('{"primaryKey": '+C+"}",function(F){B.options=F
})
}else{if(B.field.type==="SubEntity"){B.field.subEntityType="Dropdown";
j.retrieveDropListForSubEntity(B.field.id,function(F){B.options=F
})
}}}}B.showtemplate=false;
B.showtemplate=true;
function z(){if(B.field.type==="MultiSelect"){j.retrieveMasterByFieldById('{"primaryKey": '+B.field.id+"}",function(F){B.options=F
})
}}q.ruleList[A]=B;
A++;
p(E,A);
z();
if(B.field.type==="MultiSelect"){angular.forEach(q.ruleList,function(G){var F=angular.copy(G.values);
G.multiselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select ",initSelection:function(H,J){var I=[];
j.retrieveMasterByFieldById('{"primaryKey": '+G.field.id+"}",function(K){q.optionsMultiSelect=K;
var M=[];
M=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var L=angular.copy(G.values);
angular.forEach(M,function(N){angular.forEach(q.optionsMultiSelect,function(O){if(N.toString()===O.value.toString()){I.push({id:O.value,text:O.label})
}})
});
J(I);
G.values=angular.copy(L)
})
},formatResult:function(H){return H.text
},formatSelection:function(H){return H.text
},query:function(I){var H=I.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(J){q.names.push({id:J.value,text:J.label})
})
}I.callback({results:q.names})
}};
G.multiselectSingleComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(H,J){var I=[];
j.retrieveMasterByFieldById('{"primaryKey": '+G.field.id+"}",function(K){q.optionsMultiSelect=K;
var M=[];
M=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var L=angular.copy(G.values);
angular.forEach(M,function(N){angular.forEach(q.optionsMultiSelect,function(O){if(N.toString()===O.value.toString()){I.push({id:O.value,text:O.label})
}})
});
J(I);
G.values=angular.copy(L)
})
},formatResult:function(H){return H.text
},formatSelection:function(H){return H.text
},query:function(I){var H=I.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(J){q.names.push({id:J.value,text:J.label})
})
}I.callback({results:q.names})
}}
})
}if(B.field.type==="Pointer"){angular.forEach(q.ruleList,function(G){var H;
if(B.field.pointerId!==null&&B.field.pointerId!==undefined){H=B.field.pointerId.replace('"',"")
}var F=angular.copy(G.values);
G.pointerMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select ",initSelection:function(I,K){var J=[];
j.retrieveMasterByFieldById('{"primaryKey": '+H+"}",function(L){q.optionspointerMultiSelect=L;
var M=[];
M=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var N=angular.copy(G.values);
angular.forEach(M,function(O){angular.forEach(q.optionspointerMultiSelect,function(P){if(O.toString()===P.value.toString()){J.push({id:P.value,text:P.label})
}})
});
K(J);
G.values=angular.copy(N)
})
},formatResult:function(I){return I.text
},formatSelection:function(I){return I.text
},query:function(J){var I=J.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(K){q.names.push({id:K.value,text:K.label})
})
}J.callback({results:q.names})
}};
G.pointerSingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(I,L){var J=[];
var K=G.field.pointerId.replace('"',"");
j.retrieveMasterByFieldById('{"primaryKey": '+K+"}",function(N){q.optionsSingleSelectPointer=N;
var O=[];
O=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var M=angular.copy(G.values);
angular.forEach(O,function(P){angular.forEach(q.optionsSingleSelectPointer,function(Q){if(P.toString()===Q.value.toString()){J.push({id:Q.value,text:Q.label})
}})
});
L(J);
G.values=angular.copy(M)
})
},formatResult:function(I){return I.text
},formatSelection:function(I){return I.text
},query:function(J){var I=J.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(K){q.names.push({id:K.value,text:K.label})
})
}J.callback({results:q.names})
}}
})
}if(B.field.type==="SubEntity"){angular.forEach(q.ruleList,function(G){var H;
if(B.field.pointerId!==null&&B.field.pointerId!==undefined){H=B.field.pointerId.replace('"',"")
}var F=angular.copy(G.values);
G.subEntityMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select ",initSelection:function(I,K){var J=[];
j.retrieveDropListForSubEntity(G.field.id,function(M){q.optionsSubentityMultiSelect=M;
var N=[];
N=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var L=angular.copy(G.values);
angular.forEach(N,function(O){angular.forEach(q.optionsSubentityMultiSelect,function(P){if(O.toString()===P.value.toString()){J.push({id:P.value,text:P.label})
}})
});
K(J);
G.values=angular.copy(L)
})
},formatResult:function(I){return I.text
},formatSelection:function(I){return I.text
},query:function(J){var I=J.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(K){q.names.push({id:K.value,text:K.label})
})
}J.callback({results:q.names})
}};
G.subEntitySingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(I,K){var J=[];
j.retrieveDropListForSubEntity(G.field.id,function(M){q.optionsSubentitySingleSelect=M;
var N=[];
N=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var L=angular.copy(G.values);
angular.forEach(N,function(O){angular.forEach(q.optionsSubentitySingleSelect,function(P){if(O.toString()===P.value.toString()){J.push({id:P.value,text:P.label})
}})
});
K(J);
G.values=angular.copy(L)
})
},formatResult:function(I){return I.text
},formatSelection:function(I){return I.text
},query:function(J){var I=J.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(K){q.names.push({id:K.value,text:K.label})
})
}J.callback({results:q.names})
}}
})
}if(B.field.type==="Dropdown"){angular.forEach(q.ruleList,function(G){if(B.id===G.id){var F=angular.copy(G.values);
G.dropdownMultiSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select ",initSelection:function(J,M){var K=[];
var L=function(N){q.optionsDropdown=N;
var P=[];
P=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var O=angular.copy(G.values);
angular.forEach(P,function(Q){angular.forEach(q.optionsDropdown,function(R){if(Q.toString()===R.value.toString()){K.push({id:R.value,text:R.label})
}})
});
M(K);
G.values=angular.copy(O)
};
var H=function(){};
if(parseInt(B.entity)<=-1&&parseInt(B.entity)>=-3&&parseInt(B.field.id)!==-1){j.retrieveActivityMasterByFieldById('{"primaryKey": '+q.version+"}",L,H)
}else{if(parseInt(B.entity)<=-4&&parseInt(B.entity)>=-6&&parseInt(B.field.id)!==-1){j.retrieveServiceMasterByFieldById('{"primaryKey": '+q.version+"}",L,H)
}else{if(B.field.dbFieldName==="lot_status"||B.field.dbFieldName==="packet_status"||B.field.dbFieldName==="status_of_plan"||B.field.dbFieldName==="parcel_status"||B.field.dbFieldName==="invoice_status"||B.field.dbFieldName==="issue_status"||B.field.dbFieldName==="type_of_plan"){var I=B.field.dbFieldName;
j.retrieveLotStatus(I,L,H)
}else{j.retrieveMasterByFieldById('{"primaryKey": '+G.field.id+"}",L,H)
}}}},formatResult:function(H){return H.text
},formatSelection:function(H){return H.text
},query:function(I){var H=I.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(J){q.names.push({id:J.value,text:J.label})
})
}I.callback({results:q.names})
}};
G.dropdownSingleSelectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(J,L){var K=function(M){var P=[];
q.optionsDropdown=M;
var O=[];
O=angular.copy(F.toString().replace("[","").replace("]","").split(","));
var N=angular.copy(G.values);
angular.forEach(O,function(Q){angular.forEach(q.optionsDropdown,function(R){if(Q.toString()===R.value.toString()){P.push({id:R.value,text:R.label})
}})
});
L(P);
G.values=angular.copy(N)
};
var H=function(){};
if(parseInt(B.entity)<=-1&&parseInt(B.entity)>=-3&&parseInt(B.field.id)!==-1){j.retrieveActivityMasterByFieldById('{"primaryKey": '+q.version+"}",K,H)
}else{if(parseInt(B.entity)<=-4&&parseInt(B.entity)>=-6&&parseInt(B.field.id)!==-1){j.retrieveServiceMasterByFieldById('{"primaryKey": '+q.version+"}",K,H)
}else{if(B.field.dbFieldName==="lot_status"||B.field.dbFieldName==="packet_status"||B.field.dbFieldName==="status_of_plan"||B.field.dbFieldName==="parcel_status"||B.field.dbFieldName==="invoice_status"||B.field.dbFieldName==="issue_status"||B.field.dbFieldName==="type_of_plan"){var I=B.field.dbFieldName;
j.retrieveLotStatus(I,K,H)
}else{j.retrieveMasterByFieldById('{"primaryKey": '+G.field.id+"}",K,H)
}}}},formatResult:function(H){return H.text
},formatSelection:function(H){return H.text
},query:function(I){var H=I.term;
q.names=[];
if(G.options.length!==0){q.names=angular.copy(G.options);
angular.forEach(G.options,function(J){q.names.push({id:J.value,text:J.label})
})
}I.callback({results:q.names})
}}
}})
}if(B.field.type==="UserMultiSelect"){angular.forEach(q.ruleList,function(J){var K=J.field.validationPattern;
var G=false;
var F=false;
var I=false;
var H=K.replace("{","").replace("}","").split(",");
angular.forEach(H,function(L){if(L.indexOf('"isEmployee":')>-1){G=true
}if(L.indexOf('"isDepartment":')>-1){F=true
}if(L.indexOf('"isDesignation":')>-1){I=true
}});
J.userMultiselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",initSelection:function(M,Q){var O=[];
var N=angular.copy(J.values);
var P=J.values.toString().split(",");
var L=[];
if(P!==undefined){angular.forEach(P,function(R){R=R.replace('"',"").trim();
L.push(R)
});
r.defaultSelection(L,function(R){var S=[];
q.result=JSON.parse(angular.toJson(R));
for(key in q.result){S.push({id:key,text:R[key]})
}Q(S);
J.values=angular.copy(N)
},function(){})
}},formatResult:function(L){return L.text
},formatSelection:function(L){return L.text
},query:function(O){var N=O.term;
q.names=[];
var P=function(Q){if(Q.length!==0){q.names=Q;
angular.forEach(Q,function(R){q.names.push({id:R.value+":"+R.description,text:R.label})
})
}O.callback({results:q.names})
};
var L=function(){};
if(G&&N.substring(0,2)==="@E"||N.substring(0,2)==="@e"){var M=O.term.slice(2);
e.retrieveUserList(M.trim(),P,L)
}else{if(F&&N.substring(0,2)==="@D"||N.substring(0,2)==="@d"){var M=O.term.slice(2);
e.retrieveDepartmentList(M.trim(),P,L)
}else{if(I&&N.substring(0,2)==="@R"||N.substring(0,2)==="@r"){var M=O.term.slice(2);
e.retrieveRoleList(M.trim(),P,L)
}}}}};
J.values=J.values.toString();
J.userSingleselectComponent={multiple:true,closeOnSelect:false,placeholder:"Select",maximumSelectionSize:1,initSelection:function(N,Q){var O=[];
var M=angular.copy(J.values);
var P=J.values.toString().split(",");
var L=[];
if(P!==undefined){angular.forEach(P,function(R){R=R.replace('"',"").trim();
L.push(R)
});
r.defaultSelection(L,function(R){var S=[];
q.result=JSON.parse(angular.toJson(R));
for(key in q.result){S.push({id:key,text:R[key]})
}Q(S);
J.values=angular.copy(M)
},function(){})
}},formatResult:function(L){return L.text
},formatSelection:function(L){return L.text
},query:function(O){var N=O.term;
q.names=[];
var P=function(Q){if(Q.length!==0){q.names=Q;
angular.forEach(Q,function(R){q.names.push({id:R.value+":"+R.description,text:R.label})
})
}O.callback({results:q.names})
};
var L=function(){};
if(G&&N.substring(0,2)==="@E"||N.substring(0,2)==="@e"){var M=O.term.slice(2);
e.retrieveUserList(M.trim(),P,L)
}else{if(F&&N.substring(0,2)==="@D"||N.substring(0,2)==="@d"){var M=O.term.slice(2);
e.retrieveDepartmentList(M.trim(),P,L)
}else{if(I&&N.substring(0,2)==="@R"||N.substring(0,2)==="@r"){var M=O.term.slice(2);
e.retrieveRoleList(M.trim(),P,L)
}else{if(N.substring(0,2)==="@A"||N.substring(0,2)==="@a"){var M=O.term.slice(2);
e.retrieveActivityList(M.trim(),P,L)
}else{O.callback({results:q.names})
}}}}}}
})
}}q.cancelNotification=function(){q.notification={};
q.notificationToSave={};
q.endRepeat={};
q.allRules=[];
q.ruleList=[];
q.ruleSetId="";
q.submitted=false;
q.recipients=[];
$("#invitees").select2("val",[]);
q.retrieveNotificationsList();
q.initData();
q.operationFlag="add";
q.dynamicNotificationData={};
$("#scrollable-dropdown-menu.typeahead").typeahead("val","");
q.notificationForm.$setPristine()
};
q.retrieveNotificationsList=function(){f.retrieveAllNotificationConfigurations(function(w){q.notificationList=w;
var v=[{id:0,displayName:"Web",selected:false,categoryCount:0},{id:1,displayName:"Email",selected:false,categoryCount:0}];
for(i=0;
i<q.notificationList.length;
i++){var u="";
if(q.notificationList[i].interfaceEType){u+="Email, ";
v[1].categoryCount=v[1].categoryCount+1
}if(q.notificationList[i].interfaceWType){u+="Web, ";
v[0].categoryCount=v[0].categoryCount+1
}u=u.replace(/,\s*$/,"");
q.notificationList[i].typeString=u
}q.categoryList=v
},function(){console.log("Failure")
})
};
q.selectCategory=function(){q.viewListData=[];
q.operationFlag="view";
if(q.selectedCategory.currentNode.id==0){angular.forEach(q.notificationList,function(u){if(u.interfaceWType){q.viewListData.push(u)
}})
}else{if(q.selectedCategory.currentNode.id==1){angular.forEach(q.notificationList,function(u){if(u.interfaceEType){q.viewListData.push(u)
}})
}}};
q.editNotification=function(u){q.operationFlag="edit";
var v=angular.copy(u);
if(!!v){q.endRepeat={};
q.notification={};
q.notification.id=v.id;
q.notification.name=v.name;
q.notification.desc=v.desc;
q.notification.copyOf=v;
q.notification.repeatativeMode=v.repeatativeMode;
q.notification.weeklyOnDays=v.weeklyOnDays;
q.notification.monthlyOnDay=v.monthlyOnDay;
q.notification.endRepeatMode=v.endRepeatMode;
q.notification.endDate=v.endDate;
if(!!v.activity){q.notification.activity=v.activity.toString()
}q.retrieveServices();
q.notification.service=v.service;
if(q.notification.endRepeatMode=="AD"){q.endRepeat.afterDaysUnits=v.afterUnits
}if(q.notification.endRepeatMode=="AR"){q.endRepeat.afterRepititionsUnits=v.afterUnits
}var x=v.taskRecipients;
q.notification.repetitionCount=v.repetitionCount;
q.notification.basedOn=v.basedOn;
q.notification.interfaceEType=v.interfaceEType;
q.notification.interfaceETypeText=v.interfaceETypeText;
q.notification.interfaceWType=v.interfaceWType;
q.notification.interfaceWTypeText=v.interfaceWTypeText;
q.notification.atTime=v.atTime;
q.recipients=v.taskRecipientDataBeanList;
q.dynamicNotificationData=v.taskCustom;
angular.forEach(q.listOfModelsOfDateType,function(z){if(q.dynamicNotificationData.hasOwnProperty(z)){if(q.dynamicNotificationData[z]!==null&&q.dynamicNotificationData[z]!==undefined){q.dynamicNotificationData[z]=new Date(q.dynamicNotificationData[z])
}else{q.dynamicNotificationData[z]=""
}}});
if(!!v.ruleSet&&!!v.ruleSet.rules){q.ruleSetId=v.ruleSet.id;
q.allRules=v.ruleSet.rules;
q.notification.apply=v.ruleSet.rules[v.ruleSet.rules.length-1].apply;
d(v.ruleSet.rules[v.ruleSet.rules.length-1])
}if(q.notification.repeatativeMode==="W"){var y=q.notification.weeklyOnDays.split("|");
var w=0;
angular.forEach(q.weekList,function(A,z){if(A.value===y[w]){A.isChecked="true";
w++
}})
}$("#invitees").select2("val",[])
}};
q.addClick=function(){q.notification={};
q.notificationToSave={};
q.endRepeat={};
q.allRules=[];
q.ruleList=[];
q.submitted=false;
q.recipients=[];
$("#invitees").select2("val",[]);
q.notificationList=[];
q.retrieveNotificationsList();
q.operationFlag="add";
q.displaySearchedNotification="view";
q.initData();
q.dynamicNotificationData={};
$("#scrollable-dropdown-menu.typeahead").typeahead("val","");
q.notificationForm.$setPristine()
};
q.editFromSearch=function(u){l.maskLoading();
f.retrieveNotificationConfigurationById(u,function(y){l.unMaskLoading();
q.operationFlag="edit";
var v=angular.copy(y);
if(!!v){q.endRepeat={};
q.notification={};
q.notification.id=v.id;
q.notification.name=v.name;
q.notification.desc=v.desc;
q.notification.copyOf=v;
q.notification.repeatativeMode=v.repeatativeMode;
q.notification.weeklyOnDays=v.weeklyOnDays;
q.notification.monthlyOnDay=v.monthlyOnDay;
q.notification.endRepeatMode=v.endRepeatMode;
q.notification.endDate=v.endDate;
if(!!v.activity){q.notification.activity=v.activity.toString()
}q.retrieveServices();
q.notification.service=v.service;
if(q.notification.endRepeatMode=="AD"){q.endRepeat.afterDaysUnits=v.afterUnits
}if(q.notification.endRepeatMode=="AR"){q.endRepeat.afterRepititionsUnits=v.afterUnits
}var x=v.taskRecipients;
q.notification.repetitionCount=v.repetitionCount;
q.notification.basedOn=v.basedOn;
q.notification.interfaceEType=v.interfaceEType;
q.notification.interfaceETypeText=v.interfaceETypeText;
q.notification.interfaceWType=v.interfaceWType;
q.notification.interfaceWTypeText=v.interfaceWTypeText;
q.notification.atTime=v.atTime;
q.recipients=v.taskRecipientDataBeanList;
q.dynamicNotificationData=v.taskCustom;
if(!!q.dynamicNotificationData){angular.forEach(q.listOfModelsOfDateType,function(A){if(q.dynamicNotificationData.hasOwnProperty(A)){if(q.dynamicNotificationData[A]!==null&&q.dynamicNotificationData[A]!==undefined){q.dynamicNotificationData[A]=new Date(q.dynamicNotificationData[A])
}else{q.dynamicNotificationData[A]=""
}}})
}if(!!v.ruleSet&&!!v.ruleSet.rules){q.ruleSetId=v.ruleSet.id;
q.allRules=v.ruleSet.rules;
q.notification.apply=v.ruleSet.rules[v.ruleSet.rules.length-1].apply;
d(v.ruleSet.rules[v.ruleSet.rules.length-1])
}if(q.notification.repeatativeMode==="W"){var z=q.notification.weeklyOnDays.split("|");
var w=0;
angular.forEach(q.weekList,function(B,A){if(B.value===z[w]){B.isChecked="true";
w++
}})
}$("#invitees").select2("val",[])
}},function(){l.unMaskLoading();
console.log("Failed..")
})
};
q.getSearchedNotificationRecords=function(v){q.searchRecords=[];
var u=$("#scrollable-dropdown-menu.typeahead").typeahead("val");
if(u.length>0){if(u.length<3){q.searchRecords=[]
}else{if(v!==null&&angular.isDefined(v)&&v.length>0){angular.forEach(v,function(x){var w="";
if(x.interfaceEType){w=w+"Email ,"
}if(x.interfaceWType){w=w+"Web ,"
}w=w.replace(/,\s*$/,"");
x.types=w;
q.searchRecords.push(x)
})
}}q.displaySearchedNotification="search";
q.operationFlag="searchFromMenu"
}};
q.editGoalTemplateFromSearch=function(u){q.displaySearchedNotification="view";
q.operationFlag="edit";
l.maskLoading();
f.retrieveNotificationConfigurationById(u,function(y){l.unMaskLoading();
var v=angular.copy(y);
if(!!v){q.endRepeat={};
q.notification={};
q.notification.id=v.id;
q.notification.name=v.name;
q.notification.desc=v.desc;
q.notification.copyOf=v;
q.notification.repeatativeMode=v.repeatativeMode;
q.notification.weeklyOnDays=v.weeklyOnDays;
q.notification.monthlyOnDay=v.monthlyOnDay;
q.notification.endRepeatMode=v.endRepeatMode;
q.notification.endDate=v.endDate;
if(!!v.activity){q.notification.activity=v.activity.toString()
}q.retrieveServices();
q.notification.service=v.service;
if(q.notification.endRepeatMode=="AD"){q.endRepeat.afterDaysUnits=v.afterUnits
}if(q.notification.endRepeatMode=="AR"){q.endRepeat.afterRepititionsUnits=v.afterUnits
}var x=v.taskRecipients;
q.notification.repetitionCount=v.repetitionCount;
q.notification.basedOn=v.basedOn;
q.notification.interfaceEType=v.interfaceEType;
q.notification.interfaceETypeText=v.interfaceETypeText;
q.notification.interfaceWType=v.interfaceWType;
q.notification.interfaceWTypeText=v.interfaceWTypeText;
q.notification.atTime=v.atTime;
q.recipients=v.taskRecipientDataBeanList;
q.dynamicNotificationData=v.taskCustom;
if(!!q.dynamicNotificationData){angular.forEach(q.listOfModelsOfDateType,function(A){if(q.dynamicNotificationData.hasOwnProperty(A)){if(q.dynamicNotificationData[A]!==null&&q.dynamicNotificationData[A]!==undefined){q.dynamicNotificationData[A]=new Date(q.dynamicNotificationData[A])
}else{q.dynamicNotificationData[A]=""
}}})
}if(!!v.ruleSet&&!!v.ruleSet.rules){q.ruleSetId=v.ruleSet.id;
q.allRules=v.ruleSet.rules;
q.notification.apply=v.ruleSet.rules[v.ruleSet.rules.length-1].apply;
d(v.ruleSet.rules[v.ruleSet.rules.length-1])
}if(q.notification.repeatativeMode==="W"){var z=q.notification.weeklyOnDays.split("|");
var w=0;
angular.forEach(q.weekList,function(B,A){if(B.value===z[w]){B.isChecked="true";
w++
}})
}$("#invitees").select2("val",[])
}},function(){l.unMaskLoading();
console.log("Failed..")
})
};
q.clearFromRadio=function(){if(q.notification.endRepeatMode==="OD"){q.endRepeat.afterDaysUnits="";
q.endRepeat.afterRepititionsUnits=""
}else{if(q.notification.endRepeatMode==="AD"){q.endRepeat.endDate=null;
q.endRepeat.afterRepititionsUnits=""
}else{if(q.notification.endRepeatMode==="AR"){q.endRepeat.endDate=null;
q.endRepeat.afterDaysUnits=""
}}}};
q.getValueToDisplay=function(u){if(u.field.type==="Dropdown"){if(!!u.options){for(var v=0;
v<u.options.length;
v++){if(u.values==u.options[v].value){return u.options[v].label
}}}}else{var w="";
if(!!u.values){for(var v=0;
v<u.values.length;
v++){w+=""+u.values[v]+", "
}w=w.replace(/,\s*$/,"")
}return w
}};
q.retrieveServices=function(){if(!!q.mapOfActivitySerice){if(!!q.notification.activity){q.service=q.mapOfActivitySerice[q.notification.activity.toString()]
}}};
q.showNotifications=function(){k.path("/managenotification")
};
l.unMaskLoading()
}])
});