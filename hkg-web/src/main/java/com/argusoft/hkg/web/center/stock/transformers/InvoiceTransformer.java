/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.argusoft.hkg.web.center.stock.transformers;

import com.argusoft.hkg.common.constantutil.HkSystemConstantUtil;
import com.argusoft.hkg.nosql.core.HkCustomFieldService;
import com.argusoft.hkg.nosql.core.HkStockService;
import com.argusoft.hkg.nosql.model.HkInvoiceDocument;
import com.argusoft.hkg.nosql.model.HkParcelDocument;
import com.argusoft.hkg.web.center.stock.databeans.InvoiceDataBean;
import com.argusoft.hkg.web.center.stock.databeans.RuleDetailsDataBean;
import com.argusoft.hkg.web.center.usermanagement.databeans.LoginDataBean;
import com.argusoft.hkg.web.center.usermanagement.databeans.UMFeatureDetailDataBean;
import com.argusoft.hkg.web.center.util.ApplicationUtil;
import com.argusoft.hkg.web.util.SelectItem;
import com.argusoft.sync.center.model.HkFieldDocument;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import static java.util.stream.Collectors.toList;
import org.bson.BasicBSONObject;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

/**
 *
 * @author shreya
 */
@Service
public class InvoiceTransformer {

    @Autowired
    HkStockService stockService;
    @Autowired
    HkCustomFieldService fieldService;
    @Autowired
    HkCustomFieldService customFieldService;
    @Autowired
    LoginDataBean loginDataBean;
    @Autowired
    ApplicationUtil applicationUtil;
    @Autowired
    RuleExecutionTransformer centerRuleExecutionTransformer;

    public SelectItem saveInvoice(InvoiceDataBean invoiceDataBean) {
        SelectItem selectItem = null;
        Map<String, Object> invoiceCustomMap = invoiceDataBean.getInvoiceCustom();
        Map<String, String> invoiceDbTypeMap = invoiceDataBean.getInvoiceDbType();
        List<String> keysToRemove = new ArrayList<>();
        for (Map.Entry<String, Object> entry : invoiceCustomMap.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (!(value != null && value.toString() != null && value.toString().length() > 0)) {
                keysToRemove.add(key);
            }
        }
        if (!CollectionUtils.isEmpty(keysToRemove)) {
            for (String key : keysToRemove) {
                invoiceCustomMap.remove(key);
            }
        }
        List<String> uiFieldList = new ArrayList<>();
        if (!CollectionUtils.isEmpty(invoiceDbTypeMap)) {
            for (Map.Entry<String, String> entrySet : invoiceDbTypeMap.entrySet()) {
                uiFieldList.add(entrySet.getKey());
            }
        }
        Map<String, String> uiFieldMap = fieldService.retrieveUIFieldNameWithComponentTypes(uiFieldList);
        Map<String, String> autogeneratedLabelMap = new HashMap<>();
        String year = new Integer(Calendar.getInstance().get(Calendar.YEAR)).toString();
        autogeneratedLabelMap.put("beforeLabel", year + "-");
        UMFeatureDetailDataBean feature = applicationUtil.getuMFeatureDetailDataBeanMap().get(HkSystemConstantUtil.Feature.INVOICE);

        List<HkFieldDocument> totalformulaList = fieldService.retrieveAllFormulaList(feature.getId(), loginDataBean.getCompanyId(), HkSystemConstantUtil.FeatureForFormulaEvaluation.ADD_INVOICE, HkSystemConstantUtil.CustomField.ComponentType.FORMULA);

        String invoiceId = stockService.saveInvoice(invoiceCustomMap, invoiceDbTypeMap, uiFieldMap, loginDataBean.getCompanyId(), loginDataBean.getId(), invoiceDataBean.getSequenceNumber(), autogeneratedLabelMap, totalformulaList, feature.getId());
        if (!CollectionUtils.isEmpty(invoiceDataBean.getUiFieldMap())) {
            invoiceDataBean.getUiFieldMap().put("invoiceObjectId", Arrays.asList(invoiceId));
            selectItem = this.retrieveInvoiceById(invoiceDataBean.getUiFieldMap(), invoiceDataBean.getRuleConfigMap());
        }
        return selectItem;
    }

    public SelectItem updateInvoice(InvoiceDataBean invoiceDataBean) {
        SelectItem selectItem = null;
        Map<String, Object> invoiceCustomMap = invoiceDataBean.getInvoiceCustom();
        Map<String, String> invoiceDbTypeMap = invoiceDataBean.getInvoiceDbType();
        List<String> uiFieldList = new ArrayList<>();
        if (!CollectionUtils.isEmpty(invoiceDbTypeMap)) {
            for (Map.Entry<String, String> entrySet : invoiceDbTypeMap.entrySet()) {
                uiFieldList.add(entrySet.getKey());
            }
        }
        UMFeatureDetailDataBean feature = applicationUtil.getuMFeatureDetailDataBeanMap().get(HkSystemConstantUtil.Feature.INVOICE);
        Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula = fieldService.retrieveMapOfDbFieldNameForFeatureInvolvedInFormula(loginDataBean.getCompanyId(), HkSystemConstantUtil.Feature.INVOICE, HkSystemConstantUtil.CustomField.ComponentType.FORMULA);
        List<HkFieldDocument> totalformulaList = fieldService.retrieveAllFormulaList(feature.getId(), loginDataBean.getCompanyId(), HkSystemConstantUtil.FeatureForFormulaEvaluation.EDIT_INVOICE, HkSystemConstantUtil.CustomField.ComponentType.FORMULA);
        Map<String, String> autogeneratedLabelMap = new HashMap<>();
        String year = new Integer(Calendar.getInstance().get(Calendar.YEAR)).toString();
        autogeneratedLabelMap.put("beforeLabel", invoiceDataBean.getYear().toString() + "-");
        Boolean result = stockService.updateInvoice(new ObjectId(invoiceDataBean.getId()), invoiceCustomMap, invoiceDbTypeMap, mapForFeatureInvolvedInFormula, totalformulaList, applicationUtil.getFeatureIdNameMap(), loginDataBean.getCompanyId(), loginDataBean.getId(), feature.getId(), invoiceDataBean.getSequenceNumber(), autogeneratedLabelMap);
        if (result != null && result) {
            if (!CollectionUtils.isEmpty(invoiceDataBean.getUiFieldMap())) {
                invoiceDataBean.getUiFieldMap().put("invoiceObjectId", Arrays.asList(invoiceDataBean.getId()));
                selectItem = this.retrieveInvoiceById(invoiceDataBean.getUiFieldMap(), invoiceDataBean.getRuleConfigMap());
            }
        }
        return selectItem;
    }

    public Map<Boolean, String> deleteInvoice(String invoiceId) {
        Map<Boolean, String> responseAndMsgMap = new HashMap<>();
        if (invoiceId != null) {
            List<ObjectId> invoiceObjectIds = new ArrayList<>();
            invoiceObjectIds.add(new ObjectId(invoiceId));
            List<ObjectId> parcelIds = stockService.retrieveParcelIds(null, invoiceObjectIds, loginDataBean.getCompanyId(), Boolean.FALSE);
            if (CollectionUtils.isEmpty(parcelIds)) {
                Boolean deleteInvoice = stockService.deleteInvoice(new ObjectId(invoiceId), loginDataBean.getId());
                if (deleteInvoice) {
                    responseAndMsgMap.put(Boolean.TRUE, "Invoice deleted successfully");
                    return responseAndMsgMap;
                } else {
                    responseAndMsgMap.put(Boolean.FALSE, "Invoice can not be deleted");
                    return responseAndMsgMap;
                }
            } else {
                responseAndMsgMap.put(Boolean.FALSE, "Can not delete Invoice because it is having parcels");
                return responseAndMsgMap;
            }
        }
        return responseAndMsgMap;
    }

    public List<SelectItem> searchInvoice(InvoiceDataBean invoiceDataBean) {
        Map<String, Object> map1 = invoiceDataBean.getRuleConfigMap();
        Map<String, String> fieldIdToNameMap = new HashMap<>();
        Set<Long> fieldIds = new HashSet<>();
        if (!CollectionUtils.isEmpty(map1) && map1.get("fieldIdNameMap") != null) {
            fieldIdToNameMap = (Map<String, String>) map1.get("fieldIdNameMap");
            for (String lng : fieldIdToNameMap.keySet()) {
                fieldIds.add(Long.parseLong(lng));
            }
        }
        Long franchise = loginDataBean.getCompanyId();
        Map<String, Map<String, Object>> featureCustomMapValue = invoiceDataBean.getFeatureCustomMapValue();
        Map<String, Object> invoiceFieldMap = new HashMap<>();
        Map<String, Object> parcelFieldMap = new HashMap<>();
        if (!CollectionUtils.isEmpty(featureCustomMapValue)) {
            if (!CollectionUtils.isEmpty(featureCustomMapValue)) {
                for (Map.Entry<String, Map<String, Object>> entry : featureCustomMapValue.entrySet()) {
                    String featureName = entry.getKey();
                    Map<String, Object> map = entry.getValue();
                    if (!StringUtils.isEmpty(featureName)) {
                        if (featureName.equalsIgnoreCase(HkSystemConstantUtil.Feature.INVOICE)) {
                            if (!CollectionUtils.isEmpty(map)) {
                                this.prepareAndValidateFieldMap(map, invoiceFieldMap);
                            }
                        } else if (featureName.equalsIgnoreCase(HkSystemConstantUtil.Feature.PARCEL)) {
                            if (!CollectionUtils.isEmpty(map)) {
                                this.prepareAndValidateFieldMap(map, parcelFieldMap);
                            }
                        }
                    }
                }
            }
            List<HkInvoiceDocument> hkInvoiceDocuments = null;
            if (!CollectionUtils.isEmpty(invoiceFieldMap)) {
                hkInvoiceDocuments = stockService.retrieveInvoices(invoiceFieldMap, franchise, Boolean.FALSE, null, null, null, null);
            }
            List<ObjectId> invoiceIds = null;
            if (!CollectionUtils.isEmpty(hkInvoiceDocuments)) {
                invoiceIds = new ArrayList<>();
                for (HkInvoiceDocument invoiceDocument : hkInvoiceDocuments) {
                    invoiceIds.add(invoiceDocument.getId());
                }
            }
            List<HkParcelDocument> parcelDocuments = new ArrayList<>();
            if (!CollectionUtils.isEmpty(parcelFieldMap)) {
                List<ObjectId> parcelIds = null;
                if (invoiceDataBean.isSearchOnParameter() != null && invoiceDataBean.isSearchOnParameter() == false && invoiceDataBean.getId() != null) {
                    parcelIds = new ArrayList<>();
                    String[] parcelId = invoiceDataBean.getId().split(",");
                    for (String string : parcelId) {
                        parcelIds.add(new ObjectId(string.replaceAll("\\s+", "")));
                    }
                }
                parcelDocuments = stockService.retrieveParcels(parcelFieldMap, invoiceIds, parcelIds, franchise, Boolean.FALSE, null, HkSystemConstantUtil.StockStatus.NEW_ROUGH,null,null);
                if (!CollectionUtils.isEmpty(parcelDocuments)) {
                    invoiceIds = new ArrayList<>();
                    for (HkParcelDocument parcelDocument : parcelDocuments) {
                        invoiceIds.add(parcelDocument.getInvoice());
                    }
                    hkInvoiceDocuments = stockService.retrieveInvoices(null, franchise, Boolean.FALSE, invoiceIds, null, invoiceDataBean.getOffset(), invoiceDataBean.getLimit());
                }
            }
            Map<String, Map<String, RuleDetailsDataBean>> invoiceFieldRuleDetailsMap = null;
            if (!CollectionUtils.isEmpty(map1) && map1.get("featureName") != null) {
                invoiceFieldRuleDetailsMap = centerRuleExecutionTransformer.prepareDataAndExecuteScreenRules(hkInvoiceDocuments, new ArrayList<>(fieldIds), map1.get("featureName").toString(), HkSystemConstantUtil.Feature.INVOICE);
            }
            Map<String, Object> objectMap = new HashMap<>();
            objectMap.putAll(invoiceDataBean.getUiFieldMap());
            objectMap.putAll(invoiceDataBean.getRuleConfigMap());
            List<SelectItem> selectItems = this.convertModelToUiData(hkInvoiceDocuments, invoiceDataBean.getUiFieldMap(), invoiceFieldRuleDetailsMap, fieldIdToNameMap);
            return selectItems;

        } else {
            return null;
        }
    }

    private Map<String, Object> prepareAndValidateFieldMap(Map<String, Object> map, Map<String, Object> fieldMap) {
        Iterator<Map.Entry<String, Object>> iter = map.entrySet().iterator();
        while (iter.hasNext()) {
            Map.Entry<String, Object> entry = iter.next();
            String key = entry.getKey();
            Object value = entry.getValue();
            if (key.contains("$MS$") || key.contains("$UMS$") || key.contains("$AG$")) {
                if (value instanceof String && !StringUtils.isEmpty(value)) {
                    List<String> items = Arrays.asList(value.toString().split(","));
                    fieldMap.put(key, items);
                } else if (value instanceof Collection && !CollectionUtils.isEmpty((Collection<?>) value)) {
                    List<String> items = Arrays.asList(value.toString().split(","));
                    fieldMap.put(key, items);
                } else {
                    iter.remove();
                }
            } else {
                fieldMap.put(key, value);
            }
        }
        return fieldMap;
    }

    public long getCountofInvoiceDocumentsFromCriteria() {
        long totalItems = stockService.getCountofInvoiceDocumentsFromCriteria(0l, Boolean.FALSE, null);
        return totalItems;
    }

    public long getCountofInvoiceDocumentsFromSearchCriteria(InvoiceDataBean invoiceDataBean) {
        long totalItems = 0l;
        Map<String, Object> map1 = invoiceDataBean.getRuleConfigMap();
        Map<String, String> fieldIdToNameMap = new HashMap<>();
        Set<Long> fieldIds = new HashSet<>();
        if (!CollectionUtils.isEmpty(map1) && map1.get("fieldIdNameMap") != null) {
            fieldIdToNameMap = (Map<String, String>) map1.get("fieldIdNameMap");
            for (String lng : fieldIdToNameMap.keySet()) {
                fieldIds.add(Long.parseLong(lng));
            }
        }
        Long franchise = loginDataBean.getCompanyId();
        Map<String, Map<String, Object>> featureCustomMapValue = invoiceDataBean.getFeatureCustomMapValue();
        Map<String, Object> invoiceFieldMap = new HashMap<>();
        Map<String, Object> parcelFieldMap = new HashMap<>();
        if (!CollectionUtils.isEmpty(featureCustomMapValue)) {
            if (!CollectionUtils.isEmpty(featureCustomMapValue)) {
                for (Map.Entry<String, Map<String, Object>> entry : featureCustomMapValue.entrySet()) {
                    String featureName = entry.getKey();
                    Map<String, Object> map = entry.getValue();
                    if (!StringUtils.isEmpty(featureName)) {
                        if (featureName.equalsIgnoreCase(HkSystemConstantUtil.Feature.INVOICE)) {
                            if (!CollectionUtils.isEmpty(map)) {
                                this.prepareAndValidateFieldMap(map, invoiceFieldMap);
                            }
                        } else if (featureName.equalsIgnoreCase(HkSystemConstantUtil.Feature.PARCEL)) {
                            if (!CollectionUtils.isEmpty(map)) {
                                this.prepareAndValidateFieldMap(map, parcelFieldMap);
                            }
                        }
                    }
                }
            }
            List<HkInvoiceDocument> hkInvoiceDocuments = null;
            if (!CollectionUtils.isEmpty(invoiceFieldMap)) {
                hkInvoiceDocuments = stockService.retrieveInvoices(invoiceFieldMap, franchise, Boolean.FALSE, null, null, null, null);
            }
            List<ObjectId> invoiceIds = null;
            if (!CollectionUtils.isEmpty(hkInvoiceDocuments)) {
                invoiceIds = new ArrayList<>();
                for (HkInvoiceDocument invoiceDocument : hkInvoiceDocuments) {
                    invoiceIds.add(invoiceDocument.getId());
                }
            }
            List<HkParcelDocument> parcelDocuments = new ArrayList<>();
            if (!CollectionUtils.isEmpty(parcelFieldMap)) {
                List<ObjectId> parcelIds = null;
                if (invoiceDataBean.isSearchOnParameter() != null && invoiceDataBean.isSearchOnParameter() == false && invoiceDataBean.getId() != null) {
                    parcelIds = new ArrayList<>();
                    String[] parcelId = invoiceDataBean.getId().split(",");
                    for (String string : parcelId) {
                        parcelIds.add(new ObjectId(string.replaceAll("\\s+", "")));
                    }
                }
                parcelDocuments = stockService.retrieveParcels(parcelFieldMap, invoiceIds, parcelIds, franchise, Boolean.FALSE, null, HkSystemConstantUtil.StockStatus.NEW_ROUGH,null,null);
                if (!CollectionUtils.isEmpty(parcelDocuments)) {
                    invoiceIds = new ArrayList<>();
                    for (HkParcelDocument parcelDocument : parcelDocuments) {
                        invoiceIds.add(parcelDocument.getInvoice());
                    }
                    totalItems = stockService.getCountofInvoiceDocumentsFromCriteria(franchise, Boolean.FALSE, invoiceIds);
                }
            }
        }
        return totalItems;
    }

    public List<SelectItem> retrieveInvoices(InvoiceDataBean invoiceDataBean) {
        if (invoiceDataBean != null && !CollectionUtils.isEmpty(invoiceDataBean.getUiFieldMap())) {
            Map<String, Object> map1 = (Map<String, Object>) invoiceDataBean.getRuleConfigMap();
            Map<String, String> fieldIdToNameMap = new HashMap<>();
            Set<Long> fieldIds = new HashSet<>();
            if (!CollectionUtils.isEmpty(map1) && map1.get("fieldIdNameMap") != null) {
                fieldIdToNameMap = (Map<String, String>) map1.get("fieldIdNameMap");
                for (String lng : fieldIdToNameMap.keySet()) {
                    fieldIds.add(Long.parseLong(lng));
                }
            }
            List<HkInvoiceDocument> hkInvoiceDocuments = stockService.retrieveAllInvoiceByCriteria(0l, Boolean.FALSE, invoiceDataBean.getOffset(), invoiceDataBean.getLimit());
            hkInvoiceDocuments.sort(Comparator.comparing(HkInvoiceDocument::getYear).thenComparing(HkInvoiceDocument::getSequenceNumber).reversed());
            Map<String, Map<String, RuleDetailsDataBean>> invoiceFieldRuleDetailsMap = null;
            if (!CollectionUtils.isEmpty(map1) && map1.get("featureName") != null) {
                invoiceFieldRuleDetailsMap = centerRuleExecutionTransformer.prepareDataAndExecuteScreenRules(hkInvoiceDocuments, new ArrayList<>(fieldIds), map1.get("featureName").toString(), HkSystemConstantUtil.Feature.INVOICE);
            }
            List<SelectItem> selectItems = this.convertModelToUiData(hkInvoiceDocuments, invoiceDataBean.getUiFieldMap(), invoiceFieldRuleDetailsMap, fieldIdToNameMap);
            return selectItems;
        }
        return null;
    }

    public SelectItem retrieveInvoiceById(Map<String, List<String>> map, Map<String, Object> ruleConfigMap) {
        SelectItem selectItem = null;
        if (!CollectionUtils.isEmpty(map)) {
            Map<String, Object> map1 = ruleConfigMap;
            Map<String, String> fieldIdToNameMap = new HashMap<>();
            Set<Long> fieldIds = new HashSet<>();
            if (!CollectionUtils.isEmpty(map1) && map1.get("fieldIdNameMap") != null) {
                fieldIdToNameMap = (Map<String, String>) map1.get("fieldIdNameMap");
                for (String lng : fieldIdToNameMap.keySet()) {
                    fieldIds.add(Long.parseLong(lng));
                }
            }
//            System.out.println("fieldIds-----" + fieldIds);
            ObjectId invoiceObjecId = null;
            for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                if (entry.getKey().equalsIgnoreCase("invoiceObjectId")) {
                    invoiceObjecId = new ObjectId(entry.getValue().get(0));
                    break;
                }
            }
            HkInvoiceDocument invoiceDocument = stockService.retrieveInvoiceById(invoiceObjecId);
            Map<String, Map<String, RuleDetailsDataBean>> invoiceFieldRuleDetailsMap = null;
            if (!CollectionUtils.isEmpty(map1) && map1.get("featureName") != null) {
                invoiceFieldRuleDetailsMap = centerRuleExecutionTransformer.prepareDataAndExecuteScreenRules(Arrays.asList(invoiceDocument), new ArrayList<>(fieldIds), map1.get("featureName").toString(), HkSystemConstantUtil.Feature.INVOICE);
            }
            List<SelectItem> selectItems = this.convertModelToUiData(Arrays.asList(invoiceDocument), map, invoiceFieldRuleDetailsMap, fieldIdToNameMap);
            if (!CollectionUtils.isEmpty(selectItems) && selectItems.get(0) != null) {
                selectItem = selectItems.get(0);
            }
        }
        return selectItem;
    }

    public Integer getNextInvoiceId() {
        Integer nextInvoiceSequence = stockService.getNextInvoiceSequence();
        if (nextInvoiceSequence != null) {
            return ++nextInvoiceSequence;
        }
        return null;
    }

    public Boolean isInvoiceIdExists(Integer invoiceId, String invoiceObjectId) {
        Boolean invoiceSequenceExist = Boolean.FALSE;
        if (invoiceObjectId != null) {
            invoiceSequenceExist = stockService.isInvoiceSequenceExist(invoiceId, new ObjectId(invoiceObjectId));
        } else {
            invoiceSequenceExist = stockService.isInvoiceSequenceExist(invoiceId, null);
        }
        return invoiceSequenceExist;
    }

    public List<SelectItem> convertModelToUiData(List<HkInvoiceDocument> hkInvoiceDocuments, Map<String, List<String>> map, Map<String, Map<String, RuleDetailsDataBean>> invoiceFieldRuleDetailsMap, Map<String, String> fieldIdToNameMap) {
        List<SelectItem> selectItems = new ArrayList<>();
        Map<String, String> mapOfDbFieldWithCurrencyCode = fieldService.mapOfDbFieldWithCurrencyCode(loginDataBean.getCompanyId());
        if (!CollectionUtils.isEmpty(hkInvoiceDocuments)) {
            for (HkInvoiceDocument invoiceDocument : hkInvoiceDocuments) {
                if (invoiceDocument != null) {
                    SelectItem selectItem = new SelectItem(invoiceDocument.getId().toString(), null);
                    selectItem.setYear(invoiceDocument.getYear());
                    selectItem.setBeforeLabel(invoiceDocument.getYear().toString() + "-");
                    Map<String, Object> mapToSentOnUI = new HashMap<>();
                    BasicBSONObject fieldValue = invoiceDocument.getFieldValue();
                    List<String> invoiceDbFieldNames = map.get("dbFieldNames");
                    if (fieldValue != null && !CollectionUtils.isEmpty(invoiceDbFieldNames)) {
                        for (String dbField : invoiceDbFieldNames) {
                            String[] split = dbField.split("\\" + HkSystemConstantUtil.SEPERATOR_FOR_CUSTOM_FIELD_LABEL);
                            String componentType = split[1];
                            if (componentType.equals(HkSystemConstantUtil.CustomField.COMPONENT_CODE_MAP.get(HkSystemConstantUtil.CustomField.ComponentType.CURRENCY))) {
                                if (fieldValue.toMap().containsKey(dbField)) {
                                    mapToSentOnUI.put(dbField, fieldValue.toMap().get(dbField));
                                }
                                if (fieldValue.toMap().containsKey(dbField + HkSystemConstantUtil.CURRENCY_CODE_CUSTOM)) {
                                    mapToSentOnUI.put(dbField + HkSystemConstantUtil.CURRENCY_CODE_CUSTOM, fieldValue.toMap().get(dbField + HkSystemConstantUtil.CURRENCY_CODE_CUSTOM));
                                } else {
                                    if (mapOfDbFieldWithCurrencyCode != null && !mapOfDbFieldWithCurrencyCode.isEmpty()) {
                                        if (mapOfDbFieldWithCurrencyCode.containsKey(dbField)) {
                                            String currencyCodeVal = mapOfDbFieldWithCurrencyCode.get(dbField);
                                            if (StringUtils.hasLength(currencyCodeVal) && StringUtils.hasText(currencyCodeVal)) {
                                                String currencyCode = currencyCodeVal.toString().replaceAll("^\"|\"$", "");
                                                mapToSentOnUI.put(dbField + HkSystemConstantUtil.CURRENCY_CODE_CUSTOM, currencyCode);
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (fieldValue.toMap().containsKey(dbField)) {
                                    mapToSentOnUI.put(dbField, fieldValue.toMap().get(dbField));
                                }
                            }
                        }

                        //Set screen rule related details.
                        if (invoiceFieldRuleDetailsMap != null && !CollectionUtils.isEmpty(invoiceFieldRuleDetailsMap)) {
//                            System.out.println("invoiceFieldRuleDetailsMap:::" + invoiceFieldRuleDetailsMap);
//                            System.out.println("fieldIdToNameMap:::" + fieldIdToNameMap);
                            if (!CollectionUtils.isEmpty(invoiceFieldRuleDetailsMap.get(invoiceDocument.getId().toString()))) {
                                Map<String, RuleDetailsDataBean> screenRuleDetailsWithDbFieldName = new HashMap<>();
                                Map<String, RuleDetailsDataBean> ruleDetails = invoiceFieldRuleDetailsMap.get(invoiceDocument.getId().toString());
                                for (Map.Entry<String, RuleDetailsDataBean> entry : ruleDetails.entrySet()) {
                                    if (fieldIdToNameMap.get(entry.getKey()) != null) {
                                        screenRuleDetailsWithDbFieldName.put(fieldIdToNameMap.get(entry.getKey()), entry.getValue());
                                    }
                                }
                                selectItem.setScreenRuleDetailsWithDbFieldName(screenRuleDetailsWithDbFieldName);

                            }
                        }

                        selectItem.setCategoryCustom(mapToSentOnUI);
                        selectItems.add(selectItem);
                    }
                }
            }
        }
        return selectItems;
    }

    public Boolean linkRoughParcelWithPurchase(List<String> parcelIds, List<String> purchaseIds) {
        Boolean result = Boolean.FALSE;
        if (!CollectionUtils.isEmpty(parcelIds) && !CollectionUtils.isEmpty(purchaseIds)) {
            List<ObjectId> parcelObjectIds = new ArrayList<>();
            for (String parcelId : parcelIds) {
                parcelObjectIds.add(new ObjectId(parcelId));
            }
            List<ObjectId> purchaseObjectIds = new ArrayList<>();
            for (String purchaseId : purchaseIds) {
                purchaseObjectIds.add(new ObjectId(purchaseId));
            }
            result = stockService.linkRoughParcelWithPurchase(parcelObjectIds, purchaseObjectIds);
        }
        return result;
    }

}
