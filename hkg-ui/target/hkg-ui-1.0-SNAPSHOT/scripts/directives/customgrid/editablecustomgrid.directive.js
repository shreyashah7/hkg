/*
 * Author: Shreya,Akta,Siddharth
 * @description This direvtive will provide tabular structure of dynamic form directive.
 * gridoptions.getSelectedTableRows() will return current selected rows of table will be array or signle object as per multiple
 * true or false
 * gridoptions.multipse : It is boolean variable if true will allow more than one row selection
 * enableselection: This is boolean variable if set to false grid will not show column to select row
 * invoiceId : this is id of invoice and it is used in case of dependent fields of other feature in dynamic form directive
 * parcelId : this is id of parcel it is used in case of dependent fields of other feature in dynamic form directive
 */
define(['angular', 'dynamicFormGrid', 'colResizeableDirective', 'ruleExecutionService', 'infiniteScroll'], function () {
    globalProvider.compileProvider.directive('editableCustomGrid', ["$compile", "DynamicFormService", "$filter", "RuleExecutionService", function ($compile, DynamicFormService, $filter, RuleExecutionService) {
            var orderBy = $filter('orderBy');
            var link = function (scope) {
                if (angular.isDefined(scope.editableGridOptions)) {
                    //Dynamic width for the components
                    scope.supported = {
                        'text': {width: '200px', align: 'left'},
                        'date': {width: '200px', align: 'left'},
                        'datetime': {width: '200px', align: 'left'},
                        'datetime-local': {width: '200px', align: 'left'},
                        'email': {width: '200px', align: 'left'},
                        'number': {width: '200px', align: 'right'},
                        'password': {width: '200px', align: 'left'},
                        'textarea': {width: '200px', align: 'left'},
                        'time': {width: '200px', align: 'left'},
                        'url': {width: '200px', align: 'left'},
                        'checkbox': {width: '50px', align: 'left'},
                        'color': {width: '200px', align: 'left'},
                        'file': {width: '200px', align: 'left'},
                        'range': {width: '200px', align: 'right'},
                        'select': {width: '200px', align: 'left'},
                        'subEntity': {width: '200px', align: 'left'},
                        'pointerselect': {width: '200px', align: 'left'},
                        'checklist': {width: '200px', align: 'left'},
                        'fieldset': {width: '200px', align: 'left'},
                        'radio': {width: '75px', align: 'left'},
                        'imageUpload': {width: '200px', align: 'left'},
                        'currency': {width: '200px', align: 'right'},
                        'fileUpload': {width: '200px', align: 'left'},
                        'fileDownload': {width: '100px', align: 'left'},
                        'multiSelect': {width: '300px', align: 'left'},
                        'percent': {width: '100px', align: 'right'},
                        'UserMultiSelect': {width: '300px', align: 'left'},
                        'AutoGenerated': {width: '200px', align: 'right'},
                        'pointer_multiSelect': {width: '300px', align: 'left'},
                        'Angle': {width: '100px', align: 'right'},
                        'formula': {width: '200px', align: 'right'},
                        'exchangeRate': {width: '200px', align: 'right'},
                    };
                }
            };
            var controller = ["$scope", "$rootScope", "$element", function ($scope, $rootScope, $element) {
                    $scope.token = $rootScope.authToken;
                    var oldUnSavedObj = {},
                            editOpenFlag = false,
                            lastSelectedTableRow = null,
                            rowIndexEditMode,
                            selectedTableRows,
                            deleteIndex,
                            oldRecord = {},
                            formObj,
                            tempQueue = [],
                            categoryCustm;

                    $scope.searchEditFlag = true

                    //This code will assign dynamically appropriate function at directive load time to select table row

                    if ($scope.editableGridOptions.enableselection != false) {
                        var selectCurrentRowMultiple = function (event, index) {
                            var element = $(event.target).closest("tr");
                            element.toggleClass("active");
                            if (element.hasClass("active")) {
                                selectedTableRows.push($scope.editableGridOptions.datarows[index]);
                            } else {
                                selectedTableRows.splice($scope.editableGridOptions.datarows.indexOf(index), 1);
                            }
                        };
                        var selectCurrentRowSingle = function (event, index) {
                            var element = $(event.target).closest("tr");
                            if (lastSelectedTableRow != null && !(lastSelectedTableRow.is(element))) {
                                lastSelectedTableRow.removeClass("active");
                            }
                            lastSelectedTableRow = element;
                            element.toggleClass("active");
                            if (element.hasClass("active")) {
                                selectedTableRows = $scope.editableGridOptions.datarows[index];
                            } else {
                                selectedTableRows = null;
                            }
                        };
                        if ($scope.editableGridOptions.multipleselection === true) {
                            selectedTableRows = [];
                            $scope.selectCurrentRow = selectCurrentRowMultiple;
                        }
                        else {
                            $scope.selectCurrentRow = selectCurrentRowSingle;
                        }
                    }

                    $scope.removeRow = function (index, isCancel) {
                        /**
                         * Direct jquery is used here to remove dom element , as in current version of angularjs (1.2.*) there
                         * is issue with ng-repet-start and ng-if. When we is ng-if inside ng-repeat-start it ng-if is will not
                         * remove that DOM element on condition false.
                         * https://github.com/angular/angular.js/issues/3104
                         */
                        $("#row" + index).remove();
                        $scope.submitted = false;
                        if (!isCancel) {
                            $scope.addNewRow(index);
                        }

                    };
                    $scope.createOrUpdateRecord = function (createOrUpdateRecord, index, form, dbType) {
                        $scope.submitted = true;
                        if (form.$valid === true) {
                            $scope.submitted = false;
                            if (createOrUpdateRecord !== null && createOrUpdateRecord !== undefined && createOrUpdateRecord.categoryCustom !== null && createOrUpdateRecord !== undefined) {
                                angular.forEach(createOrUpdateRecord.categoryCustom, function (val, key) {
                                    if (key.split('$').length > 0) {
                                        var type = key.split('$');
                                        if (type[2] == 'Date') {
                                            val = new Date(val);
                                            createOrUpdateRecord.categoryCustom[key] = val;
                                        }
                                    }
                                });
                            }
                            var dataToSend = {
                                featureName: $scope.featureName,
                                entityId: createOrUpdateRecord.value,
                                entityType: $scope.entityType,
                                currentFieldValueMap: createOrUpdateRecord.categoryCustom,
                                dbType: dbType
                            };
                            RuleExecutionService.executePostRule(dataToSend, function (res) {
                                //Prevent the record from edit if pre rule satisfies.
                                if (!!res.validationMessage) {
                                    var type = $rootScope.warning;
                                    $rootScope.addMessage(res.validationMessage, type);
                                    return;
                                } else {
                                    $scope.editableGridOptions.createOrUpdateRecord(createOrUpdateRecord, dbType, function (newRecord) {
                                        if (newRecord !== null && newRecord !== undefined) {
                                            var dataItem = angular.copy(newRecord);
                                            dataItem.isEditGridFlag = false;
                                            dataItem.isLinked = false;
                                            if (dataItem.categoryCustom != null) {
                                                for (var key in dataItem.categoryCustom) {
                                                    var split = key.split('$');
                                                    if (split[1] === 'AG') {
                                                        var value = dataItem.categoryCustom[key];
                                                        if (value != null || value) {
                                                            var valueArr = value.split('-');
                                                            dataItem.categoryCustom[key] = valueArr[1];
                                                        }
                                                    }
                                                }
                                            }
                                            $scope.editableGridOptions.datarows[index] = angular.copy(dataItem);
                                            $scope.editableGridOptions.datarowsFromDb[index] = angular.copy(dataItem);
                                            $scope.getLabelRows(angular.copy(newRecord), index, function () {
                                                $scope.editableGridOptions.totalItems = $scope.editableGridOptions.totalItems + 1;
                                                oldRecord = {};
                                                if (tempQueue.length == 1) {
                                                    tempQueue.splice(0, 1);
                                                } else {
                                                    tempQueue.splice(0, 1);
                                                }
                                                $scope.removeRow(index, false);
                                                $scope.searchEditFlag = true;
                                                createOrUpdateRecord.isEditGridFlag = false;
                                            });
                                        }
                                    });
                                }
                            }, function (res) {
                            });

                        } else {
                            var firstInvalid = $element[0].querySelector('input.ng-invalid');
                            // if we find one, set focus
                            if (firstInvalid) {
                                firstInvalid.focus();
                            }
                        }
                    };

                    $scope.showImagePopup = function (imageFileName) {
                        $scope.imageFileNamePopup = imageFileName;
                        $("#galleryPopup").modal("show");
                    };

                    $scope.hideImagePopup = function () {
                        $("#galleryPopup").modal("hide");
                        $rootScope.removeModalOpenCssAfterModalHide();
                    };

                    $scope.showDeletePopup = function (dataRow, index) {
                        deleteIndex = index;
                        $rootScope.deleteRecord = angular.copy(dataRow);
                        $("#" + $scope.editableGridOptions.deleteModalId).modal("show");

                    };

                    $scope.deletesRecord = function () {
                        if ($rootScope.deleteRecord !== undefined) {
                            $scope.editableGridOptions.deleteRecord(angular.copy($rootScope.deleteRecord));
                            $scope.hideDeletePopup();
                        }
                    };

                    $scope.hideDeletePopup = function () {
                        $("#" + $scope.editableGridOptions.deleteModalId).modal("hide");
                        if (lastSelectedTableRow != null && $rootScope.deleteRecord !== undefined && selectedTableRows.value === $rootScope.deleteRecord.value) {
                            selectedTableRows = null;
                            lastSelectedTableRow.removeClass("active");
                        }
                        $rootScope.deleteRecord = undefined;
                    };
                    $scope.setFormsss = function (form, dbType) {
                        if (formObj == undefined) {
                            oldUnSavedObj.dbType = dbType;
                            formObj = form;
                            oldUnSavedObj.formObj = formObj;
                        }
                    }
                    tempQueue = [];
                    var makeACopyOfOldRecord = function (oldRecord, index, event) {
//                        console.log(JSON.stringify(oldRecord));
                        $scope.searchEditFlag = false;
                        editOpenFlag = true;
                        var count = 0;
                        $scope.currentIndex = index;
                        tempQueue.push(angular.copy(oldRecord));
                        angular.forEach($scope.editableGridOptions.datarows, function (item, index) {
                            if (item.isEditGridFlag && count == 0) {
                                oldUnSavedObj.rowIndex = index;
                                count++;
                            }
                        });
                        if (tempQueue.length > 1) {
                            oldUnSavedObj.tempRecord = angular.copy(tempQueue[0]);
                        }
                        if (tempQueue.length == 1) {
                            oldUnSavedObj.tempRecord = angular.copy(oldRecord);
                            oldUnSavedObj.rowIndex = index;
                            if (oldRecord.value == null || oldRecord.value === undefined) {
                                if ($scope.editableGridOptions.seqId) {
                                    $scope.editableGridOptions.seqId(function (result) {
                                        if (result !== undefined && result !== null) {
                                            for (var key in result) {
                                                if (result.hasOwnProperty(key)) {
                                                    if (key in oldRecord.categoryCustom) {
                                                        oldRecord.categoryCustom[key] = result[key];
                                                    }
                                                }
                                            }
                                        }

                                    });
                                }
                            }
                            oldRecord.isEditGridFlag = true;
                            setRowIndexInEditMode(index);
                            oldRecord = angular.copy(oldRecord);
                        } else {
                            $scope.showConfirmationPopup();
                            oldRecord = angular.copy(oldRecord);
                        }
//                        if (count == 0) {
//                            console.log("inside equal 0");
//                            oldUnSavedObj.tempRecord = angular.copy(oldRecord);
//                            oldUnSavedObj.rowIndex = index;
//                            if (oldRecord.value == null || oldRecord.value === undefined) {
//                                if ($scope.editableGridOptions.seqId) {
//                                    $scope.editableGridOptions.seqId(function (result) {
//                                        if (result !== undefined && result !== null) {
//                                            for (var key in result) {
//                                                if (result.hasOwnProperty(key)) {
//                                                    if (key in oldRecord.categoryCustom) {
//                                                        oldRecord.categoryCustom[key] = result[key];
//                                                    }
//                                                }
//                                            }
//                                        }
//
//                                    });
//                                }
//                            }
//                            oldRecord.isEditGridFlag = true;
//                            setRowIndexInEditMode(index);
//                            oldRecord = angular.copy(oldRecord);
//                        } else {
//                            console.log("inside gte 0")
//                            $scope.showConfirmationPopup();
//                            oldRecord = angular.copy(oldRecord);
//                        }

                    };
                    $scope.makeACopyOfOldRecord = function (oldRecord, index, event) {
//                        console.log(JSON.stringify(oldRecord));
                        if (!!oldRecord.value) {
                            var dataToSend = {
                                featureName: $scope.featureName,
                                entityId: oldRecord.value,
                                entityType: $scope.entityType
                            };
                            RuleExecutionService.executePreRule(dataToSend, function (res) {
                                console.log('pre rule::::' + JSON.stringify(res));
                                //Prevent the record from edit if pre rule satisfies.
                                if (!!res.validationMessage) {
                                    var type = $rootScope.warning;
                                    $rootScope.addMessage(res.validationMessage, type);
                                    return;
                                } else {
                                    makeACopyOfOldRecord(oldRecord, index, event);
                                }
                            }, function (res) {
                            });
                        } else {
                            makeACopyOfOldRecord(oldRecord, index, event);
                        }

                    };

                    $scope.getLabelRows = function (createOrUpdateRecord, index, callback) {
                        var newVar = [];
                        newVar.push(angular.copy(createOrUpdateRecord));
                        if (newVar !== undefined) {
                            DynamicFormService.convertorForCustomField(newVar, function (result) {
                                $scope.editableGridOptions.labelrows[index] = angular.copy(result[0]);
                                $scope.editableGridOptions.labelrowsFromDb[index] = angular.copy(result[0]);
                                callback();
                            }, true);
                        }
                    };
                    // Commented out as it is not useful in current scenarios
//                    $scope.createRecord = function (createdRecord, index, form) {
//                        if (form.$valid === true) {
//                            createdRecord.isEditGridDirFlag = false;
//                            $scope.editableGridOptions.datarows[index] = $scope.editableGridOptions.createRecord(createdRecord);
//                            $scope.removeRow(index);
//                        }
//                    }
                    var currentDate = new Date();
                    var currentYear = currentDate.getFullYear();
                    $scope.addNewRow = function (index) {
                        if (index == 0) {
                            categoryCustm = {};
                            if ($scope.editableGridOptions.seqId) {
                                $scope.editableGridOptions.seqId(function (result) {
                                    if (result !== undefined && result !== null) {
                                        for (var key in result) {
                                            if (result.hasOwnProperty(key)) {
                                                categoryCustm[key] = result[key];
                                            }
                                        }
                                        if ($scope.editableGridOptions.featureName == 'Rough Parcel') {
                                            var item = {isEditGridFlag: false, beforeLabel: currentYear + "-", isLinked: false};
                                        } else {
                                            var item = {isEditGridFlag: false, beforeLabel: currentYear + "-"};
                                        }
                                        item['categoryCustom'] = categoryCustm;
                                        $scope.editableGridOptions.datarows.splice(0, 0, item);
                                        $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});

                                    } else {
                                        if ($scope.editableGridOptions.featureName == 'Rough Parcel') {
                                            $scope.editableGridOptions.datarows.splice(0, 0, {isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-", isLinked: false});
                                            $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
                                        } else {
                                            $scope.editableGridOptions.datarows.splice(0, 0, {isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                                            $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
                                        }
                                    }

                                });
                            } else {
                                if ($scope.editableGridOptions.featureName == 'Rough Parcel') {
                                    $scope.editableGridOptions.datarows.splice(0, 0, {isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-", isLinked: false});
                                    $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
                                } else {
                                    $scope.editableGridOptions.datarows.splice(0, 0, {isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                                    $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
                                }
                            }
                        }

                    };

                    $scope.clearModelValues = function (resetRecord) {
                        angular.forEach(resetRecord.categoryCustom, function (val, key) {
                            if (key.split('$').length > 0) {
                                var type = key.split('$');
                                if (type[1] == 'UMS' || type[1] == 'MS') {
                                    $('#' + type[0]).select2("data", []);
                                }
                            }
                        });
                    };

                    $scope.cancelRowEdit = function (resetRecord, index) {
                        if (resetRecord.value === null || resetRecord.value === undefined) {
                            $scope.clearModelValues(resetRecord);
                            categoryCustm = {};
                            if ($scope.editableGridOptions.seqId) {
                                $scope.editableGridOptions.seqId(function (result) {
                                    if (result !== undefined && result !== null) {
                                        for (var key in result) {
                                            if (result.hasOwnProperty(key)) {
                                                categoryCustm[key] = result[key];
                                            }
                                        }
                                        var item = {isEditGridFlag: false, beforeLabel: currentYear + "-"};
                                        item['categoryCustom'] = angular.copy(categoryCustm);
                                        $scope.editableGridOptions.datarows[index] = angular.copy(item);
                                    } else {
                                        $scope.editableGridOptions.datarows[index] = angular.copy({isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                                    }
                                    formObj = undefined;
                                    $scope.removeRow(index, true);
                                });
                            } else {
                                $scope.editableGridOptions.datarows[index] = angular.copy({isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                                formObj = undefined;
                                $scope.removeRow(index, true);
                            }

                        } else {
                            $scope.clearModelValues(resetRecord);
                            angular.forEach(oldRecord.categoryCustom, function (val, key) {
                                if (key.split('$').length > 0) {
                                    var type = key.split('$');
                                    if (type[1] == 'UMS' || type[1] == 'MS') {
                                        $('#' + type[0]).select2("val", val.split(','));
                                    }
                                }
                            });
                            $scope.editableGridOptions.datarows[index] = tempQueue[0];
                            $scope.editableGridOptions.datarows[index].isEditGridFlag = false;
                            $scope.editableGridOptions.datarows[index].beforeLabel = currentYear + "-";
                            setRowIndexInEditMode(null);
                            $scope.removeRow(index, true);
                        }
                        if (tempQueue.length == 1) {
                            tempQueue.splice(0, 1);
                        } else {
                            tempQueue.splice(0, 1);
                        }
                        $scope.searchEditFlag = true;
                    };

                    $scope.showConfirmationPopup = function () {
                        $("#" + $scope.editableGridOptions.cancelModalId).modal("show");
                    };

                    $scope.saveChanges = function () {
                        if (oldUnSavedObj !== null && oldUnSavedObj !== undefined) {
                            $scope.createOrUpdateRecord($scope.editableGridOptions.datarows[oldUnSavedObj.rowIndex], oldUnSavedObj.rowIndex, oldUnSavedObj.formObj, oldUnSavedObj.dbType);
                            if (oldUnSavedObj.formObj.$valid === true) {
                                formObj = undefined;
                                oldUnSavedObj = {};
                                $scope.editableGridOptions.datarows[$scope.currentIndex].isEditGridFlag = true;
                                setRowIndexInEditMode($scope.currentIndex);
                            }
                            $("#" + $scope.editableGridOptions.cancelModalId).modal("hide");
                        }
                    };

                    $scope.cancelChanges = function () {
                        if (oldUnSavedObj !== null && oldUnSavedObj !== undefined) {
                            $scope.cancelRowEdit(oldUnSavedObj.tempRecord, oldUnSavedObj.rowIndex);
                            formObj = undefined;
                            oldUnSavedObj = {};
                            $scope.editableGridOptions.datarows[$scope.currentIndex].isEditGridFlag = true;
                            $scope.editableGridOptions.datarows[$scope.currentIndex].beforeLabel = currentYear + "-";
                            setRowIndexInEditMode($scope.currentIndex);
                            $("#" + $scope.editableGridOptions.cancelModalId).modal("hide");
                        }
                    };

                    $scope.delinkEntity = function (datarow) {
                        if (datarow != null) {
                            $scope.editableGridOptions.linkEntity(datarow, function (result) {
                                console.log("succes");
                            });
                        }
                    };



                    /**
                     * This function will provide access to current selected rows in directive by user
                     * @returns {Array|editablecustomgrid.directive_L44.selectedTableRows}
                     */
                    $scope.editableGridOptions.getSelectedTableRows = function () {
                        return selectedTableRows;
                    };
//                    $scope.changeSorting = function (data, column) {
//                        $scope.reverse = !$scope.reverse;
//                        $scope.editableGridOptions.labelrows = orderBy($scope.editableGridOptions.labelrowsFromDb, 'categoryCustom.' + column.model, $scope.reverse);
//                        $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
//                        $scope.sortBy = column.label;
//                    };

                    $scope.filterData = function (searchText) {
                        if (searchText !== undefined && searchText !== null && searchText.length > 0) {
                            $scope.editableGridOptions.labelrows = $filter('filter')($scope.editableGridOptions.labelrowsFromDb, {categoryCustom: searchText});
                            $scope.editableGridOptions.labelrows.splice(0, 0, {isEditGridFlag: false});
                            for (var i = $scope.editableGridOptions.datarows.length - 1; i > 0; i--) {
                                var found = false;
                                for (var j = $scope.editableGridOptions.labelrows.length - 1; j > 0; j--) {
                                    if ($scope.editableGridOptions.labelrows[j].value === $scope.editableGridOptions.datarows[i].value) {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    $scope.editableGridOptions.datarows.splice(i, 1);
                                }
                            }
                        } else {
                            $scope.editableGridOptions.labelrows = [];
                            $scope.editableGridOptions.datarows = [];
                            $scope.editableGridOptions.labelrows.push({isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                            angular.forEach($scope.editableGridOptions.labelrowsFromDb, function (val) {
                                $scope.editableGridOptions.labelrows.push(angular.copy(val));
                            });
                            $scope.editableGridOptions.datarows.push({isEditGridFlag: false, categoryCustom: {}, beforeLabel: currentYear + "-"});
                            angular.forEach($scope.editableGridOptions.datarowsFromDb, function (val) {
                                $scope.editableGridOptions.datarows.push(angular.copy(val));
                            });
                        }
                    };
                    var setRowIndexInEditMode = function (index) {
                        rowIndexEditMode = index;
                        if (($scope.editableGridOptions.datarows.length - 1) === index) {
                            if ($scope.editableGridOptions.newRowAdded) {
                                $scope.editableGridOptions.newRowAdded();
                            }
                        }
                    };
                    $scope.editableGridOptions.getRowIndexInEditMode = function () {
                        return rowIndexEditMode;
                    };
                    /**
                     * TODO : In future we will add select all and deselect all rows facility
                     *  by single click of column th of ok icon, but need to consider that any rows should not be in
                     *  edit mode at a time
                     */

                    $scope.$watch("editableGridOptions.datarows", function () {
                        if ($scope.currentIndex >= 0) {
                            $scope.removeRow($scope.currentIndex, true);
                            tempQueue = [];
                            oldUnSavedObj = {};
                        }
                    });
                    var i = 0;
                    $scope.isBusy = false;
                    $scope.loadPaginatedData = function () {
                        if (i !== 0) {
                            console.log("load paginated data");
                            if ($scope.editableGridOptions != undefined && $scope.editableGridOptions.datarows.length <= 1000) {
                                $scope.isBusy = true;
                                $scope.editableGridOptions.retrievePaginatedRecord();
                                window.setTimeout(function () {
                                    $scope.isBusy = false;
                                }, 100);

                            } else {
                                var msg = "We cannot load more data.Please use search options to get the data.";
                                var type = $rootScope.error;
                                $rootScope.addMessage(msg, type);
                            }
                        }
                        i++;

                    }
                }];
            return {
                restrict: 'E',
                link: link,
                templateUrl: 'scripts/directives/customgrid/customgrid.html',
                controller: controller,
                scope: {
                    editableGridOptions: '=',
                    featureName: '@',
                    entityType: '@'
                }
            };
        }]);
});