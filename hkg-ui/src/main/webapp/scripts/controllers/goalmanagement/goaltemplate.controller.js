/* 
 * Author: Raj Kantaria
 * Controller file for manage goal template feature
 */
define(['hkg', 'ruleService', 'goalService', 'messageService', 'customFieldService', "activityFlowService", 'addMasterValue', 'ruleField', 'dynamicForm', 'jqueryAtWho', 'jqueryCaret'], function(hkg) {
    hkg.register.controller('GoalTemplateController', ["$rootScope", "$scope", "RuleService", "GoalService", "$location", "DynamicFormService", "Messaging", "CustomFieldService", "ActivityFlowService", function($rootScope, $scope, RuleService, GoalService, $location, DynamicFormService, Messaging, CustomFieldService, ActivityFlowService) {
            $rootScope.maskLoading();
            $scope.$on("$locationChangeStart", function(e, currentLocation, previousLocation) {
                // Do whatever you need to do.
                var el = document.createElement('a');
                el.href = currentLocation;
                if (el.hash === "#/managegoal") {
                    $rootScope.clearGoalData = false;
                }
            });
            $rootScope.mainMenu = "manageLink";
            $rootScope.childMenu = "manageGoals";
            $rootScope.activateMenu();
            $scope.submitted = false;
            $scope.dbType = {};
            var lastRuleId = 0;
            $scope.entity = "GOALTEMPLATE.";
            $scope.ruleObject = {};
            $scope.selectedRule = null;
            $scope.allRules = [];
            $scope.flag = false;
            $scope.goalTemplateForm = {};
            $scope.listOfModelsOfDateType = [];
            $scope.dynamicGoalData = DynamicFormService.resetSection($scope.generalGoalTemplate);
            var templateData = DynamicFormService.retrieveSectionWiseCustomFieldInfo("manageGoals");
            templateData.then(function(section) {
                $scope.generalGoalTemplate = section['genralSection'];
                if ($scope.generalGoalTemplate !== null && $scope.generalGoalTemplate !== undefined)
                {
                    angular.forEach($scope.generalGoalTemplate, function(updateTemplate)
                    {
                        if (updateTemplate.type !== null && updateTemplate.type !== undefined && updateTemplate.type === 'date')
                        {
                            $scope.listOfModelsOfDateType.push(updateTemplate.model);
                        }
                    })
                }
            }, function(reason) {
                console.log('Failed: ' + reason);
            }, function(update) {
                console.log('Got notification: ' + update);
            });
            $rootScope.clearGoalData = true;
            GoalService.retrieveGoalTemplateModifiers(function(res) {
                if (!!res) {
                    res = JSON.parse(angular.toJson(res));
                    $scope.varList = [];
                    angular.forEach(res, function(value, key) {
                        $scope.varList.push(value);
                    });
                    $("#valgoalachievedvalue").atwho({
                        at: "$",
                        data: angular.copy($scope.varList)
                    });
                    $("#valgoalnotachievedvalue").atwho({
                        at: "$",
                        data: angular.copy($scope.varList)
                    });
                }
            });
            $scope.applyList = ["All", "Any"];
            $scope.displaySearchedGoalTemplate = 'view';
            var operatorMap = {"Number": "Numeric",
                "Text field": "String",
                "Text area": "String",
                "Dropdown": "String",
                "Radio button": "String",
                "Date": "Date",
                "Datepicker": "Date",
                "Date range": "Date range",
                "Time": "Date",
                "Time range": "Date range",
                "Password": "String",
                "Currency": "Numeric",
                "Decimal": "Numeric",
                "Email": "String",
                "Phone": "String",
                "Checkbox": "Boolean",
                "Percent": "Numeric",
                "Formula": "Numeric",
                "Pointer": "Numeric",
                "AutoGenerated": "Boolean",
                "MultiSelect": "String",
                "UserMultiSelect": "String",
                "Angle": "Numeric",
                "Image": "Image",
                "Upload": "Image"
            };
            $scope.fieldListForSer = [{"id": -1,
                    "label": "Status",
                    "oldLabelName": "Status",
                    "type": "Dropdown",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "Long"},
                {"id": -2,
                    "label": "No. of occurance",
                    "oldLabelName": "No. of occurance",
                    "type": "Number",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "Number"},
                {"id": -3,
                    "label": "Time",
                    "oldLabelName": "Time",
                    "type": "Decimal",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"},
                {"id": -4,
                    "label": "Name",
                    "oldLabelName": "Name",
                    "type": "Dropdown",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"}];
            $scope.fieldListForAct = [{"id": -2,
                    "label": "No. of occurance",
                    "oldLabelName": "No. of occurance",
                    "type": "Number",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "Number"},
                {"id": -3,
                    "label": "Time",
                    "oldLabelName": "Time",
                    "type": "Decimal",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"},
                {"id": -4,
                    "label": "Name",
                    "oldLabelName": "Name",
                    "type": "Dropdown",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"}];
            $scope.ruleList = [];
            $scope.valArray = [];

            $scope.initData = function() {
                if ($rootScope.goalTemplatePayload === null) {
                    $location.path("/managegoal");
                    $rootScope.addMessage("Failed to retrive goal template informations", 1);
                }

                $scope.periodList = [];
                for (index = 1; index <= 31; index++) {
                    $scope.periodList.push({id: index, text: index});
                }
                RuleService.retrievePrerequisite(function(res) {
                    $scope.entityList = res.entity;
                    if (!!!$scope.entityList) {
                        $scope.entityList = {};
                    }

                    ActivityFlowService.retrievePrerequisite(function(res) {
                        var flag = false;
                        if (!!res && !!res.activityflowbycompany && res.activityflowbycompany.length > 0 && !!res.activityflowbycompany[0].custom2) {
                            for (var index = 0; index < res.activityflowbycompany[0].custom2.length; index++) {
                                if (res.activityflowbycompany[0].custom2[index].description === "A") {
                                    flag = true;
                                    $scope.version = res.activityflowbycompany[0].custom2[index].value;
                                    break;
                                }
                            }
                            if (flag) {
                                $scope.entityList["-1"] = "Current Activity";
                                $scope.entityList["-2"] = "Next Activity";
                                $scope.entityList["-3"] = "Previous Activity";
                                $scope.entityList["-4"] = "Current Service";
                                $scope.entityList["-5"] = "Next Service";
                                $scope.entityList["-6"] = "Previous Service";
                            }
                        }
                    });
                    $scope.operators = res.operator;
                });

                $scope.goalTemplateList = [];
                GoalService.retrieveAllGoalTemplates(function(data) {
                    if (!!data) {
                        angular.forEach(data, function(item) {
                            $scope.goalTemplateList.push(item);
                        });
                    }
                }, function() {
                    console.log("Failed to retrieve all templates");
                });
                var rule = initializeRule();
                $scope.ruleList.push(rule);
                if (!!$rootScope.goalTemplatePayload) {
                    if (!!$rootScope.goalTemplatePayload.editGoalTemplateId) {
                        $rootScope.maskLoading();
                        GoalService.retrieveGoalTemplateById($rootScope.goalTemplatePayload.editGoalTemplateId, function(data) {
                            if (!!data) {
                                $scope.goalTemplate = {};
                                $scope.dynamicGoalData = {};
                                $scope.goalTemplate.id = data.id;
                                $scope.goalTemplate.status = data.status;
                                $scope.goalTemplate.name = data.name;
                                $scope.goalTemplate.description = data.description;
                                $scope.goalTemplate.period = data.period;
                                $scope.goalTemplate.type = data.type;
                                if (!!data.ruleList) {
                                    $scope.allRules = data.ruleList.rules;
                                    $scope.goalTemplate.apply = data.ruleList.rules[0].apply;
                                }
                                $scope.goalTemplate.isGenVal = data.isGenVal;
                                $scope.goalTemplate.genvaltype = data.genvaltype;
                                $scope.goalTemplate.genvalvalue = data.genvalvalue;
                                $scope.goalTemplate.isValGoalAchieved = data.isValGoalAchieved;
                                $scope.goalTemplate.valgoalachievedtype = data.valgoalachievedtype;
                                $scope.goalTemplate.valgoalachievedvalue = data.valgoalachievedvalue;
                                $scope.goalTemplate.isValGoalNotAchieved = data.isValGoalNotAchieved;
                                $scope.goalTemplate.valgoalnotachievedtype = data.valgoalnotachievedtype;
                                $scope.goalTemplate.valgoalnotachievedvalue = data.valgoalnotachievedvalue;
                                $scope.dynamicGoalData = data.goalCustom;
                                if (!!$scope.dynamicGoalData) {
                                    angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                                    {
                                        if ($scope.dynamicGoalData.hasOwnProperty(listOfModel))
                                        {
                                            if ($scope.dynamicGoalData[listOfModel] !== null && $scope.dynamicGoalData[listOfModel] !== undefined)
                                            {
                                                $scope.dynamicGoalData[listOfModel] = new Date($scope.dynamicGoalData[listOfModel]);
                                            } else
                                            {
                                                $scope.dynamicGoalData[listOfModel] = '';
                                            }
                                        }
                                    })
                                }
                                if (!!data.ruleList)
                                    setRuleObject(data.ruleList.rules[data.ruleList.rules.length - 1]);

                                GoalService.retrieveGoalTemplateModifiers(function(res) {
                                    if (!!res) {
                                        res = JSON.parse(angular.toJson(res));
                                        $scope.varList = [];
                                        angular.forEach(res, function(value, key) {
                                            $scope.varList.push(value);
                                        });
                                        $("#valgoalachievedvalue").atwho({
                                            at: "$",
                                            data: angular.copy($scope.varList)
                                        });
                                        $("#valgoalnotachievedvalue").atwho({
                                            at: "$",
                                            data: angular.copy($scope.varList)
                                        });
                                    }
                                });
                            }
                            $rootScope.unMaskLoading();
                        }, function() {
                            console.log("Failed..");
                            $rootScope.unMaskLoading();
                        });
                    } else {
                        $scope.goalTemplate = {};
                        $scope.goalTemplate.apply = $scope.applyList[0];
                        if ($rootScope.goalTemplatePayload.type === "1") {
                            $scope.goalTemplate.type = "N";
                        } else if ($rootScope.goalTemplatePayload.type === "2" || $rootScope.goalTemplatePayload.type === "3") {
                            $scope.goalTemplate.type = "B";
                        }
                    }

//                    if ($rootScope.goalTemplatePayload.type === '1') {
//
//                    }
                }
            };
            var initializeRule = function() {
                var rule = {};
                rule.entity = "";
                rule.field = "";
                rule.operator = "";
                rule.options = null;
                rule.operatorList = [];
                rule.fieldList = [];
                rule.rowsubmitted = false;
                rule.hint = "Enter value";
                rule.values = [];
                return rule;
            };

            $scope.onEntityChange = function(index) {
                if ($scope.ruleList[index].entity !== null) {
                    $scope.ruleList[index].field = {};
                    $scope.ruleList[index].operatorList = [];
                    var id = $scope.ruleList[index].entity;
                    $scope.ruleList[index].showtemplate = false;
                    $scope.ruleList[index].values = [];
                    $scope.ruleList[index].rowsubmitted = false;
                    if (parseInt(id) > 0) {
                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + id + "}", function(res) {
                            $scope.ruleList[index].fieldList = res;
                        });
                    } else {
                        if (parseInt(id) >= -3 && parseInt(id) <= -1) {
                            $scope.ruleList[index].fieldList = $scope.fieldListForAct;
                        } else {
                            $scope.ruleList[index].fieldList = $scope.fieldListForSer;
                        }

                    }
                }
            };

            $scope.onFieldChange = function(index) {
                if ($scope.ruleList[index].field !== null) {
                    $scope.ruleList[index].operator = {};
                    var componentType = $scope.ruleList[index].field.type;

                    $scope.ruleList[index].operatorList = [];
                    var pointerId;
                    if (componentType === 'Pointer') {
                        var pointerComponentType;
                        var validationPattern = $scope.ruleList[index].field.validationPattern.replace("{", "")
                                .replace("}", "");
                        var validationsArr = [];
                        var pointerArray = [];

                        validationsArr = validationPattern.split(",");
                        angular.forEach(validationsArr, function(validate)
                        {
                            if (validate.indexOf("\"pointer\":") > -1) {
                                pointerArray = validate.split(":");
                                pointerId = pointerArray[1].replace(/["']/g, "");
                                $scope.ruleList[index].field.pointerId = pointerId;
                            }
                        });
                        angular.forEach($scope.ruleList[index].fieldList, function(fieldList)
                        {
                            if (fieldList.id.toString() === pointerId.toString())
                            {
                                pointerComponentType = fieldList.type;
                                $scope.ruleList[index].field.pointertype = pointerComponentType;

                            }
                        });
                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap[pointerComponentType]];

                    }
                    else
                    if (componentType === 'SubEntity')
                    {

                        $scope.ruleList[index].field.subEntityType = "Dropdown";

                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap["Dropdown"]];
                        RuleService.retrieveDropListForSubEntity($scope.ruleList[index].field.id, function(res) {
                            $scope.ruleList[index].options = res;
                            // I have taken index 0 because everyindex will have same component type
                            $scope.ruleList[index].field.subentityDropListType = res[0].description;
                        });


                    }

                    else {
                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap[$scope.ruleList[index].field.type]];
                    }
                    if (componentType === "Dropdown" || componentType === "Radio button" || componentType === "MultiSelect") {

                        if (parseInt($scope.ruleList[index].entity) <= -1 && parseInt($scope.ruleList[index].entity) >= -3 && parseInt($scope.ruleList[index].field.id) !== -1) {
                            RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                                $scope.ruleList[index].options = res;
                            });
                        } else if (parseInt($scope.ruleList[index].entity) <= -4 && parseInt($scope.ruleList[index].entity) >= -6 && parseInt($scope.ruleList[index].field.id) !== -1) {
                            RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                                $scope.ruleList[index].options = res;
                            });
                        } else {
                            // For Lot status the dropdown should not be populated from here
                            if ($scope.ruleList[index].field.dbFieldName === 'lot_status' || $scope.ruleList[index].field.dbFieldName === 'packet_status'
                                    || $scope.ruleList[index].field.dbFieldName === 'status_of_plan' || $scope.ruleList[index].field.dbFieldName === 'parcel_status' || $scope.ruleList[index].field.dbFieldName === 'invoice_status'
                                    || $scope.ruleList[index].field.dbFieldName === 'issue_status' || $scope.ruleList[index].field.dbFieldName === 'type_of_plan')
                            {
                                var dbFieldName = $scope.ruleList[index].field.dbFieldName;

                                RuleService.retrieveLotStatus(dbFieldName, function(res) {
                                    $scope.ruleList[index].options = res;
                                });

                            }
                            else
                            {
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + $scope.ruleList[index].field.id + "}", function(res) {
                                    $scope.ruleList[index].options = res;

                                });
                            }
                        }
                    } else if (componentType === "Checkbox") {
                        $scope.ruleList[index].options = [{label: 'True', value: true}, {label: 'False', value: false}];
                    }
                    else if (componentType === "Pointer")
                    {
                        RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                            $scope.ruleList[index].options = res;
                        });
                    }

                    $scope.ruleList[index].showtemplate = false;
                    $scope.ruleList[index].values = [];
                    $scope.ruleList[index].rowsubmitted = false;
                }
            };
            $scope.onOperatorChange = function(index) {
                $scope.ruleList[index].showtemplate = false;
                $scope.ruleList[index].rowsubmitted = false;
                $scope.ruleList[index].values = [];
                var operator = $scope.ruleList[index].operator;
                if (!!operator) {
                    if (operator.label === "contains" || operator.label === "has no value" || operator.label === "has any value") {
                        $scope.ruleList[index].hint = "Enter comma separated list";
                    }

                    $scope.ruleList[index].showtemplate = true;
                    angular.forEach($scope.ruleList, function(item) {
                        var validationPattern = item.field.validationPattern;
                        var isEmployee = false;
                        var isDepartment = false;
                        var isDesignation = false;
                        var validationsArr = validationPattern.replace("{", "")
                                .replace("}", "")
                                .split(",");
                        angular.forEach(validationsArr, function(valArr)
                        {
                            if (valArr.indexOf("\"isEmployee\":") > -1)
                            {
                                isEmployee = true;
                            }
                            if (valArr.indexOf("\"isDepartment\":") > -1)
                            {
                                isDepartment = true;
                            }
                            if (valArr.indexOf("\"isDesignation\":") > -1)
                            {
                                isDesignation = true;
                            }
                        });
// For multiselect component Multiple i.e. IN query
                        item.multiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
//                                            


                            }
                        };
                        // For multiselect component Single i.e. EQUALS OR NOT EQUAL query
                        item.multiselectSingleComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
//                                            


                            }
                        };
                        // For dropdown component Multiple i.e. IN query
                        item.dropdownMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For dropdown component SINGLE i.e. EQUAL query
                        item.dropdownSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };
                        // For SubEntity component Multiple i.e. IN query
                        item.subEntityMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For SubENtity component SINGLE i.e. EQUAL query
                        item.subEntitySingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For dropdown pointer component Multiple i.e. IN query
                        item.pointerMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For pointer dropdown component SINGLE i.e. EQUAL query
                        item.pointerSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For USerMultiSelect on operator change for multiple select 
                        item.userMultiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);

                                } else {
                                    query.callback({
                                        results: $scope.names
                                    });
                                }
                            }};
                        // For USerMultiSelect on operator change for Single select 

                        item.userSingleselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                callback(data);
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);

                                }
                                else {
//                                    query.callback({
//                                        results: $scope.names
//                                    });
                                }
                            }};

                    });
                    $scope.ruleList[index].showtemplate = true;
                    //
                } else {
                    $scope.ruleList[index].showtemplate = false;
                }
            };
            $scope.onOperatorClick = function(index) {
                $scope.ruleList[index].showtemplate = false;
                $scope.ruleList[index].rowsubmitted = false;
            };
            $scope.addRule = function(form, index) {
                $scope.ruleList[index].rowsubmitted = true;
                if (form.$valid) {
                    var flag = true;
                    var length = $scope.ruleList[index].operator.shortcutCode;
                    for (var i = 0; i < length; i++) {
                        var val = $scope.ruleList[index].values[i];

                        if ($scope.ruleList[index].operator.label !== 'has no value' && $scope.ruleList[index].operator.label !== 'has any value')
                        {
                            if ($scope.ruleList[index].field.type === "MultiSelect")
                            {
                                var valueOfMultiSelect = $scope.ruleList[index].values;
                                flag = (flag && true);
                            } else {
                                if (val !== null && val !== undefined) {
                                    flag = (flag && true);
                                } else {
                                    flag = false;
                                }
                            }
                        } else
                        {
                            flag = (flag && true);
                        }
                    }
                    if (flag) {
                        var rule = initializeRule();
                        $scope.ruleList.push(rule);
                    }
                }
            };
            $scope.remove = function(index) {
                $scope.ruleList.splice(index, 1);
                if ($scope.ruleList.length === 0) {
                    var rule = initializeRule();
                    $scope.ruleList.push(rule);
                    $scope.ruleList[index].rowsubmitted = false;
                }
            };

            $scope.save = function(form) {
                $scope.ruleSubmitted = true;
                var rules = [];
                var length = $scope.ruleList.length;
                for (var i = 0; i < length; i++) {
                    $scope.ruleList[i].rowsubmitted = true;
                    var tmprule = {};
                    tmprule = angular.copy($scope.ruleList[i]);
                    var rule = {};
                    rule.id = i;
                    rule.entity = tmprule.entity;
                    rule.field = tmprule.field.id;
                    rule.operator = tmprule.operator.label;
                    rule.fieldType = tmprule.field.type;

                    // For non pointer components
                    if (rule.fieldType !== "Pointer" && rule.fieldType !== "SubEntity") {
                        if (rule.fieldType !== "Date range" && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {
                            if (rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                rule.value = tmprule.values[0] + "," + tmprule.values[1];
                            }
                            else
                            {
                                if (tmprule.operator.label !== "has any value from")
                                {
                                    if (tmprule.values.toString().indexOf(',') > -1)
                                    {
                                        tmprule.values.toString().replace(/,/g, '');
                                    }

                                }
                                rule.value = tmprule.values;
                            }


                            if (tmprule.values.length > 1 && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                            }
                        }
                    }
                    else if (rule.fieldType === "SubEntity")
                    {
                        if (tmprule.field.subentityDropListType === "Date ") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {


                            if (tmprule.operator.label !== "has any value from")
                            {
                                if (tmprule.values.toString().indexOf(',') > -1)
                                {
                                    tmprule.values.toString().replace(/,/g, '');
                                }

                            }
                            rule.value = tmprule.values;
                        }
                        if (tmprule.values.length > 1 && tmprule.field.subentityDropListType === "Date ") {
                            rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                        }
                    }
                    else
                    {
                        if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {
                            if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                rule.value = tmprule.values[0] + "," + tmprule.values[1];
                            }
                            else
                            {
                                if (tmprule.operator.label !== "has any value from")
                                {
                                    if (tmprule.values.toString().indexOf(',') > -1)
                                    {
                                        tmprule.values.toString().replace(/,/g, '');
                                    }

                                }
                                rule.value = tmprule.values;
                            }


                            if (tmprule.values.length > 1 && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                            }

                        }
                    }

                    rules.push(rule);
                }
                if (form.$valid) {
                    $scope.ruleObject.criterias = angular.copy(rules);
                    $scope.ruleObject.isArchive = !$scope.ruleObject.isActive;
                    if ($scope.selectedRule === null || $scope.selectedRule.id === undefined || $scope.selectedRule.id === null) {
                        if ($scope.ruleObject.id === null) {
                            lastRuleId++;
                            $scope.ruleObject.id = lastRuleId;
                        }
                        if (!!!$scope.allRules) {
                            $scope.allRules = [];
                        }
                        $scope.allRules.push($scope.ruleObject);
                        $scope.selectedRule = $scope.ruleObject;
                    }
                    else {

                        var index = 0;
                        $.grep($scope.allRules, function(e, i) {
                            if (e.id === $scope.ruleObject.id) {
                                index = i;
                                return true;
                            }
                        });
                        $scope.allRules[index].ruleName = angular.copy($scope.ruleObject.ruleName);
                        $scope.allRules[index].remarks = angular.copy($scope.ruleObject.remarks);
                        $scope.allRules[index].apply = angular.copy($scope.ruleObject.apply);
                        $scope.allRules[index].criterias = angular.copy($scope.ruleObject.criterias);
                        $scope.allRules[index].isActive = angular.copy($scope.ruleObject.isActive);
                        $scope.allRules[index].isArchive = angular.copy($scope.ruleObject.isArchive);

                        if ($scope.isEditRule) {
                            $scope.reset(form);
                        }
                    }
                    $scope.ruleSubmitted = false;
                }
            };
            $scope.saveAndSubmit = function(form) {
                $scope.submitted = true;
                $scope.save(form);
                if (form.$valid && $scope.allRules.length > 0) {
                    var ruleset = {};
                    ruleset.rules = $scope.allRules;
                    ruleset.rules[0].apply = $scope.goalTemplate.apply;
                    var for_service = "";
                    var for_designation = "";
                    var for_department = "";
                    if ($rootScope.goalTemplatePayload.type == 1) {
                        for_service = $rootScope.goalTemplatePayload.service;
                    }
                    if ($rootScope.goalTemplatePayload.type == 2) {
                        for_designation = $rootScope.goalTemplatePayload.designation;
                    }
                    if ($rootScope.goalTemplatePayload.type == 3) {
                        for_department = $rootScope.goalTemplatePayload.selectedDepartment.id;
                    }
                    var goalTemplate = {
                        id: $scope.goalTemplate.id,
                        status: $scope.goalTemplate.status,
                        name: $scope.goalTemplate.name,
                        description: $scope.goalTemplate.description,
                        period: $scope.goalTemplate.period,
                        type: $scope.goalTemplate.type,
                        ruleList: ruleset,
                        isGenVal: $scope.goalTemplate.isGenVal,
                        genvaltype: $scope.goalTemplate.genvaltype,
                        genvalvalue: $scope.goalTemplate.genvalvalue,
                        isValGoalAchieved: $scope.goalTemplate.isValGoalAchieved,
                        valgoalachievedtype: $scope.goalTemplate.valgoalachievedtype,
                        valgoalachievedvalue: $scope.goalTemplate.valgoalachievedvalue,
                        isValGoalNotAchieved: $scope.goalTemplate.isValGoalNotAchieved,
                        valgoalnotachievedtype: $scope.goalTemplate.valgoalnotachievedtype,
                        valgoalnotachievedvalue: $scope.goalTemplate.valgoalnotachievedvalue,
                        for_service: parseInt(for_service),
                        for_designation: parseInt(for_designation),
                        for_department: parseInt(for_department)
                    };
                    if (!!$scope.goalTemplate.copyOf) {
                        goalTemplate.copyOf = $scope.goalTemplate.copyOf.id;
                    }
                    goalTemplate.goalCustom = $scope.dynamicGoalData;
                    goalTemplate.dbType = $scope.dbType;
                    GoalService.saveGoalTemplate(goalTemplate, function(res) {
                        var vals = [];
                        if ($rootScope.goalTemplatePayload.goalTemplatesSelected === null) {
                            $rootScope.goalTemplatePayload.goalTemplatesSelected = [];
                        } else {
                            vals = $rootScope.goalTemplatePayload.goalTemplatesSelected.split(",");
                        }
                        if (!!$rootScope.goalTemplatePayload.editGoalTemplateId) {
                            var index = vals.indexOf($rootScope.goalTemplatePayload.editGoalTemplateId.toString());
                            if (index > -1) {
                                vals.splice(index, 1);
                            }
                        }
                        if (!!res) {
                            vals.push(parseInt(res.id));
                        }
                        $rootScope.goalTemplatePayload.goalTemplatesSelected = vals.toString();
                        $('#scrollable-dropdown-menu.typeahead').typeahead('val', '');
                        $scope.goalTemplate = {};
                        $scope.dynamicGoalData = {};
                        $location.path("/managegoal");
                    }, function() {
                        console.log("failure");
                    });
                    $scope.allRules = [];
                } else {
                    return;
                }
            };

            $scope.cancelNewTemplate = function() {
                $location.path("/managegoal");
            };

            $scope.loadDataOfCopy = function() {
                if (!!$scope.goalTemplate.copyOf) {
                    GoalService.retrieveGoalTemplateById($scope.goalTemplate.copyOf, function(data) {

                        $scope.goalTemplate.name = data.name;
                        $scope.goalTemplate.description = data.description;
                        $scope.goalTemplate.period = data.period;
                        $scope.goalTemplate.type = data.type;
                        if (!!data.ruleList) {
                            $scope.allRules = data.ruleList.rules;
                            $scope.goalTemplate.apply = data.ruleList.rules[0].apply;
                        }
                        $scope.goalTemplate.isGenVal = data.isGenVal;
                        $scope.goalTemplate.genvaltype = data.genvaltype;
                        $scope.goalTemplate.genvalvalue = data.genvalvalue;
                        $scope.goalTemplate.isValGoalAchieved = data.isValGoalAchieved;
                        $scope.goalTemplate.valgoalachievedtype = data.valgoalachievedtype;
                        $scope.goalTemplate.valgoalachievedvalue = data.valgoalachievedvalue;
                        $scope.goalTemplate.isValGoalNotAchieved = data.isValGoalNotAchieved;
                        $scope.goalTemplate.valgoalnotachievedtype = data.valgoalnotachievedtype;
                        $scope.goalTemplate.valgoalnotachievedvalue = data.valgoalnotachievedvalue;
                        $scope.dynamicGoalData = data.goalCustom;
                        if (!!$scope.dynamicGoalData) {
                            angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                            {
                                if ($scope.dynamicGoalData.hasOwnProperty(listOfModel))
                                {
                                    if ($scope.dynamicGoalData[listOfModel] !== null && $scope.dynamicGoalData[listOfModel] !== undefined)
                                    {
                                        $scope.dynamicGoalData[listOfModel] = new Date($scope.dynamicGoalData[listOfModel]);
                                    } else
                                    {
                                        $scope.dynamicGoalData[listOfModel] = '';
                                    }
                                }
                            })
                        }
                    }, function() {
                        console.log("Failed to retrieve data");
                    });
                }
            };
            $scope.onRuleChange = function() {
                console.log("$scope.goalTemplate.copyOf :" + $scope.goalTemplate.copyOf);
                if ($scope.goalTemplate.copyOf === undefined || $scope.goalTemplate.copyOf === null) {
                    $scope.ruleList = [];
                    $scope.initData();
//                    $scope.goalTemplate = {};
//                    $scope.dynamicGoalData = {};
//                    $scope.ruleList = [];
//                    $scope.allRules = [];
//                    $scope.goalTemplate.type = 'N';
                } else {

                    var data = $scope.goalTemplateList[$scope.goalTemplateList.indexOf($scope.goalTemplate.copyOf)];
                    if (!!!$scope.goalTemplate.name)
                        $scope.goalTemplate.name = "copy of " + data.name;
                    if (!!!$scope.goalTemplate.name)
                        $scope.goalTemplate.description = data.description;
                    $scope.goalTemplate.period = data.period;
                    console.log("tyep :" + data.type);
                    $scope.goalTemplate.type = data.type;
                    if (!!data.ruleList) {
                        $scope.allRules = data.ruleList.rules;
                        $scope.goalTemplate.apply = data.ruleList.rules[0].apply;
                    }
                    $scope.goalTemplate.isGenVal = data.isGenVal;
                    $scope.goalTemplate.genvaltype = data.genvaltype;
                    $scope.goalTemplate.genvalvalue = data.genvalvalue;
                    $scope.goalTemplate.isValGoalAchieved = data.isValGoalAchieved;
                    $scope.goalTemplate.valgoalachievedtype = data.valgoalachievedtype;
                    $scope.goalTemplate.valgoalachievedvalue = data.valgoalachievedvalue;
                    $scope.goalTemplate.isValGoalNotAchieved = data.isValGoalNotAchieved;
                    $scope.goalTemplate.valgoalnotachievedtype = data.valgoalnotachievedtype;
                    $scope.goalTemplate.valgoalnotachievedvalue = data.valgoalnotachievedvalue;
                    $scope.dynamicGoalData = data.goalCustom;
                    if (!!$scope.dynamicGoalData) {
                        angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                        {
                            if ($scope.dynamicGoalData.hasOwnProperty(listOfModel))
                            {
                                if ($scope.dynamicGoalData[listOfModel] !== null && $scope.dynamicGoalData[listOfModel] !== undefined)
                                {
                                    $scope.dynamicGoalData[listOfModel] = new Date($scope.dynamicGoalData[listOfModel]);
                                } else
                                {
                                    $scope.dynamicGoalData[listOfModel] = '';
                                }
                            }
                        })
                    }
                    if ($scope.goalTemplateList[$scope.goalTemplateList.indexOf($scope.goalTemplate.copyOf)].ruleList !== null && $scope.goalTemplateList[$scope.goalTemplateList.indexOf($scope.goalTemplate.copyOf)].ruleList !== undefined) {
                        setRuleObject($scope.goalTemplateList[$scope.goalTemplateList.indexOf($scope.goalTemplate.copyOf)].ruleList.rules[0]);
                    }
                }
            };
            function setRuleObject(src) {
                $scope.ruleObject = {};
                $scope.ruleList = [];
                if (src !== null && src !== undefined) {
                    $scope.ruleObject.id = src.id;
                    $scope.ruleObject.isActive = src.isActive;
                    $scope.ruleObject.isArchive = src.isArchive;
                    $scope.ruleObject.remarks = src.remarks;
                    $scope.ruleObject.ruleName = src.ruleName;
                    $scope.ruleObject.apply = src.apply;
                    var max = 0;
                    for (var i = 0; i < src.criterias.length; i++) {
                        if (src.criterias[i].id > max)
                            max = src.criterias[i].id;
                    }
                    $scope.lastRuleId = max;
                    setRuleList(src.criterias, 0);
                }
            }
            function setRuleList(rules, index) {
                if (index < rules.length) {
                    var rule = {};
                    rule.values = [];
                    rule.options = null;
                    rule.hint = "Enter value";
                    if (rules[index].fieldType === "Date range") {
                        rule.values[0] = rules[index].value.split(',')[0];
                        rule.values[1] = rules[index].value.split(',')[1];
                        if (rules[index].value1 !== null) {
                            rule.values[2] = rules[index].value1.split(',')[0];
                            rule.values[3] = rules[index].value1.split(',')[1];
                        }
                    } else {
                        if (rules[index].fieldType !== "Pointer" && rules[index].fieldType !== "SubEntity") {
                            if (rules[index].fieldType === "MultiSelect" || rules[index].fieldType === "Dropdown")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }
                        else if (rules[index].fieldType === "SubEntity") {
                            if (rules[index].subentityComponentType !== "Date")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }

                        else
                        {
                            if (rules[index].pointerComponentType === "MultiSelect" || rules[index].pointerComponentType === "Dropdown")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }
                    }
                    rule.id = rules[index].id;
                    rule.entity = rules[index].entity.toString();
                    var id = rules[index].field;
                    var operator = rules[index].operator;
                    if (parseInt(rule.entity) < 0) {
                        if (parseInt(rule.entity) >= -3 && parseInt(rule.entity) <= -1) {
                            rule.fieldList = $scope.fieldListForAct;
                        } else {
                            rule.fieldList = $scope.fieldListForSer;
                        }
                        $.grep(rule.fieldList, function(e, i) {
                            if (e.id == id) {
                                rule.field = rule.fieldList[i];
                                return true;
                            }
                        });
                        tmp(rule, operator, rules, index);
                    } else {
                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + rule.entity + "}", function(res) {
                            rule.fieldList = res;
                            $.grep(rule.fieldList, function(e, i) {
                                if (e.id == id) {
                                    rule.field = rule.fieldList[i];
                                    return true;
                                }
                            });
                            tmp(rule, operator, rules, index);
                        });
                    }
                }
            }
            function tmp(rule, operator, rules, index) {
                rule.operatorList = [];
                if (rule.field.type !== "SubEntity") {
                    rule.operatorList = $scope.operators[operatorMap[rule.field.type]];

                }
                else
                {
                    rule.operatorList = $scope.operators[operatorMap['Dropdown']];
                }
                $.grep(rule.operatorList, function(e, i) {
                    if (e.label === operator) {
                        rule.operator = rule.operatorList[i];
                        return true;
                    }
                });

                if (rule.field.type === "Dropdown" || rule.field.type === "Radio button" || rule.field.type === "MultiSelect") {
                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                            rule.options = res;
                            $.grep(rule.options, function(e, i) {
                                if (e.value === rule.value) {
                                    rule.value[0] = rule.options[i];
                                    return true;
                                }
                            });
                            if (rule.value1 !== null) {
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value1) {
                                        rule.value[1] = rule.options[i];
                                        return true;
                                    }
                                });
                            }
                        });
                    } else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                            rule.options = res;
                            $.grep(rule.options, function(e, i) {
                                if (e.value === rule.value) {
                                    rule.value[0] = rule.options[i];
                                    return true;
                                }
                            });
                            if (rule.value1 !== null) {
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value1) {
                                        rule.value[1] = rule.options[i];
                                        return true;
                                    }
                                });
                            }
                        });
                    } else {

                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                        {
                            var dbFieldName = rule.field.dbFieldName;
                            RuleService.retrieveLotStatus(dbFieldName, function(res) {
                                rule.options = res;
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value) {
                                        rule.value[0] = rule.options[i];
                                        return true;
                                    }
                                });
                                if (rule.value1 !== null) {
                                    $.grep(rule.options, function(e, i) {
                                        if (e.value === rule.value1) {
                                            rule.value[1] = rule.options[i];
                                            return true;
                                        }
                                    });
                                }
                            });


                        }


                        else {
                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function(res) {
                                rule.options = res;
                                if (rule.field.type !== "MultiSelect") {
                                    $.grep(rule.options, function(e, i) {
                                        if (e.value === rule.value) {
                                            rule.value[0] = rule.options[i];
                                            return true;
                                        }
                                    });
                                    if (rule.value1 !== null) {
                                        $.grep(rule.options, function(e, i) {
                                            if (e.value === rule.value1) {
                                                rule.value[1] = rule.options[i];
                                                return true;
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    }
                } else if (rule.field.type === "Checkbox") {
                    rule.options = [{label: 'True', value: true}, {label: 'False', value: false}];
                }
                else if (rule.field.type === "Pointer")
                {
                    var pointerComponentType;
                    var validationPattern = rule.field.validationPattern.replace("{", "")
                            .replace("}", "");
                    var validationsArr = [];
                    var pointerArray = [];
                    var pointerId;
                    validationsArr = validationPattern.split(",");
                    angular.forEach(validationsArr, function(validate)
                    {
                        if (validate.indexOf("\"pointer\":") > -1) {
                            pointerArray = validate.split(":");
                            pointerId = pointerArray[1].replace(/["']/g, "");
                            rule.field.pointerId = pointerId;
                        }
                    });
                    angular.forEach(rule.fieldList, function(fieldList)
                    {
                        if (fieldList.id.toString() === pointerId.toString())
                        {
                            pointerComponentType = fieldList.type;
                            rule.field.pointertype = pointerComponentType;
                        }
                    });
                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                        rule.options = res;
                    });
                }
                else
                if (rule.field.type === 'SubEntity')
                {
                    rule.field.subEntityType = "Dropdown";

                    RuleService.retrieveDropListForSubEntity(rule.field.id, function(res) {
                        rule.options = res;
                    });
                }
                rule.showtemplate = false;
                rule.showtemplate = true;
                function ruleOptions()
                {
                    if (rule.field.type === "MultiSelect") {
                        RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function(res) {
                            rule.options = res;
                        });
                    }
                }
                $scope.ruleList[index] = rule;
                index++;


                setRuleList(rules, index);


                ruleOptions();
                if (rule.field.type === "MultiSelect")
                {
                    angular.forEach($scope.ruleList, function(item) {
                        var valueList = angular.copy(item.values);
                        item.multiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function(res) {
                                    $scope.optionsMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiple = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiple);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
//                                            


                            }};

                        item.multiselectSingleComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function(res) {
                                    $scope.optionsMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiple = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiple);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                if (rule.field.type === "Pointer")
                {
                    angular.forEach($scope.ruleList, function(item) {

                        var pointerId;
                        if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                            pointerId = rule.field.pointerId.replace("\"", "");
                        }
                        var valueList = angular.copy(item.values);
                        item.pointerMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                                    $scope.optionspointerMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiplepointer = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionspointerMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiplepointer);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};

                        item.pointerSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                var pointerId = item.field.pointerId.replace("\"", "");
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                                    $scope.optionsSingleSelectPointer = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatasinglepointer = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSingleSelectPointer, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatasinglepointer);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                if (rule.field.type === "SubEntity")
                {
                    angular.forEach($scope.ruleList, function(item) {

                        var pointerId;
                        if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                            pointerId = rule.field.pointerId.replace("\"", "");
                        }
                        var valueList = angular.copy(item.values);
                        item.subEntityMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];

                                RuleService.retrieveDropListForSubEntity(item.field.id, function(res) {
                                    $scope.optionsSubentityMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultipleSubEntity = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSubentityMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultipleSubEntity);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};

                        item.subEntitySingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];

                                RuleService.retrieveDropListForSubEntity(item.field.id, function(res) {
                                    $scope.optionsSubentitySingleSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultipleSubEntity = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSubentitySingleSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultipleSubEntity);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                // This method is for edit dropdown component
                if (rule.field.type === "Dropdown")
                {
                    angular.forEach($scope.ruleList, function(item) {
                        if (rule.id === item.id) {
                            var valueList = angular.copy(item.values);
                            item.dropdownMultiSelectComponent = {
                                multiple: true,
                                closeOnSelect: false,
                                placeholder: 'Select ',
                                initSelection: function(element, callback) {
                                    var data = [];
                                    var success = function(res) {
                                        $scope.optionsDropdown = res;
                                        var codeList = [];
                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                        var tempdatadropdown = angular.copy(item.values);
                                        angular.forEach(codeList, function(codeId) {
                                            angular.forEach($scope.optionsDropdown, function(recipient) {
                                                if (codeId.toString() === recipient.value.toString()) {
                                                    data.push({
                                                        id: recipient.value,
                                                        text: recipient.label
                                                    });
                                                }
                                            });
                                        });
                                        callback(data);
                                        item.values = angular.copy(tempdatadropdown);
                                    };
                                    var failure = function()
                                    {
                                    };
                                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else {
                                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                        {
                                            var dbFieldName = rule.field.dbFieldName;
                                            RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                        } else {
                                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                        }
                                    }
//                             

                                }
                                ,
                                formatResult: function(item) {
                                    return item.text;
                                },
                                formatSelection: function(item) {
                                    return item.text;
                                },
                                query: function(query) {
                                    var selected = query.term;
                                    $scope.names = [];
                                    if (item.options.length !== 0) {
                                        $scope.names = angular.copy(item.options);
                                        angular.forEach(item.options, function(item) {
                                            $scope.names.push({
                                                id: item.value,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                }};
                            // For multiselect Single Select
                            item.dropdownSingleSelectComponent = {
                                multiple: true,
                                closeOnSelect: false,
                                placeholder: 'Select',
                                maximumSelectionSize: 1,
                                initSelection: function(element, callback) {
                                    var data = [];
                                    var success = function(res) {
                                        $scope.optionsDropdown = res;
                                        var codeList = [];
                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                        var tempdatadropdown = angular.copy(item.values);
                                        angular.forEach(codeList, function(codeId) {
                                            angular.forEach($scope.optionsDropdown, function(recipient) {
                                                if (codeId.toString() === recipient.value.toString()) {
                                                    data.push({
                                                        id: recipient.value,
                                                        text: recipient.label
                                                    });
                                                }
                                            });
                                        });
                                        callback(data);
                                        item.values = angular.copy(tempdatadropdown);
                                    };
                                    var failure = function()
                                    {
                                    };
                                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else {
                                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                        {
                                            var dbFieldName = rule.field.dbFieldName;
                                            RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                        } else {
                                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                        }
                                    }
//                             

                                }
                                ,
                                formatResult: function(item) {
                                    return item.text;
                                },
                                formatSelection: function(item) {
                                    return item.text;
                                },
                                query: function(query) {
                                    var selected = query.term;
                                    $scope.names = [];
                                    if (item.options.length !== 0) {
                                        $scope.names = angular.copy(item.options);
                                        angular.forEach(item.options, function(item) {
                                            $scope.names.push({
                                                id: item.value,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                }};
                        }
                    });
                }
                if (rule.field.type === 'UserMultiSelect')
                {
                    angular.forEach($scope.ruleList, function(item) {
                        var validationPattern = item.field.validationPattern;
                        var isEmployee = false;
                        var isDepartment = false;
                        var isDesignation = false;
                        var validationsArr = validationPattern.replace("{", "")
                                .replace("}", "")
                                .split(",");
                        angular.forEach(validationsArr, function(valArr)
                        {
                            if (valArr.indexOf("\"isEmployee\":") > -1)
                            {
                                isEmployee = true;
                            }
                            if (valArr.indexOf("\"isDepartment\":") > -1)
                            {
                                isDepartment = true;
                            }
                            if (valArr.indexOf("\"isDesignation\":") > -1)
                            {
                                isDesignation = true;
                            }
                        });
                        // This method is for edit and single select i.e when the operator label is  "has any value from"
                        item.userMultiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {
                                var data = [];
                                var tempdatamultiple = angular.copy(item.values);
                                var array = item.values.toString().split(',');
                                var newArray = [];
                                if (array !== undefined) {
                                    angular.forEach(array, function(arr)
                                    {
                                        arr = arr.replace("\"", "").trim();
                                        newArray.push(arr);
                                    });
                                    CustomFieldService.defaultSelection(newArray, function(res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        item.values = angular.copy(tempdatamultiple);
                                    }, function() {
                                    });
                                }

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);
                                }
                            }
                        };
                        item.values = item.values.toString();

                        // This method is for edit and single select i.e when the operator label is not "has any value from"

                        item.userSingleselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                var tempdata = angular.copy(item.values);
                                var array = item.values.toString().split(',');
                                var newArray = [];
                                if (array !== undefined) {
                                    angular.forEach(array, function(arr)
                                    {
                                        arr = arr.replace("\"", "").trim();
                                        newArray.push(arr);
                                    });
                                    CustomFieldService.defaultSelection(newArray, function(res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        item.values = angular.copy(tempdata);
                                    }, function() {
                                    });
                                }

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);
                                } else if (selected.substring(0, 2) === '@A' || selected.substring(0, 2) === '@a') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveActivityList(search.trim(), success, failure);
                                } else {
                                    query.callback({
                                        results: $scope.names
                                    });
                                }
                            }
                        };
                    });
                }
            }

            $scope.editFromSearch = function(searchVal) {
                GoalService.retrieveGoalTemplateById(searchVal, function(data) {
                    $scope.goal = {};
                    if (!!data) {
                        $rootScope.goalTemplatePayload.editGoalTemplateId = searchVal;
                        $scope.goalTemplate = {};
                        $scope.dynamicGoalData = {};
                        $scope.goalTemplate.id = data.id;
                        $scope.goalTemplate.status = data.status;
                        $scope.goalTemplate.name = data.name;
                        $scope.goalTemplate.description = data.description;
                        $scope.goalTemplate.period = data.period;
                        $scope.goalTemplate.type = data.type;
                        if (!!data.ruleList) {
                            $scope.allRules = data.ruleList.rules;
                            $scope.goalTemplate.apply = data.ruleList.rules[0].apply;
                        }
                        $scope.goalTemplate.isGenVal = data.isGenVal;
                        $scope.goalTemplate.genvaltype = data.genvaltype;
                        $scope.goalTemplate.genvalvalue = data.genvalvalue;
                        $scope.goalTemplate.isValGoalAchieved = data.isValGoalAchieved;
                        $scope.goalTemplate.valgoalachievedtype = data.valgoalachievedtype;
                        $scope.goalTemplate.valgoalachievedvalue = data.valgoalachievedvalue;
                        $scope.goalTemplate.isValGoalNotAchieved = data.isValGoalNotAchieved;
                        $scope.goalTemplate.valgoalnotachievedtype = data.valgoalnotachievedtype;
                        $scope.goalTemplate.valgoalnotachievedvalue = data.valgoalnotachievedvalue;
                        $scope.dynamicGoalData = data.goalCustom;
                        if (!!$scope.dynamicGoalData) {
                            angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                            {
                                if ($scope.dynamicGoalData.hasOwnProperty(listOfModel))
                                {
                                    if ($scope.dynamicGoalData[listOfModel] !== null && $scope.dynamicGoalData[listOfModel] !== undefined)
                                    {
                                        $scope.dynamicGoalData[listOfModel] = new Date($scope.dynamicGoalData[listOfModel]);
                                    } else
                                    {
                                        $scope.dynamicGoalData[listOfModel] = '';
                                    }
                                }
                            })
                        }
                        if (!!data.ruleList && !!data.ruleList.rules)
                            setRuleObject(data.ruleList.rules[0]);
                    }
                }, function() {
                    console.log("Failed..");
                });
            };
            $scope.getSearchedDesignationRecords = function(list) {
                $scope.searchRecords = [];
                var enteredText = $('#scrollable-dropdown-menu.typeahead').typeahead('val');
                if (enteredText.length > 0) {
                    if (enteredText.length < 3) {
                        $scope.searchRecords = [];
                    } else {
                        if (list !== null && angular.isDefined(list) && list.length > 0) {
                            angular.forEach(list, function(item) {
                                $scope.searchRecords.push(item);
                            });
                        }
                    }
//                    $scope.resetSelection();
                    $scope.displaySearchedGoalTemplate = 'search';
                    $scope.editGoalTemplate = true;
                }
            };
            $scope.editGoalTemplateFromSearch = function(id) {
                $scope.displaySearchedGoalTemplate = 'view';
                $scope.editFromSearch(id);
            };
            $rootScope.unMaskLoading();
        }]);
});

