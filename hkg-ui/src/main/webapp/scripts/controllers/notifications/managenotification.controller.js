/* 
 * Author: Raj Kantaria
 * Controller file for manage notification feature
 */
define(['hkg', 'ruleService', 'customFieldService', 'messageService', 'notificationService', 'activityFlowService', 'addMasterValue', 'ruleField', 'dynamicForm', 'jqueryAtWho', 'jqueryCaret'], function(hkg) {
    hkg.register.controller('NotificationController', ["$rootScope", "$scope", "$location", "RuleService", "CustomFieldService", "Messaging", "NotificationService", "DynamicFormService", "ActivityFlowService", "$filter", function($rootScope, $scope, $location, RuleService, CustomFieldService, Messaging, NotificationService, DynamicFormService, ActivityFlowService, $filter) {
            $rootScope.maskLoading();
            $rootScope.mainMenu = "manageLink";
            $rootScope.childMenu = "manageNotifications";
            $rootScope.activateMenu();
            $scope.notification = {};
            $scope.ruleObject = {};
            $scope.dbType = {};
            $scope.copyFlag = false;
            $scope.mapOfActivitySerice = {};
            $scope.entity = "NOTIFICATION.";
            $scope.endRepeat = {};
            $scope.listOfModelsOfDateType = [];
            $scope.dynamicNotificationData = DynamicFormService.resetSection($scope.generalNotificationTemplate);
            var templateData = DynamicFormService.retrieveSectionWiseCustomFieldInfo("manageNotifications");
            templateData.then(function(section) {
                console.log("section:::::" + JSON.stringify(section));
                $scope.generalNotificationTemplate = section['Configuration'];
                if ($scope.generalNotificationTemplate !== null && $scope.generalNotificationTemplate !== undefined)
                {
                    angular.forEach($scope.generalNotificationTemplate, function(updateTemplate)
                    {
                        if (updateTemplate.type !== null && updateTemplate.type !== undefined && updateTemplate.type === 'date')
                        {
                            $scope.listOfModelsOfDateType.push(updateTemplate.model);
                        }
                    })
                }
            }, function(reason) {
                console.log('Failed: ' + reason);
            }, function(update) {
                console.log('Got notification: ' + update);
            });
            $scope.applyList = ["All", "Any"];
            $scope.operationFlag = 'add';
            var operatorMap = {"Number": "Numeric",
                "Text field": "String",
                "Text area": "String",
                "Dropdown": "String",
                "Radio button": "String",
                "Date": "Date",
                "Datepicker": "Date",
                "Date range": "Date range",
                "Time": "Date",
                "Time range": "Date range",
                "Password": "String",
                "Currency": "Numeric",
                "Decimal": "Numeric",
                "Email": "String",
                "Phone": "String",
                "Checkbox": "Boolean",
                "Percent": "Numeric",
                "Formula": "Numeric",
                "Pointer": "Numeric",
                "AutoGenerated": "Boolean",
                "MultiSelect": "String",
                "UserMultiSelect": "String",
                "Angle": "Numeric",
                "Image": "Image",
                "Upload": "Image"
            };
            $scope.fieldListForActSer = [{"id": -1,
                    "label": "Status",
                    "oldLabelName": "Status",
                    "type": "Dropdown",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "Long"},
                {"id": -2,
                    "label": "No. of occurance",
                    "oldLabelName": "No. of occurance",
                    "type": "Number",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "Number"},
                {"id": -3,
                    "label": "Time",
                    "oldLabelName": "Time",
                    "type": "Decimal",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"},
                {"id": -4,
                    "label": "Name",
                    "oldLabelName": "Name",
                    "type": "Dropdown",
                    "validationPattern": "{}",
                    "isNewField": false,
                    "fieldType": "String"}];
            $scope.mapOfActivitySerice = {};
            $scope.mapOfActivities = {};
            ActivityFlowService.retrievePrerequisite(function(res) {
                if (!!res) {
                    ActivityFlowService.retrieveServices(function(res1) {
                        $scope.serviceList = res1;
                        $rootScope.unMaskLoading();
                        ActivityFlowService.retrieveActivityFlowVersion(res['activityflowbycompany'][0]['custom2'][0].value, function(res3) {
                            console.log("res3.data['activityFlowGroups']::" + JSON.stringify(res3.data['activityFlowGroups']));
                            angular.forEach(res3.data['activityFlowGroups'], function(flow) {
                                $scope.mapOfActivitySerice[flow.groupId] = [];
                                $scope.mapOfActivities[flow.groupId] = flow.flowGroupName;
                                angular.forEach(flow.nodeDataBeanList, function(nodeItem) {
                                    var serviceEnt = $filter('filter')($scope.serviceList, function(service) {
                                        return service.id === nodeItem.associatedService;
                                    })[0];

                                    serviceEnt.nodeId = nodeItem.nodeId;
                                    $scope.mapOfActivitySerice[flow.groupId].push(serviceEnt);
                                });
                            });
                        });

                    });
                }
            });
            $scope.popover =
                    "<NOBR><font color='red;'>Use the shortcuts to search</font></NOBR><br/><table cellpadding='0' cellspacing='0'><tr><td>\ " +
                    "\n\ " +
                    "'@D'  </td> <td> &nbsp;  &nbsp;</td><td align='left'>Departments</td></tr>\ " +
                    "<tr><td>'@E'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Employees</td></tr>\ " +
                    "<tr><td>'@R'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Roles</td></tr>\ " +
                    "<tr><td>'@G'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Groups</td></tr>\ " +
                    "<tr><td>'@A'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Activities</td></tr>\ " +
                    "</table>\ ";
            $scope.ruleList = [];
            $scope.dateOptions = {
                'year-format': "'yy'",
                'starting-day': 1
            };
            $scope.format = $rootScope.dateFormat;
            $scope.datePicker = {};
            $scope.open = function($event, opened) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.datePicker[opened] = true;
            };
            $scope.minEndRepeatDate = $rootScope.getCurrentServerDate();
            $scope.minDueDate = $rootScope.getCurrentServerDate();

            $scope.hstep = 1;
            $scope.mstep = 1;
            $scope.options = {
                hstep: [1, 2, 3],
                mstep: [1, 5, 10, 15, 25, 30]
            };
            $scope.ismeridian = true;
            $scope.setEditTaskEndRepeatMinDate = function() {
                $scope.minEndRepeatDate = $rootScope.getCurrentServerDate();
            };
            $scope.enableTagging = function() {
                CustomFieldService.retrieveAllFields(function(data) {
                    $scope.varList = [];
                    angular.forEach(data, function(value, key) {
                        $scope.varList.push(value);
                    });

                    $(".tagging").atwho({
                        at: "$",
                        data: $scope.varList
                    });
                });
            };
            $scope.initData = function() {
                $scope.notification = {};
                $scope.notification.apply = $scope.applyList[0];
                $scope.notification.atTime = $rootScope.getCurrentServerDate();
                $scope.notification.repeatativeMode = "D";
                $scope.notification.endRepeatMode = 'OD';
                $scope.notification.basedOn = '1';
                RuleService.retrievePrerequisite(function(res) {
                    $scope.entityList = res.entity;
                    ActivityFlowService.retrievePrerequisite(function(res) {
                        var flag = false;
                        if (!!res && !!res.activityflowbycompany && res.activityflowbycompany.length > 0 && !!res.activityflowbycompany[0].custom2) {
                            for (var index = 0; index < res.activityflowbycompany[0].custom2.length; index++) {
                                if (res.activityflowbycompany[0].custom2[index].description === "A") {
                                    flag = true;
                                    $scope.version = res.activityflowbycompany[0].custom2[index].value;
                                    break;
                                }
                            }
                            if (flag) {
                                $scope.entityList["-1"] = "Current Activity";
                                $scope.entityList["-2"] = "Next Activity";
                                $scope.entityList["-3"] = "Previous Activity";
                                $scope.entityList["-4"] = "Current Service";
                                $scope.entityList["-5"] = "Next Service";
                                $scope.entityList["-6"] = "Previous Service";
                            }
                        }
                    });
                    $scope.operators = res.operator;
                });
                $scope.weekList = [{code: "M", value: "2"}, {code: "Tu", value: "3"}, {code: "W", value: "4"}, {code: "Th", value: "5"}, {code: "F", value: "6"}, {code: "Sa", value: "7"}, {code: "Su", value: "1"}];
                $scope.dayList = new Array();

                for (var i = 0; i < 31; i++) {
                    $scope.dayList.push(i + 1);
                }
                var rule = initializeRule();
                $scope.ruleList.push(rule);


                CustomFieldService.retrieveAllFields(function(data) {
                    $scope.varList = [];
                    angular.forEach(JSON.parse(angular.toJson(data)), function(value, key) {
                        $scope.varList.push(value);
                    });

                    $(".tagging").atwho({
                        at: "$",
                        data: $scope.varList
                    });
                });
                $scope.autoCompleteInvitees = {
                    multiple: true,
                    closeOnSelect: false,
                    placeholder: 'Select members',
                    initSelection: function(element, callback) {
                        var data = [];
                        angular.forEach($scope.recipients, function(recipient) {
                            data.push({
                                id: recipient.recipientInstance + ":" + recipient.recipientType,
                                text: recipient.recipientValue
                            });
                        });
                        callback(data);
                    },
                    formatResult: function(item) {
                        return item.text;
                    },
                    formatSelection: function(item) {
                        return item.text;
                    },
                    query: function(query) {
                        var selected = query.term;
                        $scope.names = [];
                        var success = function(data) {
                            if (data.length !== 0) {
                                $scope.names = data;
                                angular.forEach(data, function(item) {
                                    $scope.names.push({
                                        id: item.value + ":" + item.description,
                                        text: item.label

                                    });
                                });
                            }
                            query.callback({
                                results: $scope.names
                            });
                        };
                        var failure = function() {
                        };
                        if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                            var search = query.term.slice(2);
                            Messaging.retrieveUserList(search.trim(), success, failure);
                        } else if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                            var search = query.term.slice(2);
                            Messaging.retrieveDepartmentList(search.trim(), success, failure);
                        } else if (selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                            var search = query.term.slice(2);
                            Messaging.retrieveRoleList(search.trim(), success, failure);
                        } else if (selected.substring(0, 2) === '@A' || selected.substring(0, 2) === '@a') {
                            var search = query.term.slice(2);
                            Messaging.retrieveActivityList(search.trim(), success, failure);
                        } else if (selected.substring(0, 2) === '@G' || selected.substring(0, 2) === '@g') {
                            var search = query.term.slice(2);
                            Messaging.retrieveGroupList(search.trim(), success, failure);
                        } else if (selected.length > 0) {
                            var search = selected;
                            Messaging.retrieveUserList(search.trim(), success, failure);
                        } else {
                            query.callback({
                                results: $scope.names
                            });
                        }
                    }
                };

                $scope.retrieveNotificationsList();
            };
            var initializeRule = function() {
                var rule = {};
                rule.entity = "";
                rule.field = "";
                rule.operator = "";
                rule.options = null;
                rule.operatorList = [];
                rule.fieldList = [];
                rule.rowsubmitted = false;
                rule.hint = "Enter value";
                rule.values = [];
                return rule;
            };
            var values = ["abc", "bcd", "cde", "def", "efg"];

            $scope.onEntityChange = function(index) {
                if ($scope.ruleList[index].entity !== null) {
                    $scope.ruleList[index].field = {};
                    $scope.ruleList[index].operatorList = [];
                    var id = $scope.ruleList[index].entity;
                    $scope.ruleList[index].showtemplate = false;
                    $scope.ruleList[index].values = [];
                    $scope.ruleList[index].rowsubmitted = false;
                    if (parseInt(id) > 0) {
                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + id + "}", function(res) {
                            $scope.ruleList[index].fieldList = res;
                        });
                    } else {
                        $scope.ruleList[index].fieldList = $scope.fieldListForActSer;
                    }
                }
            };
            $scope.onFieldChange = function(index) {
                if ($scope.ruleList[index].field !== null) {
                    $scope.ruleList[index].operator = {};
                    var componentType = $scope.ruleList[index].field.type;

                    $scope.ruleList[index].operatorList = [];
                    var pointerId;
                    if (componentType === 'Pointer') {
                        var pointerComponentType;
                        var validationPattern = $scope.ruleList[index].field.validationPattern.replace("{", "")
                                .replace("}", "");
                        var validationsArr = [];
                        var pointerArray = [];

                        validationsArr = validationPattern.split(",");
                        angular.forEach(validationsArr, function(validate)
                        {
                            if (validate.indexOf("\"pointer\":") > -1) {
                                pointerArray = validate.split(":");
                                pointerId = pointerArray[1].replace(/["']/g, "");
                                $scope.ruleList[index].field.pointerId = pointerId;
                            }
                        });
                        angular.forEach($scope.ruleList[index].fieldList, function(fieldList)
                        {
                            if (fieldList.id.toString() === pointerId.toString())
                            {
                                pointerComponentType = fieldList.type;
                                $scope.ruleList[index].field.pointertype = pointerComponentType;

                            }
                        });
                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap[pointerComponentType]];

                    }
                    else
                    if (componentType === 'SubEntity')
                    {

                        $scope.ruleList[index].field.subEntityType = "Dropdown";

                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap["Dropdown"]];
                        RuleService.retrieveDropListForSubEntity($scope.ruleList[index].field.id, function(res) {
                            $scope.ruleList[index].options = res;
                            // I have taken index 0 because everyindex will have same component type
                            $scope.ruleList[index].field.subentityDropListType = res[0].description;
                        });


                    }

                    else {
                        $scope.ruleList[index].operatorList = $scope.operators[operatorMap[$scope.ruleList[index].field.type]];
                    }
                    if (componentType === "Dropdown" || componentType === "Radio button" || componentType === "MultiSelect") {

                        if (parseInt($scope.ruleList[index].entity) <= -1 && parseInt($scope.ruleList[index].entity) >= -3 && parseInt($scope.ruleList[index].field.id) !== -1) {
                            RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                                $scope.ruleList[index].options = res;
                            });
                        } else if (parseInt($scope.ruleList[index].entity) <= -4 && parseInt($scope.ruleList[index].entity) >= -6 && parseInt($scope.ruleList[index].field.id) !== -1) {
                            RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                                $scope.ruleList[index].options = res;
                            });
                        } else {
                            // For Lot status the dropdown should not be populated from here
                            if ($scope.ruleList[index].field.dbFieldName === 'lot_status' || $scope.ruleList[index].field.dbFieldName === 'packet_status'
                                    || $scope.ruleList[index].field.dbFieldName === 'status_of_plan' || $scope.ruleList[index].field.dbFieldName === 'parcel_status' || $scope.ruleList[index].field.dbFieldName === 'invoice_status'
                                    || $scope.ruleList[index].field.dbFieldName === 'issue_status' || $scope.ruleList[index].field.dbFieldName === 'type_of_plan')
                            {
                                var dbFieldName = $scope.ruleList[index].field.dbFieldName;

                                RuleService.retrieveLotStatus(dbFieldName, function(res) {
                                    $scope.ruleList[index].options = res;
                                });

                            }
                            else
                            {
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + $scope.ruleList[index].field.id + "}", function(res) {
                                    $scope.ruleList[index].options = res;

                                });
                            }
                        }
                    } else if (componentType === "Checkbox") {
                        $scope.ruleList[index].options = [{label: 'True', value: true}, {label: 'False', value: false}];
                    }
                    else if (componentType === "Pointer")
                    {
                        RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                            $scope.ruleList[index].options = res;
                        });
                    }

                    $scope.ruleList[index].showtemplate = false;
                    $scope.ruleList[index].values = [];
                    $scope.ruleList[index].rowsubmitted = false;
                }
            };
            $scope.onOperatorChange = function(index) {
                $scope.ruleList[index].showtemplate = false;
                $scope.ruleList[index].rowsubmitted = false;
                $scope.ruleList[index].values = [];
                var operator = $scope.ruleList[index].operator;
                if (!!operator) {
                    if (operator.label === "contains" || operator.label === "has no value" || operator.label === "has any value") {
                        $scope.ruleList[index].hint = "Enter comma separated list";
                    }

                    $scope.ruleList[index].showtemplate = true;
                    angular.forEach($scope.ruleList, function(item) {
                        var validationPattern = item.field.validationPattern;
                        var isEmployee = false;
                        var isDepartment = false;
                        var isDesignation = false;
                        var validationsArr = validationPattern.replace("{", "")
                                .replace("}", "")
                                .split(",");
                        angular.forEach(validationsArr, function(valArr)
                        {
                            if (valArr.indexOf("\"isEmployee\":") > -1)
                            {
                                isEmployee = true;
                            }
                            if (valArr.indexOf("\"isDepartment\":") > -1)
                            {
                                isDepartment = true;
                            }
                            if (valArr.indexOf("\"isDesignation\":") > -1)
                            {
                                isDesignation = true;
                            }
                        });
// For multiselect component Multiple i.e. IN query
                        item.multiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };
                        // For multiselect component Single i.e. EQUALS OR NOT EQUAL query
                        item.multiselectSingleComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };
                        // For dropdown component Multiple i.e. IN query
                        item.dropdownMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For dropdown component SINGLE i.e. EQUAL query
                        item.dropdownSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };
                        // For SubEntity component Multiple i.e. IN query
                        item.subEntityMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For SubENtity component SINGLE i.e. EQUAL query
                        item.subEntitySingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For dropdown pointer component Multiple i.e. IN query
                        item.pointerMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For pointer dropdown component SINGLE i.e. EQUAL query
                        item.pointerSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }
                        };

                        // For USerMultiSelect on operator change for multiple select 
                        item.userMultiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);

                                } else {
                                    query.callback({
                                        results: $scope.names
                                    });
                                }
                            }};
                        // For USerMultiSelect on operator change for Single select 

                        item.userSingleselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                callback(data);
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);

                                }
                                else {
                                }
                            }};

                    });
                    $scope.ruleList[index].showtemplate = true;
                } else {
                    $scope.ruleList[index].showtemplate = false;
                }
            };
            $scope.onOperatorClick = function(index) {
                $scope.ruleList[index].showtemplate = false;
                $scope.ruleList[index].rowsubmitted = false;
            };
            $scope.addRule = function(form, index) {
                $scope.ruleList[index].rowsubmitted = true;
                if (form.$valid) {
                    var flag = true;
                    var length = $scope.ruleList[index].operator.shortcutCode;
                    for (var i = 0; i < length; i++) {
                        var val = $scope.ruleList[index].values[i];

                        if ($scope.ruleList[index].operator.label !== 'has no value' && $scope.ruleList[index].operator.label !== 'has any value')
                        {
                            if ($scope.ruleList[index].field.type === "MultiSelect")
                            {
                                var valueOfMultiSelect = $scope.ruleList[index].values;
                                flag = (flag && true);
                            } else {
                                if (val !== null && val !== undefined) {
                                    flag = (flag && true);
                                } else {
                                    flag = false;
                                }
                            }
                        } else
                        {
                            flag = (flag && true);
                        }
                    }
                    if (flag) {
                        var rule = initializeRule();
                        $scope.ruleList.push(rule);
                    }
                }
            };
            $scope.remove = function(index) {
                $scope.ruleList.splice(index, 1);
                if ($scope.ruleList.length === 0) {
                    var rule = initializeRule();
                    $scope.ruleList.push(rule);
                    $scope.ruleList[index].rowsubmitted = false;
                }
            };
            $scope.saveNotification = function(form) {
                $scope.submitted = true;
                $scope.save(form);
                $scope.notificationToSave = angular.copy($scope.notification);
                $scope.setModelValues();

                if ($scope.notificationForm.$valid) {
                    if ($scope.notification.basedOn == 1) {
                        var ruleset = {};

                        ruleset.id = $scope.ruleSetId;
                        ruleset.rules = $scope.allRules;
                        ruleset.rules[0].apply = $scope.notification.apply;
                        $scope.notificationToSave.ruleSet = ruleset;
                    }
                    $scope.notificationToSave.taskCustom = $scope.dynamicNotificationData;
                    $scope.notificationToSave.dbType = $scope.dbType;
                    $scope.notificationToSave.activity = $scope.notification.activity;
                    $scope.notificationToSave.service = $scope.notification.service;
                    delete $scope.notificationToSave.copyOf;
                    if ($scope.operationFlag === 'add') {
                        $rootScope.maskLoading();
                        NotificationService.createNotificationConfiguration($scope.notificationToSave, function(data) {
                            $rootScope.unMaskLoading();
                            $scope.notification = {};
                            $scope.notificationToSave = {};
                            $scope.endRepeat = {};
                            $scope.allRules = [];
                            $scope.ruleList = [];
                            $scope.submitted = false;

                            $scope.recipients = [];
                            $("#invitees").select2('val', []);
                            $scope.notificationList = [];
                            $scope.retrieveNotificationsList();
                            var msg = "Notification configuration added successfully";
                            var type = $rootScope.success;
                            $rootScope.addMessage(msg, type);
                            $scope.operationFlag = 'add';
                            $scope.initData();
                            $('#scrollable-dropdown-menu.typeahead').typeahead('val', '');
                            $scope.dynamicNotificationData = {};
                            $scope.notificationForm.$setPristine();
                        }, function() {
                            $rootScope.unMaskLoading();
                            var msg = "Error while creating notification configuration";
                            var type = $rootScope.failure;
                            $rootScope.addMessage(msg, type);
                        });
                    } else if ($scope.operationFlag === 'edit') {
                        $rootScope.maskLoading();
                        NotificationService.updateNotificationConfiguration($scope.notificationToSave, function() {
                            $rootScope.unMaskLoading();
                            $scope.notification = {};
                            $scope.notificationToSave = {};
                            $scope.endRepeat = {};
                            $scope.allRules = [];
                            $scope.ruleList = [];
                            $scope.submitted = false;

                            $scope.recipients = [];
                            $("#invitees").select2('val', []);
                            $scope.notificationList = [];
                            $scope.retrieveNotificationsList();
                            var msg = "Notification configuration updated successfully";
                            var type = $rootScope.success;
                            $rootScope.addMessage(msg, type);
                            $scope.operationFlag = 'add';
                            $scope.initData();
                            $('#scrollable-dropdown-menu.typeahead').typeahead('val', '');
                            $scope.dynamicNotificationData = {};
                            $scope.notificationForm.$setPristine();
                        }, function() {
                            $rootScope.unMaskLoading();
                            var msg = "Error while updating notification configuration";
                            var type = $rootScope.failure;
                            $rootScope.addMessage(msg, type);
                        });
                    }
                } else {
                    console.log("Invalid...." + JSON.stringify($scope.notificationForm.$error));
                }
            };
            $scope.save = function(form) {
                $scope.ruleSubmitted = true;
                var rules = [];
                var length = $scope.ruleList.length;
                for (var i = 0; i < length; i++) {
                    $scope.ruleList[i].rowsubmitted = true;
                    var tmprule = {};
                    tmprule = angular.copy($scope.ruleList[i]);
                    var rule = {};
                    rule.id = i;
                    rule.entity = tmprule.entity;
                    rule.field = tmprule.field.id;
                    rule.operator = tmprule.operator.label;
                    rule.fieldType = tmprule.field.type;

                    // For non pointer components
                    if (rule.fieldType !== "Pointer" && rule.fieldType !== "SubEntity") {
                        if (rule.fieldType !== "Date range" && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {
                            if (rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                rule.value = tmprule.values[0] + "," + tmprule.values[1];
                            }
                            else
                            {
                                if (tmprule.operator.label !== "has any value from")
                                {
                                    if (tmprule.values.toString().indexOf(',') > -1)
                                    {
                                        tmprule.values.toString().replace(/,/g, '');
                                    }

                                }
                                rule.value = tmprule.values;
                            }


                            if (tmprule.values.length > 1 && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                            }
                        }
                    }
                    else if (rule.fieldType === "SubEntity")
                    {
                        if (tmprule.field.subentityDropListType === "Date ") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {


                            if (tmprule.operator.label !== "has any value from")
                            {
                                if (tmprule.values.toString().indexOf(',') > -1)
                                {
                                    tmprule.values.toString().replace(/,/g, '');
                                }

                            }
                            rule.value = tmprule.values;
                        }
                        if (tmprule.values.length > 1 && tmprule.field.subentityDropListType === "Date ") {
                            rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                        }
                    }
                    else
                    {
                        if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                            rule.value = tmprule.values[0];
                            if (tmprule.values.length > 1) {
                                rule.value1 = tmprule.values[1];
                            }
                        } else {
                            if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                rule.value = tmprule.values[0] + "," + tmprule.values[1];
                            }
                            else
                            {
                                if (tmprule.operator.label !== "has any value from")
                                {
                                    if (tmprule.values.toString().indexOf(',') > -1)
                                    {
                                        tmprule.values.toString().replace(/,/g, '');
                                    }

                                }
                                rule.value = tmprule.values;
                            }


                            if (tmprule.values.length > 1 && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                            }

                        }
                    }

                    rules.push(rule);
                }
                if (form.$valid) {
                    $scope.ruleObject.criterias = angular.copy(rules);
                    $scope.ruleObject.isArchive = false;

                    if ($scope.operationFlag === 'edit') {

                        $scope.allRules[0].ruleName = angular.copy($scope.ruleObject.ruleName);
                        $scope.allRules[0].remarks = angular.copy($scope.ruleObject.remarks);
                        $scope.allRules[0].apply = angular.copy($scope.ruleObject.apply);
                        $scope.allRules[0].criterias = angular.copy($scope.ruleObject.criterias);
                        $scope.allRules[0].isActive = true;
                        $scope.allRules[0].isArchive = false;
                    } else {
                        if ($scope.ruleObject.id === null) {

                            $scope.lastRuleId++;

                            if (!!$scope.allRules) {
                                $scope.ruleObject.id = $scope.allRules.length;
                            } else {
                                $scope.ruleObject.id = 0;
                            }
                        }
                        if (!!!$scope.allRules) {
                            $scope.allRules = [];
                        }
                        $scope.allRules.push($scope.ruleObject);
                        $scope.selectedRule = $scope.ruleObject;
                    }

                    $scope.ruleSubmitted = false;

                }
            };
            var lastRuleId = 0;
            $scope.setModelValues = function() {
                if ($scope.operationFlag === 'edit' || $scope.copyFlag) {
                    $scope.notificationToSave.taskRecipients = $("#invitees").select2("val").toString().split(",");
                } else {
                    if ($scope.notification.taskRecipients !== undefined && $scope.notification.taskRecipients.length > 0) {
                        $scope.notificationToSave.taskRecipients = $scope.notification.taskRecipients.split(",");
                    }
                }
                //Fill weekdays value
                if ($scope.notificationToSave.repeatativeMode === 'W') {
                    $scope.notificationToSave.weeklyOnDays = '';
                    angular.forEach($scope.weekList, function(week, index) {
                        if (week.isChecked) {
                            $scope.notificationToSave.weeklyOnDays += week.value;
                            $scope.notificationToSave.weeklyOnDays += "|";
                        }
                    });
                    $scope.notificationToSave.weeklyOnDays = $scope.notificationToSave.weeklyOnDays.substring(0, $scope.notificationToSave.weeklyOnDays.length - 1);
                }

                if ($scope.notificationToSave.endRepeatMode === 'AD') {
                    $scope.notificationToSave.afterUnits = $scope.endRepeat.afterDaysUnits;
                } else if ($scope.notificationToSave.endRepeatMode === 'AR') {
                    $scope.notificationToSave.afterUnits = $scope.endRepeat.afterRepititionsUnits;
                }

            };

            $scope.makeACopy = function() {
                var copyData = angular.copy($scope.notification.copyOf);
                if (!!copyData) {
                    $scope.endRepeat = {};
                    $scope.copyFlag = true;
                    if (!!!$scope.notification.name)
                        copyData.name = "copy of " + copyData.name;

                    $scope.notification = {};

                    $scope.notification.name = copyData.name;
                    $scope.notification.desc = copyData.desc;
                    $scope.notification.copyOf = copyData;
                    $scope.notification.repeatativeMode = copyData.repeatativeMode;
                    $scope.notification.weeklyOnDays = copyData.weeklyOnDays;
                    $scope.notification.monthlyOnDay = copyData.monthlyOnDay;
                    $scope.notification.endRepeatMode = copyData.endRepeatMode;
                    $scope.notification.endDate = copyData.endDate;
                    if (!!copyData.activity) {
                        $scope.notification.activity = copyData.activity.toString;
                    }
                    $scope.retrieveServices();
                    $scope.notification.service = copyData.service;
                    $scope.retrieveServices();
                    if ($scope.notification.endRepeatMode == "AD")
                        $scope.endRepeat.afterDaysUnits = copyData.afterUnits;
                    if ($scope.notification.endRepeatMode == "AR")
                        $scope.endRepeat.afterRepititionsUnits = copyData.afterUnits;
                    var vals = copyData.taskRecipients;
                    $scope.notification.repetitionCount = copyData.repetitionCount;
                    $scope.notification.basedOn = copyData.basedOn;
                    $scope.notification.interfaceEType = copyData.interfaceEType;
                    $scope.notification.interfaceETypeText = copyData.interfaceETypeText;
                    $scope.notification.interfaceWType = copyData.interfaceWType;
                    $scope.notification.interfaceWTypeText = copyData.interfaceWTypeText;
//                    $scope.notification.interfaceSType = copyData.interfaceSType;
//                    $scope.notification.interfaceSTypeText = copyData.interfaceSTypeText;
                    $scope.notification.atTime = copyData.atTime;
                    $scope.recipients = copyData.taskRecipientDataBeanList;
                    $scope.dynamicNotificationData = copyData.taskCustom;
                    if (!!$scope.dynamicNotificationData) {
                        angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                        {
                            if ($scope.dynamicNotificationData.hasOwnProperty(listOfModel))
                            {
                                if ($scope.dynamicNotificationData[listOfModel] !== null && $scope.dynamicNotificationData[listOfModel] !== undefined)
                                {
                                    $scope.dynamicNotificationData[listOfModel] = new Date($scope.dynamicNotificationData[listOfModel]);
                                } else
                                {
                                    $scope.dynamicNotificationData[listOfModel] = '';
                                }
                            }
                        })
                    }
//                    $scope.notification.taskRecipients = copyData.taskRecipients;
                    if (!!copyData.ruleSet && !!copyData.ruleSet.rules) {
                        $scope.ruleSetId = copyData.ruleSet.id;
                        $scope.allRules = copyData.ruleSet.rules;
                        $scope.notification.apply = copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1].apply;
                        setRuleObject(copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1]);
                    }
                    if ($scope.notification.repeatativeMode === 'W') {
                        var weekDays = $scope.notification.weeklyOnDays.split("|");
                        var count = 0;
                        angular.forEach($scope.weekList, function(week, index) {
                            if (week.value === weekDays[count]) {
                                week.isChecked = "true";
                                count++;
                            }
                        });
                    }
                    $("#invitees").select2('val', []);
                }
            };
            function setRuleObject(src) {
                $scope.ruleObject = {};
                $scope.ruleList = [];
                if (src !== null && src !== undefined) {
                    $scope.ruleObject.id = src.id;
                    $scope.ruleObject.isActive = src.isActive;
                    $scope.ruleObject.isArchive = src.isArchive;
                    $scope.ruleObject.remarks = src.remarks;
                    $scope.ruleObject.ruleName = src.ruleName;
                    $scope.ruleObject.apply = src.apply;
                    var max = 0;
                    for (var i = 0; i < src.criterias.length; i++) {
                        if (src.criterias[i].id > max)
                            max = src.criterias[i].id;
                    }
                    $scope.lastRuleId = max;
                    setRuleList(src.criterias, 0);
                }
            }
            ;
            function setRuleList(rules, index) {
                if (index < rules.length) {
                    var rule = {};
                    rule.values = [];
                    rule.options = null;
                    rule.hint = "Enter value";
                    if (rules[index].fieldType === "Date range") {
                        rule.values[0] = rules[index].value.split(',')[0];
                        rule.values[1] = rules[index].value.split(',')[1];
                        if (rules[index].value1 !== null) {
                            rule.values[2] = rules[index].value1.split(',')[0];
                            rule.values[3] = rules[index].value1.split(',')[1];
                        }
                    } else {
                        if (rules[index].fieldType !== "Pointer" && rules[index].fieldType !== "SubEntity") {
                            if (rules[index].fieldType === "MultiSelect" || rules[index].fieldType === "Dropdown")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }
                        else if (rules[index].fieldType === "SubEntity") {
                            if (rules[index].subentityComponentType !== "Date")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }

                        else
                        {
                            if (rules[index].pointerComponentType === "MultiSelect" || rules[index].pointerComponentType === "Dropdown")
                            {
                                rule.values = rules[index].value;
                            }
                            else
                            {
                                rule.values[0] = rules[index].value;

                                if (rules[index].value1 !== null) {
                                    rule.values[1] = rules[index].value1;
                                }
                            }
                        }
                    }
                    rule.id = rules[index].id;
                    rule.entity = rules[index].entity.toString();
                    var id = rules[index].field;
                    var operator = rules[index].operator;
                    if (parseInt(rule.entity) < 0) {
                        rule.fieldList = $scope.fieldListForActSer;
                        $.grep(rule.fieldList, function(e, i) {
                            if (e.id == id) {
                                rule.field = rule.fieldList[i];
                                return true;
                            }
                        });
                        tmp(rule, operator, rules, index);
                    } else {
                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + rule.entity + "}", function(res) {
                            rule.fieldList = res;
                            $.grep(rule.fieldList, function(e, i) {
                                if (e.id == id) {
                                    rule.field = rule.fieldList[i];
                                    return true;
                                }
                            });
                            tmp(rule, operator, rules, index);
                        });
                    }
                }
            }
            function tmp(rule, operator, rules, index) {
                rule.operatorList = [];
                if (rule.field.type !== "SubEntity") {
                    rule.operatorList = $scope.operators[operatorMap[rule.field.type]];
                }
                else
                {
                    rule.operatorList = $scope.operators[operatorMap['Dropdown']];
                }
                $.grep(rule.operatorList, function(e, i) {
                    if (e.label === operator) {
                        rule.operator = rule.operatorList[i];
                        return true;
                    }
                });

                if (rule.field.type === "Dropdown" || rule.field.type === "Radio button" || rule.field.type === "MultiSelect") {
                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                            rule.options = res;
                            $.grep(rule.options, function(e, i) {
                                if (e.value === rule.value) {
                                    rule.value[0] = rule.options[i];
                                    return true;
                                }
                            });
                            if (rule.value1 !== null) {
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value1) {
                                        rule.value[1] = rule.options[i];
                                        return true;
                                    }
                                });
                            }
                        });
                    } else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", function(res) {
                            rule.options = res;
                            $.grep(rule.options, function(e, i) {
                                if (e.value === rule.value) {
                                    rule.value[0] = rule.options[i];
                                    return true;
                                }
                            });
                            if (rule.value1 !== null) {
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value1) {
                                        rule.value[1] = rule.options[i];
                                        return true;
                                    }
                                });
                            }
                        });
                    } else {

                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                        {
                            var dbFieldName = rule.field.dbFieldName;
                            RuleService.retrieveLotStatus(dbFieldName, function(res) {
                                rule.options = res;
                                $.grep(rule.options, function(e, i) {
                                    if (e.value === rule.value) {
                                        rule.value[0] = rule.options[i];
                                        return true;
                                    }
                                });
                                if (rule.value1 !== null) {
                                    $.grep(rule.options, function(e, i) {
                                        if (e.value === rule.value1) {
                                            rule.value[1] = rule.options[i];
                                            return true;
                                        }
                                    });
                                }
                            });


                        } else {
                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function(res) {
                                rule.options = res;
                                if (rule.field.type !== "MultiSelect") {
                                    $.grep(rule.options, function(e, i) {
                                        if (e.value === rule.value) {
                                            rule.value[0] = rule.options[i];
                                            return true;
                                        }
                                    });
                                    if (rule.value1 !== null) {
                                        $.grep(rule.options, function(e, i) {
                                            if (e.value === rule.value1) {
                                                rule.value[1] = rule.options[i];
                                                return true;
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    }
                } else if (rule.field.type === "Checkbox") {
                    rule.options = [{label: 'True', value: true}, {label: 'False', value: false}];
                } else if (rule.field.type === "Pointer")
                {
                    var pointerComponentType;
                    var validationPattern = rule.field.validationPattern.replace("{", "")
                            .replace("}", "");
                    var validationsArr = [];
                    var pointerArray = [];
                    var pointerId;
                    validationsArr = validationPattern.split(",");
                    angular.forEach(validationsArr, function(validate)
                    {
                        if (validate.indexOf("\"pointer\":") > -1) {
                            pointerArray = validate.split(":");
                            pointerId = pointerArray[1].replace(/["']/g, "");
                            rule.field.pointerId = pointerId;
                        }
                    });
                    angular.forEach(rule.fieldList, function(fieldList)
                    {
                        if (fieldList.id.toString() === pointerId.toString())
                        {
                            pointerComponentType = fieldList.type;
                            rule.field.pointertype = pointerComponentType;
                        }
                    });
                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                        rule.options = res;
                    });
                }
                else if (rule.field.type === 'SubEntity') {
                    rule.field.subEntityType = "Dropdown";

                    RuleService.retrieveDropListForSubEntity(rule.field.id, function(res) {
                        rule.options = res;
                    });
                }
                rule.showtemplate = false;
                rule.showtemplate = true;
                function ruleOptions()
                {
                    if (rule.field.type === "MultiSelect") {
                        RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function(res) {
                            rule.options = res;
                        });
                    }
                }
                $scope.ruleList[index] = rule;
                index++;


                setRuleList(rules, index);


                ruleOptions();
                if (rule.field.type === "MultiSelect")
                {
                    angular.forEach($scope.ruleList, function(item) {
                        var valueList = angular.copy(item.values);
                        item.multiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function(res) {
                                    $scope.optionsMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiple = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiple);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
//                                           
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};

                        item.multiselectSingleComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function(res) {
                                    $scope.optionsMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiple = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiple);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                if (rule.field.type === "Pointer") {
                    angular.forEach($scope.ruleList, function(item) {
                        var pointerId;
                        if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                            pointerId = rule.field.pointerId.replace("\"", "");
                        }
                        var valueList = angular.copy(item.values);
                        item.pointerMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                                    $scope.optionspointerMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultiplepointer = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionspointerMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultiplepointer);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};

                        item.pointerSingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                var pointerId = item.field.pointerId.replace("\"", "");
                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function(res) {
                                    $scope.optionsSingleSelectPointer = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatasinglepointer = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSingleSelectPointer, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatasinglepointer);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label

                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                if (rule.field.type === "SubEntity")
                {
                    angular.forEach($scope.ruleList, function(item) {

                        var pointerId;
                        if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                            pointerId = rule.field.pointerId.replace("\"", "");
                        }
                        var valueList = angular.copy(item.values);
                        item.subEntityMultiSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select ',
                            initSelection: function(element, callback) {
                                var data = [];

                                RuleService.retrieveDropListForSubEntity(item.field.id, function(res) {
                                    $scope.optionsSubentityMultiSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultipleSubEntity = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSubentityMultiSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultipleSubEntity);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {
                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};

                        item.subEntitySingleSelectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];

                                RuleService.retrieveDropListForSubEntity(item.field.id, function(res) {
                                    $scope.optionsSubentitySingleSelect = res;
                                    var codeList = [];
                                    codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                    var tempdatamultipleSubEntity = angular.copy(item.values);
                                    angular.forEach(codeList, function(codeId) {
                                        angular.forEach($scope.optionsSubentitySingleSelect, function(recipient) {
                                            if (codeId.toString() === recipient.value.toString()) {
                                                data.push({
                                                    id: recipient.value,
                                                    text: recipient.label
                                                });
                                            }
                                        });
                                    });
                                    callback(data);
                                    item.values = angular.copy(tempdatamultipleSubEntity);
                                });
                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                if (item.options.length !== 0) {

                                    $scope.names = angular.copy(item.options);
                                    angular.forEach(item.options, function(item) {
                                        $scope.names.push({
                                            id: item.value,
                                            text: item.label
                                        });
                                    });
                                }
                                query.callback({
                                    results: $scope.names
                                });
                            }};
                    });
                }

                // This method is for edit dropdown component
                if (rule.field.type === "Dropdown")
                {
                    angular.forEach($scope.ruleList, function(item) {
                        if (rule.id === item.id) {
                            var valueList = angular.copy(item.values);
                            item.dropdownMultiSelectComponent = {
                                multiple: true,
                                closeOnSelect: false,
                                placeholder: 'Select ',
                                initSelection: function(element, callback) {
                                    var data = [];
                                    var success = function(res) {
                                        $scope.optionsDropdown = res;
                                        var codeList = [];
                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                        var tempdatadropdown = angular.copy(item.values);
                                        angular.forEach(codeList, function(codeId) {
                                            angular.forEach($scope.optionsDropdown, function(recipient) {
                                                if (codeId.toString() === recipient.value.toString()) {
                                                    data.push({
                                                        id: recipient.value,
                                                        text: recipient.label
                                                    });
                                                }
                                            });
                                        });
                                        callback(data);
                                        item.values = angular.copy(tempdatadropdown);
                                    };
                                    var failure = function()
                                    {
                                    };

                                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else {
                                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                        {
                                            var dbFieldName = rule.field.dbFieldName;
                                            RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                        } else {
                                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                        }
                                    }
                                }
                                ,
                                formatResult: function(item) {
                                    return item.text;
                                },
                                formatSelection: function(item) {
                                    return item.text;
                                },
                                query: function(query) {
                                    var selected = query.term;
                                    $scope.names = [];
                                    if (item.options.length !== 0) {
                                        $scope.names = angular.copy(item.options);
                                        angular.forEach(item.options, function(item) {
                                            $scope.names.push({
                                                id: item.value,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                }};
                            // For multiselect Single Select
                            item.dropdownSingleSelectComponent = {
                                multiple: true,
                                closeOnSelect: false,
                                placeholder: 'Select',
                                maximumSelectionSize: 1,
                                initSelection: function(element, callback) {

                                    var success = function(res) {
                                        var data = [];
                                        $scope.optionsDropdown = res;
                                        var codeList = [];
                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                        var tempdatadropdown = angular.copy(item.values);
                                        angular.forEach(codeList, function(codeId) {
                                            angular.forEach($scope.optionsDropdown, function(recipient) {
                                                if (codeId.toString() === recipient.value.toString()) {
                                                    data.push({
                                                        id: recipient.value,
                                                        text: recipient.label
                                                    });
                                                }
                                            });
                                        });
                                        callback(data);
                                        item.values = angular.copy(tempdatadropdown);
                                    };
                                    var failure = function()
                                    {
                                    };
                                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    }
                                    else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.version + "}", success, failure);
                                    } else {
                                        if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                        {
                                            var dbFieldName = rule.field.dbFieldName;
                                            RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                        } else {
                                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                        }
                                    }
                                }
                                ,
                                formatResult: function(item) {
                                    return item.text;
                                },
                                formatSelection: function(item) {
                                    return item.text;
                                },
                                query: function(query) {
                                    var selected = query.term;
                                    $scope.names = [];
                                    if (item.options.length !== 0) {
                                        $scope.names = angular.copy(item.options);
                                        angular.forEach(item.options, function(item) {
                                            $scope.names.push({
                                                id: item.value,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                }};
                        }
                    });
                }
                if (rule.field.type === 'UserMultiSelect')
                {
                    angular.forEach($scope.ruleList, function(item) {
                        var validationPattern = item.field.validationPattern;
                        var isEmployee = false;
                        var isDepartment = false;
                        var isDesignation = false;
                        var validationsArr = validationPattern.replace("{", "")
                                .replace("}", "")
                                .split(",");
                        angular.forEach(validationsArr, function(valArr)
                        {
                            if (valArr.indexOf("\"isEmployee\":") > -1)
                            {
                                isEmployee = true;
                            }
                            if (valArr.indexOf("\"isDepartment\":") > -1)
                            {
                                isDepartment = true;
                            }
                            if (valArr.indexOf("\"isDesignation\":") > -1)
                            {
                                isDesignation = true;
                            }
                        });
                        // This method is for edit and single select i.e when the operator label is  "has any value from"
                        item.userMultiselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            initSelection: function(element, callback) {
                                var data = [];
                                var tempdatamultiple = angular.copy(item.values);
                                var array = item.values.toString().split(',');
                                var newArray = [];
                                if (array !== undefined) {
                                    angular.forEach(array, function(arr)
                                    {
                                        arr = arr.replace("\"", "").trim();
                                        newArray.push(arr);
                                    });
                                    CustomFieldService.defaultSelection(newArray, function(res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        item.values = angular.copy(tempdatamultiple);
                                    }, function() {
                                    });
                                }

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label
                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);
                                }
                            }
                        };
                        item.values = item.values.toString();

                        // This method is for edit and single select i.e when the operator label is not "has any value from"

                        item.userSingleselectComponent = {
                            multiple: true,
                            closeOnSelect: false,
                            placeholder: 'Select',
                            maximumSelectionSize: 1,
                            initSelection: function(element, callback) {
                                var data = [];
                                var tempdata = angular.copy(item.values);
                                var array = item.values.toString().split(',');
                                var newArray = [];
                                if (array !== undefined) {
                                    angular.forEach(array, function(arr)
                                    {
                                        arr = arr.replace("\"", "").trim();
                                        newArray.push(arr);
                                    });
                                    CustomFieldService.defaultSelection(newArray, function(res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        item.values = angular.copy(tempdata);
                                    }, function() {
                                    });
                                }

                            },
                            formatResult: function(item) {
                                return item.text;
                            },
                            formatSelection: function(item) {
                                return item.text;
                            },
                            query: function(query) {
                                var selected = query.term;
                                $scope.names = [];
                                var success = function(data) {
                                    if (data.length !== 0) {
                                        $scope.names = data;
                                        angular.forEach(data, function(item) {
                                            $scope.names.push({
                                                id: item.value + ":" + item.description,
                                                text: item.label

                                            });
                                        });
                                    }
                                    query.callback({
                                        results: $scope.names
                                    });
                                };
                                var failure = function() {
                                };
                                if (isEmployee && selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveUserList(search.trim(), success, failure);
                                } else if (isDepartment && selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveDepartmentList(search.trim(), success, failure);
                                } else if (isDesignation && selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveRoleList(search.trim(), success, failure);
                                } else if (selected.substring(0, 2) === '@A' || selected.substring(0, 2) === '@a') {
                                    var search = query.term.slice(2);
                                    Messaging.retrieveActivityList(search.trim(), success, failure);
                                } else {
                                    query.callback({
                                        results: $scope.names
                                    });
                                }
                            }
                        };
                    });
                }
            }
            $scope.cancelNotification = function() {
                $scope.notification = {};
                $scope.notificationToSave = {};
                $scope.endRepeat = {};
                $scope.allRules = [];
                $scope.ruleList = [];
                $scope.ruleSetId = '';
                $scope.submitted = false;
                $scope.recipients = [];
                $("#invitees").select2('val', []);
                $scope.retrieveNotificationsList();
                $scope.initData();
                $scope.operationFlag = 'add';
                $scope.dynamicNotificationData = {};
                $('#scrollable-dropdown-menu.typeahead').typeahead('val', '');
                $scope.notificationForm.$setPristine();
            };
            $scope.retrieveNotificationsList = function() {
                NotificationService.retrieveAllNotificationConfigurations(function(data) {
                    $scope.notificationList = data;
                    var catList = [{id: 0, displayName: 'Web', selected: false, categoryCount: 0}, {id: 1, displayName: 'Email', selected: false, categoryCount: 0}];
                    for (i = 0; i < $scope.notificationList.length; i++) {
                        var typeString = "";
                        if ($scope.notificationList[i].interfaceEType) {
                            typeString += "Email, ";
                            catList[1].categoryCount = catList[1].categoryCount + 1;
                        }

                        if ($scope.notificationList[i].interfaceWType) {
                            typeString += "Web, ";
                            catList[0].categoryCount = catList[0].categoryCount + 1;
                        }

                        typeString = typeString.replace(/,\s*$/, "");
                        $scope.notificationList[i].typeString = typeString;
                    }
                    $scope.categoryList = catList;
                }, function() {
                    console.log("Failure");
                });
            };
            $scope.selectCategory = function() {
                $scope.viewListData = [];
                $scope.operationFlag = 'view';
                if ($scope.selectedCategory.currentNode.id == 0) {
                    angular.forEach($scope.notificationList, function(item) {
                        if (item.interfaceWType) {
                            $scope.viewListData.push(item);
                        }
                    });
                } else if ($scope.selectedCategory.currentNode.id == 1) {
                    angular.forEach($scope.notificationList, function(item) {
                        if (item.interfaceEType) {
                            $scope.viewListData.push(item);
                        }
                    });
                }
            };

            $scope.editNotification = function(notif) {
                $scope.operationFlag = 'edit';
                var copyData = angular.copy(notif);
                if (!!copyData) {
                    $scope.endRepeat = {};
                    $scope.notification = {};

                    $scope.notification.id = copyData.id;
                    $scope.notification.name = copyData.name;
                    $scope.notification.desc = copyData.desc;
                    $scope.notification.copyOf = copyData;
                    $scope.notification.repeatativeMode = copyData.repeatativeMode;
                    $scope.notification.weeklyOnDays = copyData.weeklyOnDays;
                    $scope.notification.monthlyOnDay = copyData.monthlyOnDay;
                    $scope.notification.endRepeatMode = copyData.endRepeatMode;
                    $scope.notification.endDate = copyData.endDate;
                    if (!!copyData.activity) {
                        $scope.notification.activity = copyData.activity.toString();
                    }
                    $scope.retrieveServices();
                    $scope.notification.service = copyData.service;
                    if ($scope.notification.endRepeatMode == "AD")
                        $scope.endRepeat.afterDaysUnits = copyData.afterUnits;
                    if ($scope.notification.endRepeatMode == "AR")
                        $scope.endRepeat.afterRepititionsUnits = copyData.afterUnits;
                    var vals = copyData.taskRecipients;
                    $scope.notification.repetitionCount = copyData.repetitionCount;
                    $scope.notification.basedOn = copyData.basedOn;
                    $scope.notification.interfaceEType = copyData.interfaceEType;
                    $scope.notification.interfaceETypeText = copyData.interfaceETypeText;
                    $scope.notification.interfaceWType = copyData.interfaceWType;
                    $scope.notification.interfaceWTypeText = copyData.interfaceWTypeText;
//                    $scope.notification.interfaceSType = copyData.interfaceSType;
//                    $scope.notification.interfaceSTypeText = copyData.interfaceSTypeText;
                    $scope.notification.atTime = copyData.atTime;
                    $scope.recipients = copyData.taskRecipientDataBeanList;
                    $scope.dynamicNotificationData = copyData.taskCustom;
                    angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                    {
                        if ($scope.dynamicNotificationData.hasOwnProperty(listOfModel))
                        {
                            if ($scope.dynamicNotificationData[listOfModel] !== null && $scope.dynamicNotificationData[listOfModel] !== undefined)
                            {
                                $scope.dynamicNotificationData[listOfModel] = new Date($scope.dynamicNotificationData[listOfModel]);
                            } else
                            {
                                $scope.dynamicNotificationData[listOfModel] = '';
                            }
                        }
                    })
                    if (!!copyData.ruleSet && !!copyData.ruleSet.rules) {

                        $scope.ruleSetId = copyData.ruleSet.id;
                        $scope.allRules = copyData.ruleSet.rules;
                        $scope.notification.apply = copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1].apply;
                        setRuleObject(copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1]);
                    }
                    if ($scope.notification.repeatativeMode === 'W') {
                        var weekDays = $scope.notification.weeklyOnDays.split("|");
                        var count = 0;
                        angular.forEach($scope.weekList, function(week, index) {
                            if (week.value === weekDays[count]) {
                                week.isChecked = "true";
                                count++;
                            }
                        });
                    }
                    $("#invitees").select2('val', []);
                }
            };
            $scope.addClick = function() {
                $scope.notification = {};
                $scope.notificationToSave = {};
                $scope.endRepeat = {};
                $scope.allRules = [];
                $scope.ruleList = [];
                $scope.submitted = false;

                $scope.recipients = [];
                $("#invitees").select2('val', []);
                $scope.notificationList = [];
                $scope.retrieveNotificationsList();

                $scope.operationFlag = 'add';
                $scope.displaySearchedNotification = 'view';
                $scope.initData();
                $scope.dynamicNotificationData = {};
                $('#scrollable-dropdown-menu.typeahead').typeahead('val', '');
                $scope.notificationForm.$setPristine();
            };

            $scope.editFromSearch = function(searchVal) {
                $rootScope.maskLoading();
                NotificationService.retrieveNotificationConfigurationById(searchVal, function(data) {
                    $rootScope.unMaskLoading();
                    $scope.operationFlag = 'edit';
                    var copyData = angular.copy(data);
                    if (!!copyData) {
                        $scope.endRepeat = {};
                        $scope.notification = {};

                        $scope.notification.id = copyData.id;
                        $scope.notification.name = copyData.name;
                        $scope.notification.desc = copyData.desc;
                        $scope.notification.copyOf = copyData;
                        $scope.notification.repeatativeMode = copyData.repeatativeMode;
                        $scope.notification.weeklyOnDays = copyData.weeklyOnDays;
                        $scope.notification.monthlyOnDay = copyData.monthlyOnDay;
                        $scope.notification.endRepeatMode = copyData.endRepeatMode;
                        $scope.notification.endDate = copyData.endDate;
                        if (!!copyData.activity) {
                            $scope.notification.activity = copyData.activity.toString();
                        }
                        $scope.retrieveServices();
                        $scope.notification.service = copyData.service;
                        if ($scope.notification.endRepeatMode == "AD")
                            $scope.endRepeat.afterDaysUnits = copyData.afterUnits;
                        if ($scope.notification.endRepeatMode == "AR")
                            $scope.endRepeat.afterRepititionsUnits = copyData.afterUnits;
                        var vals = copyData.taskRecipients;
                        $scope.notification.repetitionCount = copyData.repetitionCount;
                        $scope.notification.basedOn = copyData.basedOn;
                        $scope.notification.interfaceEType = copyData.interfaceEType;
                        $scope.notification.interfaceETypeText = copyData.interfaceETypeText;
                        $scope.notification.interfaceWType = copyData.interfaceWType;
                        $scope.notification.interfaceWTypeText = copyData.interfaceWTypeText;
//                        $scope.notification.interfaceSType = copyData.interfaceSType;
//                        $scope.notification.interfaceSTypeText = copyData.interfaceSTypeText;
                        $scope.notification.atTime = copyData.atTime;
                        $scope.recipients = copyData.taskRecipientDataBeanList;
                        $scope.dynamicNotificationData = copyData.taskCustom;
                        if (!!$scope.dynamicNotificationData) {
                            angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                            {
                                if ($scope.dynamicNotificationData.hasOwnProperty(listOfModel))
                                {
                                    if ($scope.dynamicNotificationData[listOfModel] !== null && $scope.dynamicNotificationData[listOfModel] !== undefined)
                                    {
                                        $scope.dynamicNotificationData[listOfModel] = new Date($scope.dynamicNotificationData[listOfModel]);
                                    } else
                                    {
                                        $scope.dynamicNotificationData[listOfModel] = '';
                                    }
                                }
                            })
                        }
                        if (!!copyData.ruleSet && !!copyData.ruleSet.rules) {
                            $scope.ruleSetId = copyData.ruleSet.id;
                            $scope.allRules = copyData.ruleSet.rules;
                            $scope.notification.apply = copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1].apply;
                            setRuleObject(copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1]);
                        }
                        if ($scope.notification.repeatativeMode === 'W') {
                            var weekDays = $scope.notification.weeklyOnDays.split("|");
                            var count = 0;
                            angular.forEach($scope.weekList, function(week, index) {
                                if (week.value === weekDays[count]) {
                                    week.isChecked = "true";
                                    count++;
                                }
                            });
                        }
                        $("#invitees").select2('val', []);
                    }
                }, function() {
                    $rootScope.unMaskLoading();
                    console.log("Failed..");
                });
            };

            $scope.getSearchedNotificationRecords = function(list) {
                $scope.searchRecords = [];
                var enteredText = $('#scrollable-dropdown-menu.typeahead').typeahead('val');
                if (enteredText.length > 0) {
                    if (enteredText.length < 3) {
                        $scope.searchRecords = [];
                    } else {
                        if (list !== null && angular.isDefined(list) && list.length > 0) {
                            angular.forEach(list, function(item) {
                                var types = "";
                                if (item.interfaceEType)
                                    types = types + "Email ,";
                                if (item.interfaceWType)
                                    types = types + "Web ,";
//                                if (item.interfaceSType)
//                                    types = types + "Sms ,";
                                types = types.replace(/,\s*$/, "");
                                item.types = types;
                                $scope.searchRecords.push(item);

                            });
                        }
                    }
//                    $scope.resetSelection();
                    $scope.displaySearchedNotification = 'search';
                    $scope.operationFlag = 'searchFromMenu';
//                    $scope.editGoalTemplate = true;
                }
            };

            $scope.editGoalTemplateFromSearch = function(id) {
                $scope.displaySearchedNotification = 'view';
                $scope.operationFlag = 'edit';
                $rootScope.maskLoading();
                NotificationService.retrieveNotificationConfigurationById(id, function(data) {
                    $rootScope.unMaskLoading();
                    var copyData = angular.copy(data);
                    if (!!copyData) {
                        $scope.endRepeat = {};
                        $scope.notification = {};

                        $scope.notification.id = copyData.id;
                        $scope.notification.name = copyData.name;
                        $scope.notification.desc = copyData.desc;
                        $scope.notification.copyOf = copyData;
                        $scope.notification.repeatativeMode = copyData.repeatativeMode;
                        $scope.notification.weeklyOnDays = copyData.weeklyOnDays;
                        $scope.notification.monthlyOnDay = copyData.monthlyOnDay;
                        $scope.notification.endRepeatMode = copyData.endRepeatMode;
                        $scope.notification.endDate = copyData.endDate;
                        if (!!copyData.activity) {
                            $scope.notification.activity = copyData.activity.toString();
                        }
                        $scope.retrieveServices();
                        $scope.notification.service = copyData.service;
                        if ($scope.notification.endRepeatMode == "AD")
                            $scope.endRepeat.afterDaysUnits = copyData.afterUnits;
                        if ($scope.notification.endRepeatMode == "AR")
                            $scope.endRepeat.afterRepititionsUnits = copyData.afterUnits;
                        var vals = copyData.taskRecipients;
                        $scope.notification.repetitionCount = copyData.repetitionCount;
                        $scope.notification.basedOn = copyData.basedOn;
                        $scope.notification.interfaceEType = copyData.interfaceEType;
                        $scope.notification.interfaceETypeText = copyData.interfaceETypeText;
                        $scope.notification.interfaceWType = copyData.interfaceWType;
                        $scope.notification.interfaceWTypeText = copyData.interfaceWTypeText;
//                        $scope.notification.interfaceSType = copyData.interfaceSType;
//                        $scope.notification.interfaceSTypeText = copyData.interfaceSTypeText;
                        $scope.notification.atTime = copyData.atTime;
                        $scope.recipients = copyData.taskRecipientDataBeanList;
                        $scope.dynamicNotificationData = copyData.taskCustom;
                        if (!!$scope.dynamicNotificationData) {
                            angular.forEach($scope.listOfModelsOfDateType, function(listOfModel)
                            {
                                if ($scope.dynamicNotificationData.hasOwnProperty(listOfModel))
                                {
                                    if ($scope.dynamicNotificationData[listOfModel] !== null && $scope.dynamicNotificationData[listOfModel] !== undefined)
                                    {
                                        $scope.dynamicNotificationData[listOfModel] = new Date($scope.dynamicNotificationData[listOfModel]);
                                    } else
                                    {
                                        $scope.dynamicNotificationData[listOfModel] = '';
                                    }
                                }
                            })
                        }
                        if (!!copyData.ruleSet && !!copyData.ruleSet.rules) {
                            $scope.ruleSetId = copyData.ruleSet.id;
                            $scope.allRules = copyData.ruleSet.rules;
                            $scope.notification.apply = copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1].apply;
                            setRuleObject(copyData.ruleSet.rules[copyData.ruleSet.rules.length - 1]);
                        }
                        if ($scope.notification.repeatativeMode === 'W') {
                            var weekDays = $scope.notification.weeklyOnDays.split("|");
                            var count = 0;
                            angular.forEach($scope.weekList, function(week, index) {
                                if (week.value === weekDays[count]) {
                                    week.isChecked = "true";
                                    count++;
                                }
                            });
                        }
                        $("#invitees").select2('val', []);
                    }
                }, function() {
                    $rootScope.unMaskLoading();
                    console.log("Failed..");
                });
            };
            $scope.clearFromRadio = function() {
                if ($scope.notification.endRepeatMode === "OD") {
                    $scope.endRepeat.afterDaysUnits = "";
                    $scope.endRepeat.afterRepititionsUnits = "";
                } else if ($scope.notification.endRepeatMode === "AD") {
                    $scope.endRepeat.endDate = null;
                    $scope.endRepeat.afterRepititionsUnits = "";
                } else if ($scope.notification.endRepeatMode === "AR") {
                    $scope.endRepeat.endDate = null;
                    $scope.endRepeat.afterDaysUnits = "";
                }
            };
            $scope.getValueToDisplay = function(ruleData) {
                if (ruleData.field.type === 'Dropdown') {
                    if (!!ruleData.options) {
                        for (var index = 0; index < ruleData.options.length; index++) {
                            if (ruleData.values == ruleData.options[index].value) {
                                return ruleData.options[index].label;
                            }
                        }
                    }
                } else {
                    var val = "";
                    if (!!ruleData.values) {
                        for (var index = 0; index < ruleData.values.length; index++) {
                            val += "" + ruleData.values[index] + ", ";
                        }
                        val = val.replace(/,\s*$/, "");
                    }
                    return val;
                }
            };

            $scope.retrieveServices = function() {

                if (!!$scope.mapOfActivitySerice) {
                    if (!!$scope.notification.activity) {
                        $scope.service = $scope.mapOfActivitySerice[$scope.notification.activity.toString()];
                    }
                }
            };
            $scope.showNotifications = function() {
                $location.path("/managenotification");
            };
            $rootScope.unMaskLoading();
        }]);
});

