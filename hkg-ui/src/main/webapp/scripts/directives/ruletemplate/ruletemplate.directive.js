/**
 * 
 * Author: Gautam
 * 
 * 
 */

define(['angular', 'ruleService', 'assetService', 'ruleField', 'customFieldService', 'messageService', 'activityFlowService'], function () {
    globalProvider.compileProvider.directive('ruleTemplate',
            ['$rootScope', '$filter', '$templateCache', 'RuleService', 'ActivityFlowService', 'Messaging', 'CustomFieldService', 'AssetService', function ($rootScope, $filter, $templateCache, RuleService, ActivityFlowService, Messaging, CustomFieldService, AssetService) {

                    var scope = {
                        rulesetObject: '=?',
                        entityId: '=?'
                    };

                    var link = function (scope, element, attrs) {

                    };

                    var controller = ["$scope", "$element", "$attrs", "$rootScope", "$timeout", "$filter", "$location", "$window", "$log", function ($scope, $element, $attrs, $rootScope, $timeout, $filter, $location, $window, $log) {

                            //-------------rule variables---------------//
                            $scope.rulesubmitted = false;
//            $scope.priorityList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
                            $scope.applyList = ["All", "Any"];
                            $scope.ruleObject = {};
                            $scope.ruleObject.ruleList = [];
                            $scope.allRules = [];
                            $scope.isEditRule = false;
                            $scope.rulesetid = null;
                            $scope.editRule = false;
                            $scope.entityId = undefined;
                            $scope.popover =
                                    "<NOBR><font color='red;'>Use the shortcuts to search</font></NOBR><br/><table cellpadding='0' cellspacing='0'><tr><td>\ " +
                                    +"\n\ " +
                                    +"'@D'  </td> <td> &nbsp;  &nbsp;</td><td align='left'>Departments</td></tr>\ " +
                                    +"<tr><td>'@E'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Employees</td></tr>\ " +
                                    +"<tr><td>'@R'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Roles</td></tr>\ " +
                                    +"<tr><td>'@G'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Groups</td></tr>\ " +
                                    +"<tr><td>'@A'  </td> <td> &nbsp; &nbsp;</td><td align='left'>Activities</td></tr>\ " +
                                    +"</table>";
                            $scope.status = [{"id": true, "name": "Active"}, {"id": false, "name": "InActive"}];

                            $scope.entityList = {};
                            $scope.selectedRule = null;
                            $scope.lastRuleId = 0;
                            $scope.operators = {};
                            var operatorMap = {"Number": "Numeric",
                                "Text field": "String",
                                "Text area": "String",
                                "Dropdown": "String",
                                "Radio button": "String",
                                "Date": "Date",
                                "Datepicker": "Date",
                                "Date range": "Date range",
                                "Time": "Date",
                                "Time range": "Date range",
                                "Password": "String",
                                "Currency": "Numeric",
                                "Decimal": "Numeric",
                                "Email": "String",
                                "Phone": "String",
                                "Checkbox": "Boolean",
                                "Percent": "Numeric",
                                "Formula": "Numeric",
                                "Pointer": "Numeric",
                                "AutoGenerated": "Boolean",
                                "MultiSelect": "String",
                                "UserMultiSelect": "String",
                                "Angle": "Numeric",
                                "Image": "Image",
                                "Upload": "Image"
                            };
                            //---------------Rule variables end--------//


                            $scope.$on('$viewContentLoaded', function () {
//                                $scope.initializeActivityFlow();
                            });

                            if (angular.isDefined($attrs.onlyCriteria)) {
                                try {
                                    $scope.onlyCriteria = JSON.parse($attrs.onlyCriteria.toLowerCase());
                                } catch (exception) {
                                    $scope.onlyCriteria = false;
                                    console.log('Can not parse onlyCriteria' + exception);
                                }
                            } else {
                                $scope.onlyCriteria = false;
                            }
                            console.log('onlyCriteria----' + $scope.onlyCriteria);

                            //------------------------------------------ Rule Functions -----------------------------------------//
                            $scope.initializeRuleConfig = function (e) {
//                                $log.info("rules popup show event");
                                initAddRule();
//                $scope.rulesetid = $rootScope.ruleSetId;
//                if ($scope.rulesetid !== undefined && $scope.rulesetid !== null) {
//                    $rootScope.ruleSetId = null;
//                    $scope.isEditRule = true;
                                if ($scope.rulesetObject !== undefined && $scope.rulesetObject !== null && $scope.rulesetObject.length > 0) {


                                    $scope.allRules = angular.copy($scope.rulesetObject);
                                    console.log(JSON.stringify($scope.rulesetObject));
                                    angular.forEach($scope.allRules, function (allRule)
                                    {
                                        for (var j = 0; j < allRule.criterias.length; j++) {

                                            if (allRule.criterias[j].fieldType === "UserMultiSelect" || allRule.criterias[j].fieldType === "MultiSelect" || allRule.criterias[j].fieldType === "Dropdown" || allRule.criterias[j].fieldType === "Pointer" || allRule.criterias[j].fieldType === "SubEntity")
                                            {
//                                    if (allRule.criterias[j].value.toString().indexOf("[") > -1 && allRule.criterias[j].value.toString().indexOf("]") > -1)
//                                    {
                                                allRule.criterias[j].value = angular.copy(allRule.criterias[j].value.toString().replace("[", "").replace("]", ""));
//                                    }
                                            }
                                        }
                                    });

                                }
//
//                    });
//                }
//                $scope.$apply();

                            };
                            var initializeRule = function () {
                                var rule = {};
                                rule.entity = "";
                                rule.field = "";
                                rule.operator = "";
                                rule.options = null;
                                rule.operatorList = [];
                                rule.fieldList = [];
                                rule.rowsubmitted = false;
                                rule.hint = "Enter value";
//                rule.priority = null;
                                rule.values = [];
                                return rule;
                            }
                            var initializeRuleObject = function () {
                                $scope.ruleObject = {};
                                $scope.ruleObject.ruleList = [];
                                var rule = initializeRule();
                                $scope.ruleObject.ruleList.push(rule);
                                $scope.ruleObject.remarks = "";
//                                $scope.ruleObject.id = null;
                                rule.rowsubmitted = false;
                                $scope.ruleObject.isActive = true;
                                $scope.ruleObject.ruleName = "";
                                $scope.ruleObject.apply = "All";
                            }
                            var initAddRule = function () {
                                $scope.allRules = [];
                                RuleService.retrievePrerequisite(function (res) {
                                    console.log(res.entity);
                                    $scope.entityListFromDb = angular.copy(res.entity);
                                    $scope.entityListWithField = {};
                                    $scope.entityListWithOutField = {};
                                    for (var key in $scope.entityListFromDb) {
                                        if (parseInt(key) > 0) {
                                            $scope.entityListWithField[key] = $scope.entityListFromDb[key];
                                        } else {
                                            $scope.entityListWithOutField[key] = $scope.entityListFromDb[key];
                                        }
                                    }
                                    $scope.entityList = res.entity;
                                    if (!!!$scope.entityList) {
                                        $scope.entityList = {};
                                    }
                                    $scope.operators = res.operator;
                                });
                                initializeRuleObject();
                                $scope.displayFlag = 'create';
                            };
                            function setRuleObject(src) {
                                $scope.ruleObject = {};
                                $scope.ruleObject.ruleList = [];
                                if (src !== null && src !== undefined) {
                                    $scope.ruleObject.id = src.id;
                                    $scope.ruleObject.isActive = src.isActive;
                                    $scope.ruleObject.isArchive = src.isArchive;
                                    $scope.ruleObject.remarks = src.remarks;
                                    $scope.ruleObject.ruleName = src.ruleName;
                                    $scope.ruleObject.apply = src.apply;
                                    $scope.ruleObject.ruleNumber = src.ruleNumber;
                                    var max = 0;
                                    for (var i = 0; i < src.criterias.length; i++) {
                                        if (src.criterias[i].id > max)
                                            max = src.criterias[i].id;
                                    }
//                    $log.info("max=        "+max);
                                    $scope.lastRuleId = max;
                                    setRuleList(src.criterias, 0);
                                }


                            }
                            function setRuleList(rules, index) {
                                if (index < rules.length && rules[index] !== undefined) {
                                    var rule = {};
                                    rule.values = [];
                                    rule.options = null;
                                    rule.hint = "Enter value";
                                    if (rules[index].fieldType === "Date range") {
                                        rule.values[0] = rules[index].value.split(',')[0];
                                        rule.values[1] = rules[index].value.split(',')[1];
                                        if (rules[index].value1 !== null) {
                                            rule.values[2] = rules[index].value1.split(',')[0];
                                            rule.values[3] = rules[index].value1.split(',')[1];
                                        }
                                    } else {
                                        if (rules[index].fieldType !== "Pointer" && rules[index].fieldType !== "SubEntity") {
                                            if (rules[index].fieldType === "MultiSelect" || rules[index].fieldType === "Dropdown")
                                            {
                                                rule.values = rules[index].value;

//                            if (rules[index].value1 !== null) {
//                                rule.values[1] = rules[index].value1;
//                            }
                                            }
                                            else
                                            {
                                                rule.values[0] = rules[index].value;

                                                if (rules[index].value1 !== null) {
                                                    rule.values[1] = rules[index].value1;
                                                }
                                            }
                                        }
                                        else if (rules[index].fieldType === "SubEntity") {
                                            if (rules[index].subentityComponentType !== "Date")
                                            {
                                                rule.values = rules[index].value;

//                            if (rules[index].value1 !== null) {
//                                rule.values[1] = rules[index].value1;
//                            }
                                            }
                                            else
                                            {
                                                rule.values[0] = rules[index].value;

                                                if (rules[index].value1 !== null) {
                                                    rule.values[1] = rules[index].value1;
                                                }
                                            }
                                        }

                                        else
                                        {
                                            if (rules[index].pointerComponentType === "MultiSelect" || rules[index].pointerComponentType === "Dropdown")
                                            {
                                                rule.values = rules[index].value;
                                            }
                                            else
                                            {
                                                rule.values[0] = rules[index].value;

                                                if (rules[index].value1 !== null) {
                                                    rule.values[1] = rules[index].value1;
                                                }
                                            }
                                        }
                                    }
                                    rule.id = rules[index].id;
//                    rule.priority = rules[index].priority;
                                    rule.entity = rules[index].entity.toString();
                                    var id = rules[index].field;
                                    var operator = rules[index].operator;
                                    if (parseInt(rule.entity) < 0) {
                                        if (parseInt(rule.entity) >= -3 && parseInt(rule.entity) <= -1) {
                                            rule.fieldList = $scope.fieldListForAct;
                                        } else {
                                            rule.fieldList = $scope.fieldListForSer;
                                        }
                                        if (rule.fieldList !== undefined && rule.fieldList !== null) {
                                            $.grep(rule.fieldList, function (e, i) {
                                                if (e.id == id) {
                                                    rule.field = rule.fieldList[i];
                                                    return true;
                                                }
                                            });
                                        }
                                        tmp(rule, operator, rules, index);
                                    } else {
                                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + rule.entity + "}", function (res) {
//                            $log.info("field list: " + JSON.stringify(res));
                                            rule.fieldList = res;
                                            $.grep(rule.fieldList, function (e, i) {
                                                if (e.id == id) {
                                                    rule.field = rule.fieldList[i];
                                                    return true;
                                                }
                                            });
                                            tmp(rule, operator, rules, index);
                                        });
                                    }
                                }
                            }
                            function ruleOptions(rule)
                            {
                                if (rule.field !== undefined && rule.field !== null && rule.field.type === "MultiSelect") {
                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function (res) {
                                        rule.options = res;
                                    });
                                }
                            }
                            function tmp(rule, operator, rules, index) {

                                rule.operatorList = [];
                                if (rule.field !== undefined && rule.field !== null && rule.field.type !== "SubEntity") {
                                    rule.operatorList = $scope.operators[operatorMap[rule.field.type]];
                                }
                                else if (rule.field !== undefined && rule.field !== null && rule.field.type === "SubEntity")
                                {
                                    rule.operatorList = $scope.operators[operatorMap['Dropdown']];
                                } else if (!rule.field) {
                                    rule.operatorList.push({"label": "IsAbsentToday", "isActive": true, "shortcutCode": 1});
                                    rule.operatorList.push({"label": "AbsentWithoutInfo", "isActive": true, "shortcutCode": 1});
                                    rule.operatorList.push({"label": "RestrictByIP", "isActive": true, "shortcutCode": 1});
                                }
                                $.grep(rule.operatorList, function (e, i) {
                                    if (e.label === operator) {
                                        rule.operator = rule.operatorList[i];
                                        return true;
                                    }
                                });

                                if (rule.field !== undefined && rule.field !== null && (rule.field.type === "Dropdown" || rule.field.type === "Radio button" || rule.field.type === "MultiSelect")) {
                                    if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", function (res) {
                                            rule.options = res;
                                            $.grep(rule.options, function (e, i) {
                                                if (e.value === rule.value) {
                                                    rule.value[0] = rule.options[i];
                                                    return true;
                                                }
                                            });
                                            if (rule.value1 !== null) {
                                                $.grep(rule.options, function (e, i) {
                                                    if (e.value === rule.value1) {
                                                        rule.value[1] = rule.options[i];
                                                        return true;
                                                    }
                                                });
                                            }
                                        });
                                    } else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                        RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", function (res) {
                                            rule.options = res;
                                            $.grep(rule.options, function (e, i) {
                                                if (e.value === rule.value) {
                                                    rule.value[0] = rule.options[i];
                                                    return true;
                                                }
                                            });
                                            if (rule.value1 !== null) {
                                                $.grep(rule.options, function (e, i) {
                                                    if (e.value === rule.value1) {
                                                        rule.value[1] = rule.options[i];
                                                        return true;
                                                    }
                                                });
                                            }
                                        });
                                    } else {

                                        if (rule.field !== undefined && rule.field !== null && rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                        {
                                            var dbFieldName = rule.field.dbFieldName;
                                            RuleService.retrieveLotStatus(dbFieldName, function (res) {
                                                rule.options = res;
                                                $.grep(rule.options, function (e, i) {
                                                    if (e.value === rule.value) {
                                                        rule.value[0] = rule.options[i];
                                                        return true;
                                                    }
                                                });
                                                if (rule.value1 !== null) {
                                                    $.grep(rule.options, function (e, i) {
                                                        if (e.value === rule.value1) {
                                                            rule.value[1] = rule.options[i];
                                                            return true;
                                                        }
                                                    });
                                                }
                                            });


                                        }


                                        else {
                                            RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + rule.field.id + "}", function (res) {
                                                rule.options = res;
                                                if (rule.field !== undefined && rule.field !== null && rule.field.type !== "MultiSelect") {
                                                    $.grep(rule.options, function (e, i) {
                                                        if (e.value === rule.value) {
                                                            rule.value[0] = rule.options[i];
                                                            return true;
                                                        }
                                                    });
                                                    if (rule.value1 !== null) {
                                                        $.grep(rule.options, function (e, i) {
                                                            if (e.value === rule.value1) {
                                                                rule.value[1] = rule.options[i];
                                                                return true;
                                                            }
                                                        });
                                                    }
                                                }
                                            });
                                        }
                                    }
                                } else if (rule.field !== undefined && rule.field !== null && rule.field.type === "Checkbox") {
                                    rule.options = [{label: 'True', value: true}, {label: 'False', value: false}];
                                }
                                else if (rule.field !== undefined && rule.field !== null && rule.field.type === "Pointer")
                                {
                                    var pointerComponentType;
                                    var validationPattern = rule.field.validationPattern.replace("{", "")
                                            .replace("}", "");
                                    var validationsArr = [];
                                    var pointerArray = [];
                                    var pointerId;
                                    validationsArr = validationPattern.split(",");
                                    angular.forEach(validationsArr, function (validate)
                                    {
                                        if (validate.indexOf("\"pointer\":") > -1) {
                                            pointerArray = validate.split(":");
                                            pointerId = pointerArray[1].replace(/["']/g, "");
                                            rule.field.pointerId = pointerId;
                                        }
                                    });
                                    angular.forEach(rule.fieldList, function (fieldList)
                                    {
                                        if (fieldList.id.toString() === pointerId.toString())
                                        {
                                            pointerComponentType = fieldList.type;
                                            rule.field.pointertype = pointerComponentType;
                                        }
                                    });
                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function (res) {
                                        rule.options = res;
                                    });
                                }
                                else
                                if (rule.field !== undefined && rule.field !== null && rule.field.type === 'SubEntity')
                                {
                                    rule.field.subEntityType = "Dropdown";

                                    RuleService.retrieveDropListForSubEntity(rule.field.id, function (res) {
                                        rule.options = res;
                                    });
                                }
                                rule.showtemplate = false;
                                rule.showtemplate = true;

                                $scope.ruleObject.ruleList[index] = rule;
                                index++;


                                setRuleList(rules, index);


                                ruleOptions(rule);
                                if (rule.field !== undefined && rule.field !== null && rule.field.type === "MultiSelect")
                                {
                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        if (item.field.id === rule.field.id) {
                                            var valueList = angular.copy(item.values);
                                            item.multiselectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select ',
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function (res) {
                                                        $scope.optionsMultiSelect = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatamultiple = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionsMultiSelect, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};

                                            item.multiselectSingleComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select',
                                                maximumSelectionSize: 1,
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", function (res) {
                                                        $scope.optionsMultiSelect = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatamultiple = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionsMultiSelect, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};
                                        }
                                    });
                                }

                                if (rule.field !== undefined && rule.field !== null && rule.field.type === "Pointer")
                                {

                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        if (item.field.id === rule.field.id) {

                                            var pointerId;
                                            if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                                                pointerId = rule.field.pointerId.replace("\"", "");
                                            }
                                            var valueList = angular.copy(item.values)
                                            item.pointerMultiSelectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select ',
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function (res) {
                                                        $scope.optionspointerMultiSelect = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatamultiplepointer = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionspointerMultiSelect, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};

                                            item.pointerSingleSelectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select',
                                                maximumSelectionSize: 1,
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    var pointerId = item.field.pointerId.replace("\"", "");
                                                    RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function (res) {
                                                        $scope.optionsSingleSelectPointer = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatasinglepointer = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionsSingleSelectPointer, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};
                                        }
                                    });
                                }

                                if (rule.field !== undefined && rule.field !== null && rule.field.type === "SubEntity")
                                {

                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        if (item.field.id === rule.field.id) {

                                            var pointerId;
                                            if (rule.field.pointerId !== null && rule.field.pointerId !== undefined) {
                                                pointerId = rule.field.pointerId.replace("\"", "");
                                            }
                                            var valueList = angular.copy(item.values)
                                            item.subEntityMultiSelectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select ',
                                                initSelection: function (element, callback) {
                                                    var data = [];

                                                    RuleService.retrieveDropListForSubEntity(item.field.id, function (res) {
                                                        $scope.optionsSubentityMultiSelect = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatamultipleSubEntity = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionsSubentityMultiSelect, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};

                                            item.subEntitySingleSelectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select',
                                                maximumSelectionSize: 1,
                                                initSelection: function (element, callback) {
                                                    var data = [];

                                                    RuleService.retrieveDropListForSubEntity(item.field.id, function (res) {
                                                        $scope.optionsSubentitySingleSelect = res;
                                                        var codeList = [];
                                                        codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                        var tempdatamultipleSubEntity = angular.copy(item.values);
                                                        angular.forEach(codeList, function (codeId) {
                                                            angular.forEach($scope.optionsSubentitySingleSelect, function (recipient) {
                                                                if (codeId.toString() === recipient.value.toString()) {
                                                                    data.push({
                                                                        id: recipient.value,
                                                                        text: recipient.label
                                                                    });
                                                                }
                                                            });
                                                        });
                                                        callback(data);
                                                        item.values = angular.copy(codeList.toString());
                                                    });
                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
//                                           
                                                    if (item.options.length !== 0) {

                                                        $scope.names = angular.copy(item.options);
                                                        angular.forEach(item.options, function (item) {
                                                            $scope.names.push({
                                                                id: item.value,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
//                                            


                                                }};
                                        }
                                    });
                                }


                                // This method is for edit dropdown component
                                if (rule.field !== undefined && rule.field !== null && rule.field.type === "Dropdown")
                                {
                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        if (item.field.id === rule.field.id) {
                                            if (rule.id === item.id) {
                                                var valueList = angular.copy(item.values)
                                                item.dropdownMultiSelectComponent = {
                                                    multiple: true,
                                                    closeOnSelect: false,
                                                    placeholder: 'Select ',
                                                    initSelection: function (element, callback) {
                                                        var data = [];
                                                        var success = function (res) {
                                                            $scope.optionsDropdown = res;
                                                            var codeList = [];
                                                            codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                            var tempdatadropdown = angular.copy(item.values);
                                                            angular.forEach(codeList, function (codeId) {
                                                                angular.forEach($scope.optionsDropdown, function (recipient) {
                                                                    if (codeId.toString() === recipient.value.toString()) {
                                                                        data.push({
                                                                            id: recipient.value,
                                                                            text: recipient.label
                                                                        });
                                                                    }
                                                                });
                                                            });
                                                            callback(data);
                                                            item.values = angular.copy(codeList.toString());
                                                        }
                                                        var failure = function ()
                                                        {
                                                        }
                                                        if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                                            RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", success, failure);
                                                        }
                                                        else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                                            RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", success, failure)
                                                        }
                                                        else {
                                                            if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                                    || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                                    || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                                            {
                                                                var dbFieldName = rule.field.dbFieldName;
                                                                RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                                            } else {
                                                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                                            }
                                                        }
//                             

                                                    }
                                                    ,
                                                    formatResult: function (item) {
                                                        return item.text;
                                                    },
                                                    formatSelection: function (item) {
                                                        return item.text;
                                                    },
                                                    query: function (query) {
                                                        var selected = query.term;
                                                        $scope.names = [];
//                                           
                                                        if (item.options.length !== 0) {

                                                            $scope.names = angular.copy(item.options);
                                                            angular.forEach(item.options, function (item) {
                                                                $scope.names.push({
                                                                    id: item.value,
                                                                    text: item.label

                                                                });
                                                            });
                                                        }
                                                        query.callback({
                                                            results: $scope.names
                                                        });
//                                            


                                                    }};
                                                // For multiselect Single Select
                                                item.dropdownSingleSelectComponent = {
                                                    multiple: true,
                                                    closeOnSelect: false,
                                                    placeholder: 'Select',
                                                    maximumSelectionSize: 1,
                                                    initSelection: function (element, callback) {
                                                        var data = [];
                                                        var success = function (res) {
                                                            $scope.optionsDropdown = res;
                                                            var codeList = [];
                                                            codeList = angular.copy(valueList.toString().replace("[", "").replace("]", "").split(","));
                                                            var tempdatadropdown = angular.copy(item.values);
                                                            angular.forEach(codeList, function (codeId) {
                                                                angular.forEach($scope.optionsDropdown, function (recipient) {
                                                                    if (codeId.toString() === recipient.value.toString()) {
                                                                        data.push({
                                                                            id: recipient.value,
                                                                            text: recipient.label
                                                                        });
                                                                    }
                                                                });
                                                            });
                                                            callback(data);
                                                            item.values = angular.copy(codeList.toString());
                                                        }
                                                        var failure = function ()
                                                        {
                                                        }
                                                        if (parseInt(rule.entity) <= -1 && parseInt(rule.entity) >= -3 && parseInt(rule.field.id) !== -1) {
                                                            RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", success, failure);
                                                        }
                                                        else if (parseInt(rule.entity) <= -4 && parseInt(rule.entity) >= -6 && parseInt(rule.field.id) !== -1) {
                                                            RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", success, failure)
                                                        }
                                                        else {
                                                            if (rule.field.dbFieldName === 'lot_status' || rule.field.dbFieldName === 'packet_status' || rule.field.dbFieldName === 'status_of_plan'
                                                                    || rule.field.dbFieldName === 'parcel_status' || rule.field.dbFieldName === 'invoice_status'
                                                                    || rule.field.dbFieldName === 'issue_status' || rule.field.dbFieldName === 'type_of_plan')
                                                            {
                                                                var dbFieldName = rule.field.dbFieldName;
                                                                RuleService.retrieveLotStatus(dbFieldName, success, failure);
                                                            } else {
                                                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + item.field.id + "}", success, failure);
                                                            }
                                                        }
//                             

                                                    }
                                                    ,
                                                    formatResult: function (item) {
                                                        return item.text;
                                                    },
                                                    formatSelection: function (item) {
                                                        return item.text;
                                                    },
                                                    query: function (query) {
                                                        var selected = query.term;
                                                        $scope.names = [];
//                                           
                                                        if (item.options.length !== 0) {

                                                            $scope.names = angular.copy(item.options);
                                                            angular.forEach(item.options, function (item) {
                                                                $scope.names.push({
                                                                    id: item.value,
                                                                    text: item.label

                                                                });
                                                            });
                                                        }
                                                        query.callback({
                                                            results: $scope.names
                                                        });
//                                            


                                                    }};
                                            }
                                        }
                                    });
                                }
                                if (rule.field !== undefined && rule.field !== null && rule.field.type === 'UserMultiSelect')
                                {
                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        if (item.field.id === rule.field.id) {
                                            var validationPattern = item.field.validationPattern;
                                            var isEmployee = false;
                                            var isDepartment = false;
                                            var isDesignation = false;
                                            var validationsArr = validationPattern.replace("{", "")
                                                    .replace("}", "")
                                                    .split(",");
                                            angular.forEach(validationsArr, function (valArr)
                                            {
                                                if (valArr.indexOf("\"isEmployee\":") > -1)
                                                {
                                                    isEmployee = true;
                                                }
                                                if (valArr.indexOf("\"isDepartment\":") > -1)
                                                {
                                                    isDepartment = true;
                                                }
                                                if (valArr.indexOf("\"isDesignation\":") > -1)
                                                {
                                                    isDesignation = true;
                                                }
                                            });
                                            // This method is for edit and single select i.e when the operator label is  "has any value from"
                                            item.userMultiselectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select',
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    var tempdatamultiple = angular.copy(item.values);
                                                    var array = item.values.toString().split(',');
                                                    var newArray = [];
                                                    if (array !== undefined) {
                                                        angular.forEach(array, function (arr)
                                                        {
                                                            arr = arr.replace("\"", "").trim();
                                                            newArray.push(arr);
                                                        });
                                                        CustomFieldService.defaultSelection(newArray, function (res) {
                                                            var data = [];
                                                            $scope.result = JSON.parse(angular.toJson(res));
                                                            for (key in  $scope.result)
                                                            {
                                                                data.push({id: key, text: res[key]});
                                                            }
                                                            callback(data);
                                                            item.values = angular.copy(tempdatamultiple);
                                                        }, function () {
                                                        });
                                                    }

                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
                                                    var success = function (data) {
                                                        if (data.length !== 0) {
                                                            $scope.names = data;
                                                            angular.forEach(data, function (item) {
                                                                $scope.names.push({
                                                                    id: item.value + ":" + item.description,
                                                                    text: item.label

                                                                });
                                                            });
                                                        }
                                                        query.callback({
                                                            results: $scope.names
                                                        });
                                                    };
                                                    var failure = function () {
                                                    };
                                                    if (isEmployee) {
                                                        var search;
                                                        var searchEmp = false;
                                                        if (isDepartment === false && isDesignation === false)
                                                        {
                                                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                            {
                                                                searchEmp = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchEmp = true;
                                                                search = query.term;
                                                            }
                                                        } else
                                                        {
                                                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                            {
                                                                searchEmp = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchEmp === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"user": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveUserListFranchise(payload, success, failure);
//                                                        } else {
                                                            AssetService.retrieveUserList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    }
                                                    if (isDepartment) {
                                                        var search;
                                                        var searchDep = false;
                                                        if (isEmployee === false && isDesignation === false) {
                                                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                                                searchDep = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchDep = true;
                                                                search = query.term;
                                                            }
                                                        } else {
                                                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                                                searchDep = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchDep === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"department": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveDepartmentListFranchise(payload, success, failure);
//                                                        } else {
                                                            Messaging.retrieveDepartmentList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    }
                                                    if (isDesignation) {
                                                        var search;
                                                        var searchRole = false;
                                                        if (isEmployee === false && isDepartment === false)
                                                        {
                                                            if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r') {
                                                                searchRole = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchRole = true;
                                                                search = query.term;
                                                            }
                                                        } else
                                                        {
                                                            if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r') {
                                                                searchRole = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchRole === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"role": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveRoleListFranchise(payload, success, failure);
//                                                        } else {
                                                            Messaging.retrieveRoleList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    }
//                                else {
//                                    query.callback({
//                                        results: $scope.names
//                                    });
//                                }
                                                }
                                            };
                                            item.values = item.values.toString();

                                            // This method is for edit and single select i.e when the operator label is not "has any value from"

                                            item.userSingleselectComponent = {
                                                multiple: true,
                                                closeOnSelect: false,
                                                placeholder: 'Select',
                                                maximumSelectionSize: 1,
                                                initSelection: function (element, callback) {
                                                    var data = [];
                                                    var tempdata = angular.copy(item.values);

                                                    var array = item.values.toString().split(',');
                                                    var newArray = [];
                                                    if (array !== undefined) {
                                                        angular.forEach(array, function (arr)
                                                        {
                                                            arr = arr.replace("\"", "").trim();
                                                            newArray.push(arr);
                                                        });
                                                        CustomFieldService.defaultSelection(newArray, function (res) {
                                                            var data = [];
                                                            $scope.result = JSON.parse(angular.toJson(res));
                                                            for (key in  $scope.result)
                                                            {
                                                                data.push({id: key, text: res[key]});
                                                            }
                                                            callback(data);
                                                            item.values = angular.copy(tempdata);
                                                        }, function () {
                                                        });
                                                    }

                                                },
                                                formatResult: function (item) {
                                                    return item.text;
                                                },
                                                formatSelection: function (item) {
                                                    return item.text;
                                                },
                                                query: function (query) {
                                                    var selected = query.term;
                                                    $scope.names = [];
                                                    var success = function (data) {
                                                        if (data.length !== 0) {
                                                            $scope.names = data;
                                                            angular.forEach(data, function (item) {
                                                                $scope.names.push({
                                                                    id: item.value + ":" + item.description,
                                                                    text: item.label

                                                                });
                                                            });
                                                        }
                                                        query.callback({
                                                            results: $scope.names
                                                        });
                                                    };
                                                    var failure = function () {
                                                    };
                                                    if (isEmployee) {
                                                        var search;

                                                        var searchEmp = false;
                                                        if (isDepartment === false && isDesignation === false)
                                                        {

                                                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                            {
                                                                searchEmp = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchEmp = true;
                                                                search = query.term;
                                                            }
                                                        } else
                                                        {
                                                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                            {
                                                                searchEmp = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchEmp === true) {
//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"user": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveUserListFranchise(payload, success, failure);
//                                                        } else {
                                                            AssetService.retrieveUserList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    }

                                                    if (isDepartment) {
                                                        var searchDep = false;
                                                        var search;

                                                        if (isEmployee === false && isDesignation === false) {
                                                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                                                searchDep = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchDep = true;
                                                                search = query.term;
                                                            }
                                                        } else {
                                                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                                                searchDep = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchDep === true) {
//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"department": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveDepartmentListFranchise(payload, success, failure);
//                                                        } else {
                                                            Messaging.retrieveDepartmentList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    }

                                                    if (isDesignation) {
                                                        var searchRole = false;
                                                        var search;
                                                        if (isEmployee === false && isDepartment === false)
                                                        {
                                                            if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r') {
                                                                searchRole = true;
                                                                search = query.term.slice(2);
                                                            } else {
                                                                searchRole = true;
                                                                search = query.term;
                                                            }
                                                        } else
                                                        {
                                                            if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r') {
                                                                searchRole = true;
                                                                search = query.term.slice(2);
                                                            }
                                                        }
                                                        if (searchRole === true) {
//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"role": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveRoleListFranchise(payload, success, failure);
//                                                        } else {
                                                            Messaging.retrieveRoleList(search.trim(), success, failure);
//                                                        }
                                                        }
                                                    } else if (selected.substring(0, 2) === '@A' || selected.substring(0, 2) === '@a') {
                                                        var search = query.term.slice(2);
                                                        Messaging.retrieveActivityList(search.trim(), success, failure);
                                                    } else {
                                                        query.callback({
                                                            results: $scope.names
                                                        });
                                                    }
                                                }
                                            };

                                        }
                                    });
                                }



//                $log.info("end");

                            }

                            $scope.onEntityChange = function (index) {
                                if ($scope.ruleObject.ruleList[index].entity !== null) {
                                    $scope.ruleObject.ruleList[index].field = undefined;
                                    $scope.ruleObject.ruleList[index].operatorList = [];
                                    $scope.entityId = $scope.ruleObject.ruleList[index].entity;
                                    $scope.ruleObject.ruleList[index].showtemplate = false;
                                    $scope.ruleObject.ruleList[index].values = [];
                                    $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                    if (parseInt($scope.entityId) > 0) {
                                        RuleService.retrieveFieldsByEntity("{\"primaryKey\": " + $scope.entityId + "}", function (res) {
                                            $scope.ruleObject.ruleList[index].fieldList = res;
                                        });
                                    } else {
                                        $scope.ruleObject.ruleList[index].fieldList = null;
                                        $scope.ruleObject.ruleList[index].operatorList = [];
                                        $scope.ruleObject.ruleList[index].operatorList.push({"label": "IsAbsentToday", "isActive": true, "shortcutCode": 1});
                                        $scope.ruleObject.ruleList[index].operatorList.push({"label": "AbsentWithoutInfo", "isActive": true, "shortcutCode": 1});
                                        $scope.ruleObject.ruleList[index].operatorList.push({"label": "RestrictByIP", "isActive": true, "shortcutCode": 1});
                                    }
                                }
                            }

                            $scope.onFieldChange = function (index) {
                                if ($scope.ruleObject.ruleList[index].field !== null && $scope.ruleObject.ruleList[index].field !== undefined) {
//                    $scope.ruleObject.ruleList[index].operator = {};
                                    var componentType = $scope.ruleObject.ruleList[index].field.type;

                                    $scope.ruleObject.ruleList[index].operatorList = [];
                                    var pointerId;
                                    if (componentType === 'Pointer') {
                                        var pointerComponentType;
                                        var validationPattern = $scope.ruleObject.ruleList[index].field.validationPattern.replace("{", "")
                                                .replace("}", "");
                                        var validationsArr = [];
                                        var pointerArray = [];

                                        validationsArr = validationPattern.split(",");
                                        angular.forEach(validationsArr, function (validate)
                                        {
                                            if (validate.indexOf("\"pointer\":") > -1) {
                                                pointerArray = validate.split(":");
                                                pointerId = pointerArray[1].replace(/["']/g, "");
                                                $scope.ruleObject.ruleList[index].field.pointerId = pointerId;
                                            }
                                        });
                                        angular.forEach($scope.ruleObject.ruleList[index].fieldList, function (fieldList)
                                        {
                                            if (fieldList.id.toString() === pointerId.toString())
                                            {
                                                pointerComponentType = fieldList.type;
                                                $scope.ruleObject.ruleList[index].field.pointertype = pointerComponentType;

                                            }
                                        });
                                        $scope.ruleObject.ruleList[index].operatorList = $scope.operators[operatorMap[pointerComponentType]];

                                    }
                                    else if (componentType === 'SubEntity')
                                    {

                                        $scope.ruleObject.ruleList[index].field.subEntityType = "Dropdown";

                                        $scope.ruleObject.ruleList[index].operatorList = $scope.operators[operatorMap["Dropdown"]];
                                        RuleService.retrieveDropListForSubEntity($scope.ruleObject.ruleList[index].field.id, function (res) {
                                            $scope.ruleObject.ruleList[index].options = res;
                                            // I have taken index 0 because everyindex will have same component type
                                            $scope.ruleObject.ruleList[index].field.subentityDropListType = res[0].description;
                                        });


                                    }

                                    else {
                                        $scope.ruleObject.ruleList[index].operatorList = $scope.operators[operatorMap[$scope.ruleObject.ruleList[index].field.type]];
                                    }
                                    if (componentType === "Dropdown" || componentType === "Radio button" || componentType === "MultiSelect") {

                                        if (parseInt($scope.ruleObject.ruleList[index].entity) <= -1 && parseInt($scope.ruleObject.ruleList[index].entity) >= -3 && parseInt($scope.ruleObject.ruleList[index].field.id) !== -1) {
                                            RuleService.retrieveActivityMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", function (res) {
                                                $scope.ruleObject.ruleList[index].options = res;
                                            });
                                        } else if (parseInt($scope.ruleObject.ruleList[index].entity) <= -4 && parseInt($scope.ruleObject.ruleList[index].entity) >= -6 && parseInt($scope.ruleObject.ruleList[index].field.id) !== -1) {
                                            RuleService.retrieveServiceMasterByFieldById("{\"primaryKey\": " + $scope.activityflow.version.value + "}", function (res) {
                                                $scope.ruleObject.ruleList[index].options = res;
                                            });
                                        } else {
                                            // For Lot status the dropdown should not be populated from here
                                            if ($scope.ruleObject.ruleList[index].field.dbFieldName === 'lot_status' || $scope.ruleObject.ruleList[index].field.dbFieldName === 'packet_status'
                                                    || $scope.ruleObject.ruleList[index].field.dbFieldName === 'status_of_plan' || $scope.ruleObject.ruleList[index].field.dbFieldName === 'parcel_status' || $scope.ruleObject.ruleList[index].field.dbFieldName === 'invoice_status'
                                                    || $scope.ruleObject.ruleList[index].field.dbFieldName === 'issue_status' || $scope.ruleObject.ruleList[index].field.dbFieldName === 'type_of_plan')
                                            {
                                                var dbFieldName = $scope.ruleObject.ruleList[index].field.dbFieldName;

                                                RuleService.retrieveLotStatus(dbFieldName, function (res) {
                                                    $scope.ruleObject.ruleList[index].options = res;
                                                });

                                            }
                                            else
                                            {
                                                RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + $scope.ruleObject.ruleList[index].field.id + "}", function (res) {
                                                    $scope.ruleObject.ruleList[index].options = res;

                                                });
                                            }
                                        }
                                    } else if (componentType === "Checkbox") {
                                        $scope.ruleObject.ruleList[index].options = [{label: 'True', value: true}, {label: 'False', value: false}];
                                    }
                                    else if (componentType === "Pointer")
                                    {
                                        RuleService.retrieveMasterByFieldById("{\"primaryKey\": " + pointerId + "}", function (res) {
                                            $scope.ruleObject.ruleList[index].options = res;
                                        });
                                    }

                                    $scope.ruleObject.ruleList[index].operator = undefined;
                                    $scope.ruleObject.ruleList[index].showtemplate = false;
                                    $scope.ruleObject.ruleList[index].values = [];
                                    $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                } else {
                                    $scope.ruleObject.ruleList[index].operator = undefined;
                                    $scope.ruleObject.ruleList[index].operatorList = [];
                                    $scope.ruleObject.ruleList[index].showtemplate = false;
                                    $scope.ruleObject.ruleList[index].values = [];
                                    $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                }
                                angular.forEach($scope.ruleObject.ruleList[index].operatorList, function (itr) {
                                    console.log("--------------");
                                    console.log(JSON.stringify(itr));
                                });

                            }
                            $scope.onOperatorChange = function (index) {
                                $scope.ruleObject.ruleList[index].showtemplate = false;
                                $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                $scope.ruleObject.ruleList[index].values = [];
                                var operator = $scope.ruleObject.ruleList[index].operator;
                                console.log(JSON.stringify(operator));
                                if (!!operator) {
                                    if (operator.label === "contains" || operator.label === "has no value" || operator.label === "has any value") {
                                        $scope.ruleObject.ruleList[index].hint = "Enter comma separated list";
                                    }

                                    $scope.ruleObject.ruleList[index].showtemplate = true;
                                    angular.forEach($scope.ruleObject.ruleList, function (item) {
                                        var validationPattern = null;
                                        if (item.field !== undefined && item.field !== null) {
                                            validationPattern = item.field.validationPattern;
                                        }
                                        var isEmployee = false;
                                        var isDepartment = false;
                                        var isDesignation = false;
                                        var validationsArr = null;
                                        if (validationPattern !== undefined && validationPattern !== null) {
                                            validationsArr = validationPattern.replace("{", "")
                                                    .replace("}", "")
                                                    .split(",");
                                        }
                                        angular.forEach(validationsArr, function (valArr)
                                        {
                                            if (valArr.indexOf("\"isEmployee\":") > -1)
                                            {
                                                isEmployee = true;
                                            }
                                            if (valArr.indexOf("\"isDepartment\":") > -1)
                                            {
                                                isDepartment = true;
                                            }
                                            if (valArr.indexOf("\"isDesignation\":") > -1)
                                            {
                                                isDesignation = true;
                                            }
                                        })
// For multiselect component Multiple i.e. IN query
                                        item.multiselectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
//                                            


                                            }
                                        };
                                        // For multiselect component Single i.e. EQUALS OR NOT EQUAL query
                                        item.multiselectSingleComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            maximumSelectionSize: 1,
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
//                                            


                                            }
                                        };
                                        // For dropdown component Multiple i.e. IN query
                                        item.dropdownMultiSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };

                                        // For dropdown component SINGLE i.e. EQUAL query
                                        item.dropdownSingleSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            maximumSelectionSize: 1,
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };
                                        // For SubEntity component Multiple i.e. IN query
                                        item.subEntityMultiSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };

                                        // For SubENtity component SINGLE i.e. EQUAL query
                                        item.subEntitySingleSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            maximumSelectionSize: 1,
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };

                                        // For dropdown pointer component Multiple i.e. IN query
                                        item.pointerMultiSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };

                                        // For pointer dropdown component SINGLE i.e. EQUAL query
                                        item.pointerSingleSelectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            maximumSelectionSize: 1,
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
//                                           
                                                if (item.options.length !== 0) {

                                                    $scope.names = angular.copy(item.options);
                                                    angular.forEach(item.options, function (item) {
                                                        $scope.names.push({
                                                            id: item.value,
                                                            text: item.label

                                                        });
                                                    });
                                                }
                                                query.callback({
                                                    results: $scope.names
                                                });
                                            }
                                        };

                                        // For USerMultiSelect on operator change for multiple select 
                                        item.userMultiselectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            initSelection: function (element, callback) {

                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
                                                var success = function (data) {
                                                    if (data.length !== 0) {
                                                        $scope.names = data;
                                                        angular.forEach(data, function (item) {
                                                            $scope.names.push({
                                                                id: item.value + ":" + item.description,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
                                                };
                                                var failure = function () {
                                                };
                                                if (isEmployee) {
                                                    var searchEmp = false;
                                                    var search;
                                                    if (isDepartment === false && isDesignation === false) {
                                                        if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                        {
                                                            searchEmp = true;
                                                            search = query.term.slice(2);

                                                        } else {
                                                            searchEmp = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                        {
                                                            searchEmp = true;
                                                            search = query.term.slice(2);

                                                        }
                                                    }
                                                    if (searchEmp === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"user": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveUserListFranchise(payload, success, failure);
//                                                        } else {
                                                        AssetService.retrieveUserList(search.trim(), success, failure);
//                                                        }
                                                    }
                                                }

                                                if (isDepartment) {
                                                    var searchDep = false;
                                                    var search;
                                                    if (isEmployee === false && isDesignation === false)
                                                    {
                                                        if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d')
                                                        {
                                                            searchDep = true;
                                                            search = query.term.slice(2);
                                                        } else {
                                                            searchDep = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d')
                                                        {
                                                            searchDep = true;
                                                            search = query.term.slice(2);
                                                        }

                                                    }
                                                    if (searchDep === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"department": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveDepartmentListFranchise(payload, success, failure);
//                                                        } else {
                                                        Messaging.retrieveDepartmentList(search.trim(), success, failure);
//                                                        }
                                                    }
                                                }
                                                if (isDesignation) {
                                                    var searchRole = false;
                                                    var search;
                                                    if (isEmployee === false && isDepartment === false) {

                                                        if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r')
                                                        {
                                                            searchRole = true;
                                                            search = query.term.slice(2);

                                                        } else {
                                                            searchRole = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r')
                                                        {
                                                            searchRole = true;
                                                            search = query.term.slice(2);

                                                        }
                                                    }
                                                    if (searchRole === true) {
//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"role": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveRoleListFranchise(payload, success, failure);
//                                                        } else {
                                                        Messaging.retrieveRoleList(search.trim(), success, failure);
//                                                        }
                                                    }

                                                } else {
                                                    query.callback({
                                                        results: $scope.names
                                                    });
                                                }
                                            }};
                                        // For USerMultiSelect on operator change for Single select 

                                        item.userSingleselectComponent = {
                                            multiple: true,
                                            closeOnSelect: false,
                                            placeholder: 'Select',
                                            maximumSelectionSize: 1,
                                            initSelection: function (element, callback) {
                                                var data = [];
                                                callback(data);
                                            },
                                            formatResult: function (item) {
                                                return item.text;
                                            },
                                            formatSelection: function (item) {
                                                return item.text;
                                            },
                                            query: function (query) {
                                                var selected = query.term;
                                                $scope.names = [];
                                                var success = function (data) {
                                                    if (data.length !== 0) {
                                                        $scope.names = data;
                                                        angular.forEach(data, function (item) {
                                                            $scope.names.push({
                                                                id: item.value + ":" + item.description,
                                                                text: item.label

                                                            });
                                                        });
                                                    }
                                                    query.callback({
                                                        results: $scope.names
                                                    });
                                                };
                                                var failure = function () {
                                                };

                                                if (isEmployee) {
                                                    var search;
                                                    var searchEmp = false;
                                                    if (isDepartment === false && isDesignation === false) {
                                                        if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                        {
                                                            searchEmp = true;
                                                            search = query.term.slice(2);
                                                        } else {
                                                            searchEmp = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e')
                                                        {
                                                            searchEmp = true;
                                                            search = query.term.slice(2);
                                                        }
                                                    }
                                                    if (searchEmp === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"user": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveUserListFranchise(payload, success, failure);
//                                                        } else {
                                                        AssetService.retrieveUserList(search.trim(), success, failure);
//                                                        }
                                                    }
                                                }

                                                if (isDepartment) {
                                                    var searchDep = false;
                                                    var search;
                                                    if (isEmployee === false && isDesignation === false)
                                                    {
                                                        if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d')
                                                        {
                                                            searchDep = true;
                                                            search = query.term.slice(2);

                                                        } else {
                                                            searchDep = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d')
                                                        {
                                                            searchDep = true;
                                                            search = query.term.slice(2);

                                                        }

                                                    }
                                                    if (searchDep === true) {
//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"department": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveDepartmentListFranchise(payload, success, failure);
//                                                        } else {
                                                        Messaging.retrieveDepartmentList(search.trim(), success, failure);
//                                                        }
                                                    }
                                                }
                                                if (isDesignation) {
                                                    var searchRole = false;
                                                    var search;
                                                    if (isEmployee === false && isDepartment === false) {
                                                        if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r')
                                                        {
                                                            searchRole = true;
                                                            search = query.term.slice(2);
                                                        } else {
                                                            searchRole = true;
                                                            search = query.term;
                                                        }
                                                    } else
                                                    {
                                                        if (selected.substring(0, 2) == '@R' || selected.substring(0, 2) == '@r')
                                                        {
                                                            searchRole = true;
                                                            search = query.term.slice(2);
                                                        }
                                                    }
                                                    if (searchRole === true) {

//                                                        if ($rootScope.session.isHKAdmin) {
//                                                            var payload = {"role": search.trim(), franchise: $scope.activityflow.franchise.value};
//                                                            Messaging.retrieveRoleListFranchise(payload, success, failure);
//                                                        } else {
                                                        Messaging.retrieveRoleList(search.trim(), success, failure);
//                                                        }
                                                    }
                                                }
                                                else {
//                                    query.callback({
//                                        results: $scope.names
//                                    });
                                                }
                                            }};

                                    });
                                    $scope.ruleObject.ruleList[index].showtemplate = true;
                                    //
                                } else {
                                    $scope.ruleObject.ruleList[index].showtemplate = false;
                                }

//                 $scope.rules.showtemplate=true;

                            }
                            $scope.isRulesEmpty = function () {
                                if (!!$scope.allRules) {
                                    return $scope.allRules.length <= 0;
                                } else {
                                    return true;
                                }
                            }
                            $scope.onOperatorClick = function (index) {
                                $scope.ruleObject.ruleList[index].showtemplate = false;
                                $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                setTimeout(function () {
                                    $scope.onOperatorChange(index);
                                });

                            }
                            $scope.addRule = function (form, index) {
//                                console.log(form.$valid);
                                $scope.ruleObject.ruleList[index].rowsubmitted = true;
                                console.log(form.$valid);
                                if (form.$valid) {
                                    var flag = true;
                                    var length = $scope.ruleObject.ruleList[index].operator.shortcutCode;
                                    console.log(length);
                                    for (var i = 0; i < length; i++) {
                                        var val = $scope.ruleObject.ruleList[index].values[i];

                                        if ($scope.ruleObject.ruleList[index].operator.label !== 'has no value' && $scope.ruleObject.ruleList[index].operator.label !== 'has any value' && $scope.ruleObject.ruleList[index].operator.label !== 'IsAbsentToday' && $scope.ruleObject.ruleList[index].operator.label !== 'AbsentWithoutInfo' && $scope.ruleObject.ruleList[index].operator.label !== 'RestrictByIP')
                                        {
                                            if ($scope.ruleObject.ruleList[index].field.type === "MultiSelect")
                                            {
                                                var valueOfMultiSelect = $scope.ruleObject.ruleList[index].values;
                                                flag = (flag && true);
                                            } else {
                                                if (val !== null && val !== undefined) {
                                                    flag = (flag && true);
                                                } else {
                                                    flag = false;
                                                }
                                            }
                                        } else
                                        {
                                            flag = (flag && true);
                                        }
                                    }
                                    if (flag) {
                                        console.log("===" + $scope.entityId);

                                        if (parseInt($scope.entityId) < 0) {
                                            $scope.entityList = angular.copy($scope.entityListWithOutField)
                                        } else {
                                            $scope.entityList = angular.copy($scope.entityListWithField)
                                        }

                                        var rule = initializeRule();
                                        $scope.ruleObject.ruleList.push(rule);
                                    }
                                }
                            }
                            $scope.remove = function (index) {
                                $scope.ruleObject.ruleList.splice(index, 1);
                                if ($scope.ruleObject.ruleList.length === 1) {
                                    $scope.entityList = angular.copy($scope.entityListFromDb);
                                }
                                if ($scope.ruleObject.ruleList.length === 0) {
                                    var rule = initializeRule();
                                    $scope.ruleObject.ruleList.push(rule);
                                    $scope.ruleObject.ruleList[index].rowsubmitted = false;
                                }

                            }

                            $scope.save = function (form) {

                                if (!!$scope.ruleObject.ruleList) {
                                    for (var i = 0; i < $scope.ruleObject.ruleList.length; i++) {
                                        $scope.ruleObject.ruleList[i].rowsubmitted = true;
                                    }
                                }
                                $scope.ruleSubmitted = true;
                                if (form.$valid) {
                                    var flag = true;
                                    for (var index = 0; index < $scope.ruleObject.ruleList.length; index++) {
                                        var length2 = $scope.ruleObject.ruleList[index].operator.shortcutCode;
                                        for (var i = 0; i < length2; i++) {
                                            var val = $scope.ruleObject.ruleList[index].values[i];

                                            if ($scope.ruleObject.ruleList[index].operator.label !== 'has no value' && $scope.ruleObject.ruleList[index].operator.label !== 'has any value')
                                            {
                                                if ($scope.ruleObject.ruleList[index].field.type === "MultiSelect")
                                                {
                                                    flag = (flag && true);
                                                } else {
                                                    if (val !== null && val !== undefined) {
                                                        flag = (flag && true);
                                                    } else {
                                                        flag = false;
                                                        break;
                                                    }
                                                }
                                            } else
                                            {
                                                flag = (flag && true);
                                            }
                                        }
                                        if (flag === false)
                                            break;
                                    }
                                    if (flag) {
                                        var rules = [];
                                        var length = $scope.ruleObject.ruleList.length;
                                        for (var i = 0; i < length; i++) {
                                            $scope.ruleObject.ruleList[i].rowsubmitted = true;
                                            var tmprule = {};
                                            tmprule = angular.copy($scope.ruleObject.ruleList[i]);
                                            var rule = {};
//                                            rule.id = i;
                                            //                    rule.priority = tmprule.priority;
                                            rule.entity = tmprule.entity;
                                            rule.field = tmprule.field.id;
                                            rule.operator = tmprule.operator.label;
                                            rule.fieldType = tmprule.field.type;

                                            // For non pointer components
                                            if (rule.fieldType !== "Pointer" && rule.fieldType !== "SubEntity") {
                                                if (rule.fieldType !== "Date range" && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {
                                                    if (rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                        rule.value = tmprule.values[0] + "," + tmprule.values[1];
                                                    }
                                                    else
                                                    {
                                                        if (tmprule.operator.label !== "has any value from")
                                                        {
                                                            if (tmprule.values.toString().indexOf(',') > -1)
                                                            {
                                                                tmprule.values.toString().replace(/,/g, '');
                                                            }

                                                        }
                                                        rule.value = tmprule.values;
                                                    }


                                                    if (tmprule.values.length > 1 && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                        rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                    }
                                                }
                                            }
                                            else if (rule.fieldType === "SubEntity")
                                            {
                                                if (tmprule.field.subentityDropListType === "Date ") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {


                                                    if (tmprule.operator.label !== "has any value from")
                                                    {
                                                        if (tmprule.values.toString().indexOf(',') > -1)
                                                        {
                                                            tmprule.values.toString().replace(/,/g, '');
                                                        }

                                                    }
                                                    rule.value = tmprule.values;
                                                }
                                                if (tmprule.values.length > 1 && tmprule.field.subentityDropListType === "Date ") {
                                                    rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                }

                                            }
                                            else
                                            {
                                                if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {
                                                    if (tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                        rule.value = tmprule.values[0] + "," + tmprule.values[1];
                                                    }
                                                    else
                                                    {
                                                        if (tmprule.operator.label !== "has any value from")
                                                        {
                                                            if (tmprule.values.toString().indexOf(',') > -1)
                                                            {
                                                                tmprule.values.toString().replace(/,/g, '');
                                                            }

                                                        }
                                                        rule.value = tmprule.values;
                                                    }


                                                    if (tmprule.values.length > 1 && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                        rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                    }

                                                }
                                            }

                                            rules.push(rule);
                                        }

                                        if (form.$valid) {
                                            $scope.ruleObject.criterias = angular.copy(rules);
                                            $scope.ruleObject.isArchive = !$scope.ruleObject.isActive;
                                            if (!!$scope.selectedRule) {
                                                var index = parseInt($scope.selectedRule.id);
//                        $.grep($scope.allRules, function(e, i) {
//                            if (e.id === $scope.ruleObject.id) {
//                                index = i;
//                                return true;
//                            }
//                        });
                                                angular.forEach($scope.allRules, function (item) {
                                                    if (item.id == $scope.selectedRule.id) {
                                                        item.ruleName = angular.copy($scope.ruleObject.ruleName);
                                                        item.remarks = angular.copy($scope.ruleObject.remarks);
                                                        item.apply = angular.copy($scope.ruleObject.apply);
                                                        item.criterias = angular.copy($scope.ruleObject.criterias);
                                                        item.isActive = angular.copy($scope.ruleObject.isActive);
                                                        item.isArchive = angular.copy($scope.ruleObject.isArchive);
                                                        item.ruleNumber = angular.copy($scope.ruleObject.ruleNumber);
                                                    }
                                                });

                                                if ($scope.isEditRule) {
                                                    $scope.reset(form);
                                                }
                                            } else {
                                                if ($scope.addFlag) {
//                                                    if ($scope.ruleObject.id === null) {
//
//                                                        $scope.lastRuleId++;
////                                console.log("$scope.lastRuleId::"+$scope.lastRuleId);
//                                                        if (!!$scope.allRules) {
//                                                            $scope.ruleObject.id = $scope.allRules.length;
//                                                        } else {
//                                                            $scope.ruleObject.id = 0;
//                                                        }
//                                                    }
                                                    if (!!!$scope.allRules) {
                                                        $scope.allRules = [];
                                                    }
                                                    $scope.allRules.push($scope.ruleObject);
                                                    $scope.selectedRule = $scope.ruleObject;
                                                }
//                        $scope.reset(form);
                                            }
                                            $scope.rulesetObject = angular.copy($scope.allRules);

                                            $scope.ruleSubmitted = false;
                                            $scope.addFlag = false;
                                            $scope.selectedRule = "";
                                        }
                                    }
                                } else {
                                    var firstInvalid = $element[0].querySelector('input.ng-invalid');
                                    // if we find one, set focus
                                    if (firstInvalid) {
                                        firstInvalid.focus();
                                    }
                                }
                            };

                            $scope.checkIfCriteriasAreValid = function (ruleList) {
                                for (var i = 0; i < ruleList.length; i++) {
                                    if (ruleList[i] === undefined || ruleList[i] === null) {
                                        console.log("here it's failed--ruleList[i] === undefined");
                                        return false;
                                    }
                                    if (ruleList[i].entity === undefined || ruleList[i].entity.length === 0) {
                                        console.log("here it's failed-- entity undefined");
                                        return false;
                                    }
                                    if ($scope.entityId > 0 && (ruleList[i].field === undefined || (ruleList[i].field instanceof Object && jQuery.isEmptyObject(ruleList[i].field)))) {
                                        console.log("here it's failed-- field undefined");
                                        return false;
                                    }
                                    if (ruleList[i].operator === undefined || (ruleList[i].operator instanceof Object && jQuery.isEmptyObject(ruleList[i].operator))) {
                                        console.log("here it's failed-- operator undefined");
                                        return false;
                                    } else if (ruleList[i].operator.label === 'has no value' || ruleList[i].operator.label === 'has any value' || ruleList[i].operator.label === 'IsAbsentToday' || ruleList[i].operator.label === 'AbsentWithoutInfo' || ruleList[i].operator.label === 'RestrictByIP') {
                                        return true;
                                    }
                                    if (ruleList[i].values === undefined || ruleList[i].values.length === 0) {
                                        console.log("here it's failed-- values undefined");
                                        return false;
                                    }
                                }
                                return true;
                            };

                            //Only called if only-criteria is true. that is update criteria on every update of criterialist.
                            //ruleObject.ruleList is for ui purpose only and ruleObject.criterias need to be used for storage.
                            $scope.saveCriterias = function () {
                                if ($scope.checkIfCriteriasAreValid($scope.ruleObject.ruleList)) {
                                    console.log("CriteriasAreValid");
                                    var flag = true;
                                    for (var index = 0; index < $scope.ruleObject.ruleList.length; index++) {
                                        var length2 = $scope.ruleObject.ruleList[index].operator.shortcutCode;
                                        for (var i = 0; i < length2; i++) {
                                            var val = $scope.ruleObject.ruleList[index].values[i];

                                            if ($scope.ruleObject.ruleList[index].operator.label !== 'has no value' && $scope.ruleObject.ruleList[index].operator.label !== 'has any value' && $scope.ruleObject.ruleList[index].operator.label !== 'IsAbsentToday' && $scope.ruleObject.ruleList[index].operator.label !== 'AbsentWithoutInfo' && $scope.ruleObject.ruleList[index].operator.label !== 'RestrictByIP')
                                            {
                                                if ($scope.ruleObject.ruleList[index].field.type === "MultiSelect")
                                                {
                                                    flag = (flag && true);
                                                } else {
                                                    if (val !== null && val !== undefined) {
                                                        flag = (flag && true);
                                                    } else {
                                                        flag = false;
                                                        break;
                                                    }
                                                }
                                            } else
                                            {
                                                flag = (flag && true);
                                            }
                                        }
                                        if (flag === false)
                                            break;
                                    }
                                    if (flag) {
                                        var rules = [];
                                        var length = $scope.ruleObject.ruleList.length;
                                        for (var i = 0; i < length; i++) {
                                            //$scope.ruleObject.ruleList[i].rowsubmitted = true;
                                            var tmprule = {};
                                            tmprule = angular.copy($scope.ruleObject.ruleList[i]);
                                            var rule = {};
//                                            rule.id = i;
                                            //                    rule.priority = tmprule.priority;
                                            rule.entity = tmprule.entity;
                                            if ($scope.entityId > 0) {
                                                rule.field = tmprule.field.id;
                                                rule.fieldType = tmprule.field.type;
                                            }
                                            rule.operator = tmprule.operator.label;


                                            // For non pointer components
                                            if (rule.fieldType !== "Pointer" && rule.fieldType !== "SubEntity") {
                                                if (rule.fieldType !== "Date range" && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {
                                                    if (rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                        rule.value = tmprule.values[0] + "," + tmprule.values[1];
                                                    }
                                                    else
                                                    {
                                                        if (tmprule.operator.label !== "has any value from")
                                                        {
                                                            if (tmprule.values.toString().indexOf(',') > -1)
                                                            {
                                                                tmprule.values.toString().replace(/,/g, '');
                                                            }

                                                        }
                                                        rule.value = tmprule.values;
                                                    }


                                                    if (tmprule.values.length > 1 && rule.fieldType !== "UserMultiSelect" && rule.fieldType !== "MultiSelect" && rule.fieldType !== "Dropdown") {
                                                        rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                    }
                                                }
                                            }
                                            else if (rule.fieldType === "SubEntity")
                                            {
                                                if (tmprule.field.subentityDropListType === "Date ") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {


                                                    if (tmprule.operator.label !== "has any value from")
                                                    {
                                                        if (tmprule.values.toString().indexOf(',') > -1)
                                                        {
                                                            tmprule.values.toString().replace(/,/g, '');
                                                        }

                                                    }
                                                    rule.value = tmprule.values;
                                                }
                                                if (tmprule.values.length > 1 && tmprule.field.subentityDropListType === "Date ") {
                                                    rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                }

                                            }
                                            else
                                            {
                                                if (tmprule.field !== undefined && tmprule.field !== null && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                    rule.value = tmprule.values[0];
                                                    if (tmprule.values.length > 1) {
                                                        rule.value1 = tmprule.values[1];
                                                    }
                                                } else {
                                                    if (tmprule.field !== undefined && tmprule.field !== null && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                        rule.value = tmprule.values[0] + "," + tmprule.values[1];
                                                    }
                                                    else
                                                    {
                                                        if (tmprule.operator.label !== "has any value from")
                                                        {
                                                            if (tmprule.values.toString().indexOf(',') > -1)
                                                            {
                                                                tmprule.values.toString().replace(/,/g, '');
                                                            }

                                                        }
                                                        rule.value = tmprule.values;
                                                    }


                                                    if (tmprule.field !== undefined && tmprule.field !== null && tmprule.values !== undefined && tmprule.values !== null && tmprule.values.length > 1 && tmprule.field.pointertype !== "MultiSelect" && tmprule.field.pointertype !== "Dropdown") {
                                                        rule.value1 = tmprule.values[2] + "," + tmprule.values[3];
                                                    }

                                                }
                                            }

                                            rules.push(rule);
                                        }

                                        $scope.ruleObject.criterias = angular.copy(rules);
                                    }
                                }
                            };
                            $scope.saveAndSubmit = function (form) {
                                $scope.save(form);
//                }

                                if (form.$valid || $scope.allRules.length <= 0) {
                                    //                    $scope.save(form);
//                                    $log.info("in save and submit");                     // submit logic
                                    var ruleset = {};
                                    ruleset.rules = angular.copy($scope.allRules);

                                    ruleset.franchise = $scope.activityflow.franchise.otherId;
                                    if ($scope.allRules.length > 0) {
                                        RuleService.createRuleSet(ruleset, function (res) {
                                            $scope.rulesetid = null;
                                            $scope.hideRule(form, false);
                                        });
                                        $scope.allRules = [];
                                    }
                                } else {
                                    return;
                                }
                            }

                            $scope.onRuleChange = function (form) {
                                $rootScope.maskLoading();
                                if (!!!$scope.selectedRule) {
                                } else {
                                    setRuleObject($scope.allRules[$scope.allRules.indexOf($scope.selectedRule)]);
                                    $scope.editRule = true;
                                    $scope.addFlag = false;
                                }
                                $rootScope.unMaskLoading();
                            }
                            $scope.deleteRule = function () {
                                var index;
                                if ($scope.selectedRule !== null) {
                                    $.grep($scope.allRules, function (e, i) {
                                        if (e.ruleName === $scope.selectedRule.ruleName) {
                                            index = i;
                                            return true;
                                        }
                                    });
                                    $scope.allRules.splice(index, 1);
                                    $scope.selectedRule = null;
                                }
                            };
                            $scope.reset = function (form) {
                                $scope.selectedRule = "";
                                $scope.addFlag = true;
                                initializeRuleObject();
                                if (form !== undefined) {
                                    form.$setPristine();
                                } else {
                                    $scope.addRuleForm.$setPristine();
                                }
                                $scope.selectedRule = null;
                                $scope.ruleSubmitted = false;
                            };
                            $scope.resetCancel = function (form) {
                                $scope.selectedRule = "";
                                $scope.addFlag = false;
                                initializeRuleObject();
                                form.$setPristine();
                                $scope.ruleSubmitted = false;
                                $scope.selectedRule = null;
                            };

                            //Shallow watch, called if the object is reinitialized.
                            //Done intentionally to avoid circular $watch cycle.
                            $scope.$watch('rulesetObject', function (val) {
//                                console.log('watch called---------------------');
                                if ($scope.onlyCriteria === false) {
                                    $scope.initializeRuleConfig();
                                    $scope.addFlag = false;
                                    $scope.selectedRule = undefined;
                                } else {
                                    RuleService.retrievePrerequisite(function (res) {
                                        console.log(JSON.stringify(res.entity));
                                        $scope.entityListFromDb = angular.copy(res.entity);
                                        $scope.entityListWithField = {};
                                        $scope.entityListWithOutField = {};
                                        for (var key in $scope.entityListFromDb) {
                                            if (parseInt(key) > 0) {
                                                $scope.entityListWithField[key] = $scope.entityListFromDb[key];
                                            } else {
                                                $scope.entityListWithOutField[key] = $scope.entityListFromDb[key];
                                            }
                                        }
                                        console.log($scope.entityListWithOutField);
                                        $scope.entityList = res.entity;
                                        if (!!!$scope.entityList) {
                                            $scope.entityList = {};
                                        }
                                        $scope.operators = res.operator;
                                        if ($scope.rulesetObject !== undefined && $scope.rulesetObject !== null) {
                                            $scope.ruleObject = $scope.rulesetObject;
                                            if ($scope.rulesetObject.criterias !== undefined && $scope.rulesetObject.criterias !== null) {
                                                $scope.ruleObject.ruleList = [];
                                                setRuleList($scope.rulesetObject.criterias, 0);
                                            } else {
                                                $scope.ruleObject.ruleList = [];
                                                var rule = initializeRule();
                                                $scope.ruleObject.ruleList.push(rule);
                                                rule.rowsubmitted = false;
                                                $scope.ruleObject.apply = "All";
                                            }
                                        }
                                    });
                                }
                            });
                            //Deep watch - watches changes in object too.
                            $scope.$watch('ruleObject.ruleList', function (val) {
                                console.log("$scope.saveCriterias" + "---$scope.onlyCriteria---" + $scope.onlyCriteria);
                                if ($scope.onlyCriteria === true) {
                                    $scope.saveCriterias();
                                }
                            }, true);

//            ----------------------------------------Rule functions end----------------------------//




                        }];

                    return {
                        restrict: 'E',
                        link: link,
                        scope: scope,
                        controller: controller,
                        templateUrl: 'scripts/directives/ruletemplate/ruletemplate.tmpl.html'
                    };
                }]);


});
