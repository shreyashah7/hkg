define(['angular'], function () {
    globalProvider.compileProvider.directive('ruleField', ["$parse", "$compile", function ($parse, $compile) {
            var supported = {
                //  Text-based elements
                'Text field': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'AutoGenerated': {'element': 'input', 'type': 'text', 'class': 'form-control'},
//            'Date': {element: 'input', type: 'date', class: 'form-control'},
                'Date': {'element': 'ag-datetime-picker', 'type': 'date', 'editable': true, 'textBased': true},
                'Datepicker': {'element': 'input', 'type': 'date', 'class': 'form-control'},
                'Date range': {'element': 'input', 'type': 'date', 'class': 'form-control'},
                'Date time': {'element': 'input', 'type': 'datetime', 'class': 'form-control'},
                'Time': {'element': 'input', 'type': 'time', 'class': "form-control"},
//            'datetime-local': {element: 'input', type: 'datetime-local', class: 'form-control'},
                'Email': {'element': 'input', 'type': 'email', 'class': 'form-control'},
                'Phone': {'element': 'input', 'type': 'tel', 'class': 'form-control'},
//            'month': {element: 'input', type: 'month', class: 'form-control'},
                'Number': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Decimal': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Password': {'element': 'input', 'type': 'password', 'class': 'form-control'},
//            'search': {element: 'input', type: 'search', class: 'form-control'},
//            'tel': {element: 'input', type: 'tel', class: 'form-control'},
                'Text area': {'element': 'textarea', 'class': 'form-control'},
//            'url': {element: 'input', type: 'url', class: 'form-control'},
//            'week': {element: 'input', type: 'week', class: 'form-control'},
//            //  Specialized editables
//            'checkbox': {element: 'input', type: 'checkbox', class: 'form-control'},
                'Color': {'element': 'input', 'type': 'color', 'class': 'form-control'},
//            'range': {element: 'input', type: 'range'},
                'Dropdown': {'element': 'select', 'class': 'form-control'},
                'Radio button': {'element': 'select', 'class': 'form-control'},
                'Checkbox': {'element': 'select', 'class': 'form-control'},
//            //  Non-editables (mostly buttons)
                'Currency': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Percent': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Formula': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Pointer': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'Angle': {'element': 'input', 'type': 'text', 'class': 'form-control'},
                'formula': {'element': 'input', 'type': 'text', 'class': 'form-control'}
            };

            return {
                restrict: 'E',
                replace: true,
                link: function ($scope, element, attrs) {
                    var length = attrs.rfCount;
                    var submitflag = attrs.rfSubmitflag;
                    var str = attrs.rfValidationFlag;
                    var hint = attrs.rfHint;
                    console.log("hint" + hint);
//                if (hint === undefined || hint === null) {
//                    hint = "Enter value";
//                }
                    if (attrs.rfOperator === 'has any value from')
                    {
                        hint = "Enter comma seperated values"
                    } else
                    {
                        hint = "Enter value";
                    }
                    var componentDetails = supported[attrs.rfType];
                    console.log("RF TYPE" + JSON.stringify(componentDetails));
                    var component = "<ng-form name=\"template\" >";
                    for (var i = 0; i < length; i++) {
                        if (componentDetails !== undefined && componentDetails !== null) {
                            if (attrs.rfType !== "Date range") {
                                console.log("attrs.rfOperator" + attrs.rfOperator);
                                if (attrs.rfOperator !== "has any value" || attrs.rfOperator !== "has no value") {
                                    console.log("submit flag" + submitflag);
                                    component = component + "<div ng-class=\"{'has-error': template.value" + i + ".$invalid && (template.value" + i + ".$dirty  || " + submitflag + ")}\" >";

//                            component = component + "<div class=\"col-md-" + Math.floor(12 / length) + "\" > ";
                                    if (attrs.rfType.trim() === 'Decimal') {
                                        component = component + "<" + componentDetails.element + " maxlength='5' numbers-only=true decimalallowed=true required ng-model='" + attrs.rfValarray + "[" + i + "]' name=\"value" + i + "\"  class=\" " + componentDetails['class'] + "\"  ";
                                    } else {
                                        component = component + "<" + componentDetails.element + " required ng-model='" + attrs.rfValarray + "[" + i + "]' name=\"value" + i + "\"  class=\" " + componentDetails['class'] + "\"  ";
                                    }
                                    if (attrs.rfType.trim() === "Number" || attrs.rfType.trim() === 'Phone') {
                                        if (attrs.rfOperator === 'has any value from') {
                                            component = component + " ng-pattern='/^[0-9,.]+$/' placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";
                                        } else
                                        {
                                            component = component + " numbers-only decimalallowed=true placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";

                                        }
                                    }
                                    else if (attrs.rfType.trim() === 'Currency' || attrs.rfType.trim() === 'Percent' || attrs.rfType.trim() === 'Angle' || attrs.rfType.trim() === 'Formula')
                                    {
                                        if (attrs.rfOperator === 'has any value from') {
                                            component = component + " ng-pattern='/^[0-9.,]+$/'   placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";

                                        } else {
                                            component = component + " numbers-only decimalallowed=true  placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";
                                        }
                                    }
                                    else if (attrs.rfType.trim() === "Dropdown" || attrs.rfType.trim() === "Radio button" || attrs.rfType.trim() === "Checkbox") {
                                        if (attrs.rfOptionList !== null && attrs.rfOptions !== null) {
                                            if (attrs.rfOperator === "has any value" || attrs.rfOperator === "has no value") {
                                                component = component + "ng-options=\"option.value as option.label for option in " + attrs.rfOptions + "\"  ui-select2 multiple  >  </" + componentDetails.element + ">";
                                            } else {
                                                component = component + " ng-options=\"option.value as option.label for option in " + attrs.rfOptions + "\"  > <option value=''>{{entity + 'Select' | translate}}</option> </" + componentDetails.element + ">";
                                            }

                                        }

                                    }
                                    else if (attrs.rfType.trim() === "Email")
                                    {
                                        component = component + "  placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";
//                             component = component + " ng-pattern='/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/'";
                                    }
                                    else {
                                        component = component + "  placeholder=\"" + hint + "\" type=\"" + componentDetails.type + "\" />";
                                    }
                                    //Add end tag for ag-datetime-picker.
                                    component += componentDetails.element === 'ag-datetime-picker' ? '</ag-datetime-picker>' : '';

                                    component = component + "<div class=\"error,help-block\" ng-show=\"template.value" + i + ".$invalid  && (template.value" + i + ".$dirty  || " + submitflag + ")\">"
                                            + "<span class=\"help-block\" ng-show=\"(template.value" + i + ".$error.required)\">{{ entity+'" + hint + "' | translate}}</span>"
                                            + "<span class=\"help-block\" ng-show=\"(!template.value" + i + ".$error.required && (template.value" + i + ".$dirty || template.value" + i + ".$invalid ))\">{{ entity+'Invalid value' | translate}}</span>"

//                            if (attrs.rfType.trim() !== "Number" || attrs.rfType.trim() !== 'Currency' || attrs.rfType.trim() !== 'Percent' || attrs.rfType.trim() === 'Phone'|| attrs.rfType.trim() === 'Email'  ) {
//                        console.log("element");
//                                +"<span class=\"help-block\" ng-if=\"(template.value" + i + ".$dirty || template.value" + i + ".$invalid )\">{{ entity+'Invalid value' | translate}}</span>"
//                        }

                                            + "</div></div>";

                                }
                            } else {
                                component = component + "<div class=\"form-group\" >";
                                component = component + "<div ng-class=\"{'has-error': template.fromValue" + i + ".$invalid && (template.fromValue" + i + ".$dirty  || " + submitflag + ")}\" >";
                                component = component + "<div class=\"col-md-5\" > ";
                                component = component + "<" + componentDetails.element + "  required ng-model='" + attrs.rfValarray + "[" + (2 * i) + "]'  name=\"fromValue" + i + "\"  class=\" " + componentDetails['class'] + "\"  ";
                                component = component + "  type=\"" + componentDetails.type + "\" />";
                                component = component + "<div class=\"error,help-block\" ng-show=\"template.fromValue" + i + ".$invalid  && (template.fromValue" + i + ".$dirty  || " + submitflag + ")\">"
                                        + "<span class=\"help-block\" ng-show=\"(template.fromValue" + i + ".$error.required)\">{{ entity+'" + hint + "' | translate}}</span>"
                                        + "</div></div></div><div class=\"col-md-1\">{{entity + 'To' | translate}}</div>";


                                component = component + "<div class=\"form-group\" >";
                                component = component + "<div ng-class=\"{'has-error': template.toValue" + i + ".$invalid && (template.toValue" + i + ".$dirty  || " + submitflag + ")}\" >";
                                component = component + "<div class=\"col-md-5\" > ";
                                component = component + "<" + componentDetails.element + "  required ng-model='" + attrs.rfValarray + "[" + ((2 * i) + 1) + "]' name=\"toValue" + i + "\"  class=\" " + componentDetails['class'] + "\"  ";
                                component = component + "  type=\"" + componentDetails.type + "\" />";
                                component = component + "<div class=\"error,help-block\" ng-show=\"template.toValue" + i + ".$invalid  && (template.toValue" + i + ".$dirty  || " + submitflag + ")\">"
                                        + "<span class=\"help-block\" ng-show=\"(template.toValue" + i + ".$error.required)\">{{ entity+'" + hint + "' | translate}}</span>"
                                        + "</div></div></div></div>";
                            }
                        }
                        component = component + "</ng-form>";
                        var el = $compile(component)($scope);
                        element.replaceWith(el);
//                });
                    }

                }
            };
        }]);
});