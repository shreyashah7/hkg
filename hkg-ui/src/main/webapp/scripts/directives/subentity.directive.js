

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


define(['angular', 'webcam', 'datepickercustom.directive'], function () {
    globalProvider.compileProvider.directive('subentity', ['$q', '$parse', '$http', '$templateCache', '$compile', '$document', '$timeout', '$rootScope', '$filter',
        function ($q, $parse, $http, $templateCache, $compile, $document, $timeout, rootScope, $filter)
        {
            var supported = {
                //  Text-based elements
                'text': {element: 'input', type: 'text', editable: true, textBased: true},
                'date': {element: 'ag-date-picker-custom', type: 'date', editable: true, textBased: false},
                'datetime': {element: 'input', type: 'datetime', editable: true, textBased: true},
                'datetime-local': {element: 'input', type: 'datetime-local', editable: true, textBased: true},
                'email': {element: 'input', type: 'email', editable: true, textBased: true},
                'month': {element: 'input', type: 'month', editable: true, textBased: true},
                'number': {element: 'input', type: 'text', editable: true, textBased: true},
                'password': {element: 'input', type: 'password', editable: true, textBased: true},
                'search': {element: 'input', type: 'search', editable: true, textBased: true},
                'tel': {element: 'input', type: 'tel', editable: true, textBased: true},
                'textarea': {element: 'textarea', editable: true, textBased: true},
                'time': {element: 'input', type: 'time', editable: true, textBased: true},
                'url': {element: 'input', type: 'url', editable: true, textBased: true},
                'week': {element: 'input', type: 'week', editable: true, textBased: true},
                //  Specialized editables
                'checkbox': {element: 'input', type: 'checkbox', editable: true, textBased: false},
                'color': {element: 'input', type: 'color', editable: true, textBased: false},
                'file': {element: 'input', type: 'file', editable: true, textBased: false},
                'range': {element: 'input', type: 'range', editable: true, textBased: false},
                //  Pseudo-non-editables (containers)
                'checklist': {element: 'div', editable: false, textBased: false},
                'fieldset': {element: 'fieldset', editable: false, textBased: false},
                'radio': {element: 'div', editable: false, textBased: false},
                //  Non-editables (mostly buttons)
                'hidden': {element: 'input', type: 'hidden', editable: false, textBased: false},
                'image': {element: 'input', type: 'image', editable: false, textBased: false},
                'legend': {element: 'legend', editable: false, textBased: false},
                'reset': {element: 'button', type: 'reset', editable: false, textBased: false},
                'submit': {element: 'button', type: 'submit', editable: false, textBased: false},
                'imageUpload': {element: 'input', type: 'hidden', editable: true, textBased: false},
                'fileUpload': {element: 'input', type: 'hidden', editable: true, textBased: true},
                'fileDownload': {element: 'input', type: 'hidden', editable: true, textBased: true},
                'multiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'percent': {element: 'input', type: 'text', editable: true, textBased: true},
                'UserMultiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'AutoGenerated': {element: 'input', type: 'text', editable: false, textBased: true},
                'pointer_multiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'Angle': {element: 'input', type: 'text', editable: true, textBased: true},
            };

//            return {
//                restrict: 'E', // supports using directive as element only
            var link = function ($scope, element, attrs) {
                //  Basic initialization
                var render = function () {
                    console.log("in sub directive")
                    var temp = $scope[attrs.template];


                    var elementCnt = 0;
                    var newElement = null,
                            mainDiv = null,
                            newChild = null,
                            cbAtt = '',
                            foundOne = false,
                            iterElem = element,
                            model = null,
                            dtbMap = null,
                            submitFlagName = attrs.submitFlagName;
                    if (!submitFlagName) {
                        submitFlagName = "submitted";
                    }
                    var elementPerRow = 2;
                    //  Check that the required attributes are in place

//                    $scope.$watch($scope.subFieldTemplate, function (newTags, oldTags) {
                    $scope.$watch(function () {
                        return $scope.subFieldTemplate;/* define what to watch*/
                    }, function (newTags, oldTags) {
                        if (angular.isDefined(attrs.ngModel) && (angular.isDefined(attrs.template) || angular.isDefined(attrs.templateUrl)) && !element.hasClass('dynamic-form')) {
                            model = $parse(attrs.ngModel)($scope);
                            if (attrs.noOfFieldPerRow) {
                                elementPerRow = parseInt(attrs.noOfFieldPerRow);
                            }
                            if (!model) {
                                var objModel = attrs.ngModel.split(".");
                                $scope[objModel[0]] = {};
                                var tmp = $parse(objModel[0])($scope);
                                for (var i = 1; i < objModel.length; i++)
                                {
                                    tmp[objModel[i]] = {};
                                    tmp = tmp[objModel[i]];
                                }
                                model = tmp;
                                $scope[attrs.ngModel] = {};
                                model = $scope[attrs.ngModel];
                            }

                            dtbMap = $parse(attrs.dbMap)($scope);
                            if (!dtbMap) {
                                var objProps = attrs.dbMap.split(".");
                                $scope[objProps[0]] = {};
                                var temp = $parse(objProps[0])($scope);
                                for (var i = 1; i < objProps.length; i++)
                                {
                                    temp[objProps[i]] = {};
                                    temp = temp[objProps[i]];
                                }
                                dtbMap = temp;
                            }
                            //  Grab the template. either from the template attribute, or from the URL in templateUrl
                            (attrs.template ? $q.when($parse(attrs.template)($scope)) :
                                    $http.get(attrs.templateUrl, {cache: $templateCache}).then(function (result) {
                                return result.data;
                            })
                                    ).then(function (template) {
                                var buildFields = function (field, id) {


                                    //created map dtbMap to map model as key and dbtype as value
                                    if (angular.isDefined(field.dbType)) {
                                        if (field.type === 'date' && field.attributes && (field.attributes.type === 'timerange' || field.attributes.type === 'datetimerange' || field.attributes.type === 'daterange')) {
                                            dtbMap[field.fromModel] = field.dbType;
                                            dtbMap[field.toModel] = field.dbType;
                                        } else {
                                            dtbMap[field.model] = field.dbType;
                                        }
                                    }
                                    if (!angular.isDefined(supported[field.type]) || supported[field.type] === false) {
                                        //  Unsupported.  Create SPAN with field.label as contents
                                        newElement = angular.element('<span></span>');
                                        if (angular.isDefined(field.label)) {
                                            angular.element(newElement).html(field.label);
                                        }
                                        angular.forEach(field, function (val, attr) {
                                            if (["label", "type"].indexOf(attr) > -1) {
                                                return;
                                            }
                                            newElement.attr(attr, val);
                                        });
                                        this.append(newElement);
                                        newElement = null;
                                    }
                                    else {
                                        if ((angular.isDefined(attrs.viewOnly) && attrs.viewOnly === 'true') || attrs.viewOnly === true) {
                                            attrs.viewOnly = true;
                                        } else {
                                            attrs.viewOnly = false;
                                        }
                                        if (angular.isDefined(attrs.userDefined) && attrs.userDefined !== null) {
                                            $scope.userDefined = true;
                                            $scope.userDefinedData = $scope[attrs.userDefined];
                                        } else {
                                            $scope.userDefined = false;
                                        }
                                        if (attrs.viewOnly) {
                                            newElement = angular.element('<span></span>');

                                            if (field.type === 'date' || field.type === 'timerange') {
                                                var dateElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.fromModel + '" ></span>');
                                                dateElement.prepend('{{' + attrs.ngModel + "['from" + field.model + "']" + '}}' + '{{' + attrs.ngModel + "['to" + field.model + "']" + '}}');

                                                newElement.prepend(dateElement);
                                                var dateElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.fromModel + '" ></span>');
                                                dateElement1.prepend('N/A');

                                                newElement.prepend(dateElement1);
//                                            newElement = newElement.append('{{' + attrs.ngModel + "['from" + field.model + "']" + '}}' + '{{' + attrs.ngModel + "['to" + field.model + "']" + '}}');


                                            }

                                            else if (field.type === 'percent')
                                            {
                                                var percentElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                percentElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}}  % ');

                                                newElement.prepend(percentElement);
                                                var percentElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                percentElement1.prepend('N/A');

                                                newElement.prepend(percentElement1);


                                            }
                                            else if (field.type === 'Angle')
                                            {
                                                var angleElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                angleElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}}');
                                                angleElement.append('<span class="">&#176</span>');
                                                newElement.prepend(angleElement);
                                                var angleElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                angleElement1.prepend('N/A');

                                                newElement.prepend(angleElement1);


                                            }

                                            else if (field.type === 'currency')
                                            {
                                                var symbolElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                symbolElement.prepend(format(field.currencyformat, '{{' + attrs.ngModel + "['" + field.model + "']" + '}}'));
                                                if (field.currencyPrefix === 'P')
                                                {
                                                    symbolElement.prepend(document.createTextNode(" " + field.currencytype + " "));
                                                    newElement.prepend(symbolElement);
                                                }
                                                else
                                                {
                                                    symbolElement.append(document.createTextNode("  " + field.currencytype));
                                                    newElement.append(symbolElement);
                                                }

                                                var symbolElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                symbolElement1.prepend('N/A');

                                                newElement.prepend(symbolElement1);


                                            }

                                            else {

                                                var allElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                allElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}} ');

                                                newElement.prepend(allElement);
                                                var allElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                allElement1.prepend('N/A');

                                                newElement.prepend(allElement1);



                                            }
                                        } else {
                                            //  Supported.  Create element (or container) according to type
                                            if (!angular.isDefined(field.model)) {
                                                field.model = id;
                                            }

                                            newElement = angular.element($document[0].createElement(supported[field.type].element));
                                            if (angular.isDefined(supported[field.type].type)) {
                                                newElement.attr('type', supported[field.type].type);
                                            }
//                                            if (angular.isDefined(supported[field.type].class)) {
//                                                newElement.attr('class', supported[field.type].class);
//                                            }

                                            //  Editable fields (those that can feed models)
                                            if (angular.isDefined(supported[field.type].editable) && supported[field.type].editable) {
                                                if (angular.isDefined(field.fromModel) && angular.isDefined(field.toModel)) {
                                                    newElement.attr('name', field.fromModel);
                                                    newElement.attr('from-model', attrs.ngModel + "['" + field.fromModel + "']");
                                                    newElement.attr('name', field.toModel);
                                                    newElement.attr('to-model', attrs.ngModel + "['" + field.toModel + "']");
                                                } else {
                                                    newElement.attr('id', field.model);
                                                    newElement.attr('name', field.model);
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");

                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }
                                                if (angular.isDefined(field.required)) {
                                                    newElement.attr('ng-required', field.required);
                                                }
                                                if (angular.isDefined(field.val)) {
                                                    model[field.model] = angular.copy(field.val);
                                                    newElement.attr('value', field.val);
                                                }
                                            }

                                            //  Fields based on input type=text
                                            if (angular.isDefined(supported[field.type].textBased) && supported[field.type].textBased) {
                                                console.log("inside text")
                                                if (angular.isDefined(field.minLength)) {

                                                    newElement.attr('ng-minlength', field.minLength);
                                                }
                                                newElement.attr('class', 'form-control');
                                                if (angular.isDefined(field.maxLength)) {
                                                    newElement.attr('maxlength', field.maxLength);
                                                }
                                                if (angular.isDefined(field.minLength)) {
                                                    newElement.attr('ng-minlength', field.minLength);
                                                }
                                                if (field.attributes !== undefined && angular.isDefined(field.attributes.maxLength)) {
                                                    newElement.attr('maxlength', field.attributes.maxLength);
                                                }

                                                if (angular.isDefined(field.validate)) {
                                                    newElement.attr('ng-pattern', field.validate);
                                                }
                                                if (angular.isDefined(field.placeholder)) {
                                                    newElement.attr('placeholder', field.placeholder);
                                                }


                                                if (angular.isDefined(field.masked) && field.masked) {

                                                    if (rootScope.viewEncryptedData === false)
                                                    {
                                                        newElement.attr('type', 'password');
                                                    }
                                                }
                                                else
                                                {
                                                    newElement.attr('type', 'text');
                                                }




                                            }
                                            //  Special cases   

                                            if (field.type === 'date') {
                                                newElement.attr('ng-form', 'form1234');
                                            }
                                            if (field.type === 'number' || field.type === 'range') {
                                                console.log("in number")
                                                newElement.attr('numbers-only', true);
                                                if (field.negativeAllowed !== null && field.negativeAllowed !== undefined && (field.negativeAllowed === true || field.negativeAllowed === 'true'))
                                                {
                                                    newElement.attr('negativeallowed', field.negativeAllowed)
                                                }
                                                console.log("decimal ----" + field.decimalallowed + "---" + field.model)

                                                if (field.decimalallowed !== null && field.decimalallowed !== undefined && (field.decimalallowed === true || field.decimalallowed === 'true'))
                                                {
                                                    console.log("if in dec")
                                                    newElement.attr('decimalallowed', true);
                                                } else
                                                {
                                                    console.log("else")
                                                    newElement.attr('decimalallowed', false);
                                                }
                                                if (angular.isDefined(field.min)) {
                                                    newElement.attr('min', field.min);
                                                }
                                                if (angular.isDefined(field.max)) {
                                                    newElement.attr('max', field.max);
                                                }
                                                if (field.type === 'range') {
                                                    if (angular.isDefined(field.step)) {
                                                        newElement.attr('step', field.step);
                                                    }
                                                }


                                            }
                                            else if (['text', 'textarea'].indexOf(field.type) > -1) {
                                                if (angular.isDefined(field.splitBy)) {
                                                    newElement.attr('ng-list', field.splitBy);
                                                }
                                            }
                                            else if (field.type === 'checkbox') {
                                                if (angular.isDefined(field.isOn)) {
                                                    newElement.attr('ng-true-value', field.isOn);
                                                }
                                                if (angular.isDefined(field.isOff)) {
                                                    newElement.attr('ng-false-value', field.isOff);
                                                }
                                                if (angular.isDefined(field.slaveTo)) {
                                                    newElement.attr('ng-checked', field.slaveTo);
                                                }
                                            }
                                            else if (field.type === 'checklist') {

                                                if (angular.isDefined(field.val)) {
                                                    model[field.model] = angular.copy(field.val);
                                                }
                                                if (angular.isDefined(field.values)) {
                                                    if (!(angular.isDefined(model[field.model]) && angular.isObject(model[field.model]))) {
                                                        model[field.model] = {};
                                                    }
                                                    angular.forEach(field.values, function (option, childId) {
                                                        newChild = angular.element('<input type="checkbox" />');
                                                        newChild.attr('name', field.model + '.' + childId);
                                                        newChild.attr('ng-model', attrs.ngModel + "['" + field.model + "']" + "['" + childId + "']");
                                                        if (angular.isDefined(option['class'])) {
                                                            newChild.attr('ng-class', option['class']);
                                                        }
                                                        if (angular.isDefined(field.disabled)) {
                                                            newChild.attr('ng-disabled', field.disabled);
                                                        }
                                                        if (angular.isDefined(field.readonly)) {
                                                            newChild.attr('ng-readonly', field.readonly);
                                                        }
                                                        if (angular.isDefined(field.required)) {
                                                            newChild.attr('ng-required', field.required);
                                                        }
                                                        if (angular.isDefined(field.callback)) {
                                                            newChild.attr('ng-change', field.callback);
                                                        }
                                                        if (angular.isDefined(option.isOn)) {
                                                            newChild.attr('ng-true-value', option.isOn);
                                                        }
                                                        if (angular.isDefined(option.isOff)) {
                                                            newChild.attr('ng-false-value', option.isOff);
                                                        }
                                                        if (angular.isDefined(option.slaveTo)) {
                                                            newChild.attr('ng-checked', option.slaveTo);
                                                        }
                                                        if (angular.isDefined(option.val)) {
                                                            model[field.model][childId] = angular.copy(option.val);
                                                            newChlid.attr('value', field.val);
                                                        }

                                                        if (angular.isDefined(option.label)) {
                                                            newChild = newChild.wrap('<label class="col-md-4"></label>').parent();
                                                            newChild = newChild.append('{{' + attrs.internationalizationLabel + '+\'' + option.label + '\'| translate }}');
//                                                    newChild.append(document.createTextNode(' ' + option.label));
                                                        }
                                                        newElement.append(newChild);
                                                    });
                                                }
                                            }
                                            else if (field.type === 'radio') {
                                                if (angular.isDefined(field.val)) {
                                                    model[field.model] = angular.copy(field.val);
                                                }
                                                if (angular.isDefined(field.values)) {
                                                    angular.forEach(field.values, function (label, val) {
                                                        newChild = angular.element('<input type="radio" />');
                                                        newChild.attr('name', field.model);
                                                        newChild.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                        if (angular.isDefined(field['class'])) {
                                                            newChild.attr('ng-class', field['class']);
                                                        }
                                                        if (angular.isDefined(field.disabled)) {
                                                            newChild.attr('ng-disabled', field.disabled);
                                                        }
                                                        if (angular.isDefined(field.callback)) {
                                                            newChild.attr('ng-change', field.callback);
                                                        }
                                                        if (angular.isDefined(field.readonly)) {
                                                            newChild.attr('ng-readonly', field.readonly);
                                                        }
                                                        if (angular.isDefined(field.required)) {
                                                            newChild.attr('ng-required', field.required);
                                                        }
                                                        newChild.attr('value', parseInt(val));
                                                        if (angular.isDefined(field.val) && field.val === val) {
                                                            newChild.attr('checked', 'checked');
                                                        }

                                                        if (label) {
                                                            newChild = newChild.wrap('<label class="radio-inline"></label>').parent();
//                                                    newChild.append(document.createTextNode(' ' + label));
                                                            newChild = newChild.append('{{' + attrs.internationalizationLabel + '+\'' + label + '\'| translate }}');
//                                                    newChild = newChild.prepend(newChild);
                                                        }
                                                        newElement.append(newChild);
                                                    });
                                                }
                                            }
//                                    
                                            else if (field.type === 'hidden') {
                                                newElement.attr('name', field.model);
                                                newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                if (angular.isDefined(field.val)) {
                                                    model[field.model] = angular.copy(field.val);
                                                    newElement.attr('value', field.val);
                                                }
                                            }
                                            else if (field.type === "fileUpload")
                                            {
                                                var acceptedFormats = JSON.stringify(field.acceptedFormats);
                                                var maxsize = field.maxsize;
                                                var newt = "<div ng-controller='SubentityFileUploadController' flow-file-added='fileAdded($file, $flow," + acceptedFormats + "," + maxsize + "," + field.flowInit.singleFile + ",\"" + attrs.ngModel + "\",\"" + field.model + "\")' flow-file-error='fileError($flow,$file,$message)' flow-file-progress='fileProgress($file);' flow-file-success='fileSuccess($file,$flow,\"" + field.model + "\",\"" + attrs.ngModel + "\"," + field.flowInit.singleFile + " )' flow-files-submitted='$flow.upload()' > </div>";
                                                newElement = newElement.wrap(newt).parent();
                                                newElement.attr('flow-init', "{target: " + "'" + field.flowInit.target + "'" + ",singleFile:" + field.flowInit.singleFile + ", testChunks:" + field.flowInit.testChunks + ",query:{model: '" + field.model + "'}}");
                                                $scope.flag = false;
                                                $scope.UploadedFiles = $scope[attrs.ngModel][field.model];
                                                var length = 0;
                                                if ($scope[attrs.ngModel][field.model]) {
                                                    length = $scope[attrs.ngModel][field.model].length;
                                                }
                                                var spanForChange = angular.element('<button class="btn btn-hkg" ng-hide="flag || ' + attrs.ngModel + "." + field.model + ".length===1 && " + field.flowInit.singleFile + '" flow-btn>Choose File</button>');
                                                newElement.append(spanForChange);
                                                var repeatElement = angular.element('<li class="list-group-item col-md-12"></li>');
                                                repeatElement.prepend('<label>{{file.name}}</label>');
                                                var cancelData = "<span><input type='button' class='btn btn-info pull-right' ng-click='remove(file,\"" + field.model + "\",\"" + attrs.ngModel + "\"," + field.flowInit.singleFile + ")' value='Cancel' /></span>";
                                                var cancelIndividualElement = angular.element(cancelData);
                                                var pauseElement = angular.element('<span ng-click="pause(file)" class="btn btn-info pull-right" ng-show="!file.isComplete()">Pause</span>');
                                                var resumeElement = angular.element('<span ng-click="resume(file)" class="btn btn-info pull-right" ng-show="!file.isComplete()">Resume</span>');
                                                repeatElement.attr('ng-repeat', "file in $flow.files");
                                                var progressElement = angular.element('<div class="progress-bar" aria-valuemax="1" style="color:black;width:  {{(100*file.sizeUploaded()/file.size)| number:0}}%;"> </div>');
                                                var divelement = angular.element('<div class="progress"></div>');
                                                divelement.prepend(progressElement);
                                                repeatElement.prepend(divelement);
                                                repeatElement.prepend(pauseElement);
                                                repeatElement.prepend(resumeElement);
                                                repeatElement.prepend(cancelIndividualElement);
                                                newElement.append(repeatElement);
                                                var tem = "<span class='btn btn-info pull-right' ng-show='$flow.files.length >1' ng-click='cancel($flow,\"" + field.model + "\",\"" + attrs.ngModel + "\" )'>CancelAll</span>";
                                                var cancelallElement = angular.element(tem);
                                                newElement.prepend(cancelallElement);
                                                var repeat = angular.element('<li class="list-group-item col-md-12"></li>');
                                                var repeatData = "fileName in " + attrs.ngModel + "." + field.model + "";
                                                repeat.attr("ng-repeat", repeatData);
                                                var linkElement = angular.element("<a ng-href='api/fileUpload/download?filename={{fileName}}&token={{authToken}}'>{{fileName.substring(fileName.lastIndexOf('@')+1)}}</a>");
                                                repeat.append(linkElement);
                                                var linkCancelElement = angular.element("<span class='glyphicon glyphicon-remove pull-right text-danger' ng-click='removeLink(fileName,\"" + field.model + "\",\"" + attrs.ngModel + "\"," + field.flowInit.singleFile + ")'/>");
                                                repeat.append(linkCancelElement);
                                                repeat.wrap('<div style="position:relative"> </div>').parent();
                                                var downloadAllLinkElement = angular.element("<a ng-show=\"" + attrs.ngModel + '.' + field.model + ' && !(' + attrs.ngModel + '.' + field.model + '.length <= 1)' + " ng-href='api/fileUpload/downloadAll?filenames={{" + attrs.ngModel + '.' + field.model + "}}&token={{authToken}}'>DownLoadAll</a>");
                                                newElement.append(repeat);
                                                newElement.append(downloadAllLinkElement);
                                            }
                                            else if (field.type === 'file') {
                                            }
                                            else if (field.type === 'fileDownload') {
                                                var newt = "<div> </div>";
                                                newElement = newElement.wrap(newt).parent();
                                                var repeatElement = angular.element('<li class="list-group-item"></li>');
                                                var repeatData = "fileName in [" + field.data + "]";
                                                repeatElement.attr("ng-repeat", repeatData);
                                                var temp = angular.element("<a ng-href='api/fileUpload/download?filename={{fileName}}&token={{authToken}}'>{{fileName}}</a>");
                                                repeatElement.prepend(temp);
                                                newElement.append(repeatElement);
                                            }
                                            else if (field.type === 'imageUpload') {
                                                var imageFileFormat = JSON.stringify(field.fileFormat);
                                                var maxsize = field.maxsize;
                                                newElement.attr('flow-btn', "true");
                                                newElement.attr('singleFile', "true");
                                                var newt = "<div ng-controller='SubentityImageUploadController' flow-file-added='fileAdded($file, $flow," + imageFileFormat + "," + maxsize + ")' flow-file-error='fileError($flow,$file,$message)' flow-file-completed='complete($file)' flow-file-progress='fileProgress($file);' flow-file-success='fileSuccess($file,$flow,\"" + field.model + "\",\"" + attrs.ngModel + "\"," + field.flowInit.singleFile + " )'   flow-files-submitted='$flow.upload()' > </div>"
                                                newElement = newElement.wrap(newt).parent();
                                                var booleanFlag = "true";
                                                newElement.attr('flow-init', "{target: " + "'" + field.flowInit.target + "'" + ",singleFile:" + field.flowInit.singleFile + ", testChunks:" + booleanFlag + ",query:{model: '" + field.model + "'}}");
                                                var thumbnailElementForImage = angular.element('<div class="thumbnail col-md-11" ng-show="' + attrs.ngModel + '.' + field.model + '" style="margin-bottom:0px;></div>');
                                                var imageElement = angular.element('<img ng-src="{{' + attrs.ngModel + field.model + '}}"  style= "width:' + field.width + ';height:' + field.height + '" />');
                                                thumbnailElementForImage = thumbnailElementForImage.prepend(imageElement);
                                                newElement.prepend(thumbnailElementForImage);
                                                var thumbnailElement = angular.element('<div class="thumbnail" ng-show="!' + attrs.ngModel + '.' + field.model + '" style="margin-bottom:0px;></div>');
                                                var noimageElement = angular.element('<img src="images/noImage.gif" />');
                                                thumbnailElement = thumbnailElement.prepend(noimageElement);
                                                newElement.prepend(thumbnailElement);
                                                var remove = "<span style='display:inline;font-size:18px;cursor: pointer;' title='Remove image' ng-click='remove(\"" + field.model + "\",\"" + attrs.ngModel + "\")' ng-show='" + attrs.ngModel + "." + field.model + "'' class='glyphicon glyphicon-remove text-danger'></span>";//Remove
                                                var removeElement = angular.element(remove);
                                                newElement.append(removeElement);
                                                newElement.append(removeElement);
                                                var wrapElm = angular.element("<div class='text-right' ng-class=\"{'col-md-11':" + attrs.ngModel + "." + field.model + ",'col-md-12':!" + attrs.ngModel + "." + field.model + "}\"></div>");
                                                var topElm = '<div class="row"></div>';
                                                var change = "<span  class='glyphicon glyphicon-folder-open text-info' style='font-size:18px;cursor: pointer;' title='Upload from drive'  ng-show='" + attrs.ngModel + "." + field.model + "' flow-btn></span>";//Change
                                                var spanForChange = angular.element(change);
                                                wrapElm.append(spanForChange);
                                                var spanForSelect = angular.element('<span class="glyphicon glyphicon-folder-open text-info" title="Upload from drive" style="font-size:18px;cursor: pointer;" ng-model="file.name" ng-show="!' + attrs.ngModel + '.' + field.model + '" flow-btn=""></span>');//Choose file
                                                var spanForCamera = angular.element('<camera style="display:inline;" model-name="' + field.model + '" unique-id="' + field.model + '_sub_entity" model-value="' + attrs.ngModel + '.' + field.model + '" is-custom="true"></camera>');
                                                wrapElm.append(spanForSelect);
                                                wrapElm.append(spanForCamera);
                                                var element = angular.element(' <a class="col-md-offset-1" ng-href="api/surveys/download?filename={{file.fileName}}&token={{authToken}}">{{file.fileName}} </a>');
                                                wrapElm.append(element);
                                                wrapElm = wrapElm.wrap(topElm).parent();
                                                newElement.append(wrapElm);
                                            }
                                            else if (field.type === 'percent')
                                            {
//                                        
                                                newElement.attr('numbers-only', true);
                                                if (field.negativeAllowed !== null && field.negativeAllowed !== undefined && (field.negativeAllowed === true || field.negativeAllowed === 'true'))
                                                {
                                                    newElement.attr('negativeallowed', field.negativeAllowed)
                                                }
                                                if (field.decimalallowed !== null && field.decimalallowed !== undefined && (field.decimalallowed === true || field.decimalallowed === 'true'))
                                                {
                                                    newElement.attr('decimalallowed', field.decimalallowed);
                                                }
                                                if (angular.isDefined(field.required)) {

                                                    newElement.attr('ng-required', field.required);
                                                }
                                                if (angular.isDefined(field.min)) {
                                                    newElement.attr('min', field.min);
                                                }
                                                if (angular.isDefined(field.max)) {
                                                    newElement.attr('max', field.max);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }
                                                newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                newElement = newElement.wrap('<div class="input-group"> </div>').parent();
                                                var suffixElement = angular.element('<div class="input-group-addon"></div>');
                                                suffixElement.append(document.createTextNode("%"));
                                                newElement.append(suffixElement);

                                            }
                                            else if (field.type === 'Angle')
                                            {
                                                if (field.attributes.negativeAllowed && angular.isDefined(field.attributes.negativeAllowed))
                                                {
//                                              newElement.attr('numbers-only', false); 
//                                               newElement.attr('decimalallowed', false);
                                                } else
                                                {
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                }
                                                if (angular.isDefined(field.required)) {

                                                    newElement.attr('ng-required', field.required);
                                                }
                                                if (angular.isDefined(field.min)) {
                                                    newElement.attr('min', field.min);
                                                }
                                                if (angular.isDefined(field.max)) {
                                                    newElement.attr('max', field.max);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }

                                                newElement = newElement.wrap('<div class="input-group"> </div>').parent();

                                                var suffixElement = angular.element('<div class="input-group-addon" ><span class="">&#176</span></div>');
                                                newElement.append(suffixElement);
                                                newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");

                                            }
                                            else if (field.type === 'currency') {

                                                if (field.attributes.negativeAllowed && angular.isDefined(field.attributes.negativeAllowed))
                                                {
//                                              newElement.attr('numbers-only', false); 
//                                               newElement.attr('decimalallowed', false);
                                                } else
                                                {
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                }
//                                            newElement.attr('currencyallowed', true);
                                                if (angular.isDefined(field.required)) {

                                                    newElement.attr('ng-required', field.required);
                                                }
                                                if (angular.isDefined(field.min)) {
                                                    newElement.attr('min', field.min);
                                                }
                                                if (angular.isDefined(field.max)) {
                                                    newElement.attr('max', field.max);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }
                                                if (angular.isDefined(field.readonly)) {
                                                    newElement.attr('ng-readonly', field.readonly);
                                                }

                                                newElement = newElement.wrap('<div class="input-group"> </div>').parent();


                                                if (field.currencyPrefix === 'P')
                                                {
                                                    var prefixElement = angular.element('<span class="input-group-addon"></span>');
                                                    prefixElement.prepend(document.createTextNode("" + field.currencytype));
                                                    newElement.prepend(prefixElement);
                                                }
                                                else
                                                {
                                                    var suffixElement = angular.element('<span class="input-group-addon"></span>');
                                                    suffixElement.append(document.createTextNode("" + field.currencytype));
                                                    newElement.append(suffixElement);
                                                }


                                                newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                            }

                                            else if (field.type === 'date' && field.attributes && field.attributes.type && (field.attributes.type === 'timerange' || field.attributes.type === 'daterange' || field.attributes.type === 'datetimerange')) {
                                                newElement.attr('submitted', submitFlagName);
                                                newElement.attr('form', attrs.formName);
                                                if (!attrs.noOfFieldPerRow || attrs.noOfFieldPerRow === 1) {
                                                    newElement.attr('input-class', 'col-md-12');
                                                    newElement.attr('label-class', 'col-md-12 text-center');
                                                } else {
                                                    newElement.attr('input-class', attrs.inputCss);
                                                    newElement.attr('label-class', attrs.labelCss);
                                                }
                                                newElement.attr('to-label', 'To');
                                                newElement.attr('from-label', 'From');
                                            }
                                            else if (field.type === 'fieldset') {
                                                if (angular.isDefined(field.fields)) {
                                                    var workingElement = newElement;
                                                    angular.forEach(field.fields, buildFields, newElement);
                                                    newElement = workingElement;
                                                }
                                            }

                                            //  Common attributes; radio already applied these...
                                            if (field.type !== "radio") {
                                                if (angular.isDefined(field['class'])) {
                                                    newElement.attr('ng-class', field['class']);
                                                }
                                                //  ...and checklist has already applied these.
                                                if (field.type !== "checklist") {
                                                    if (angular.isDefined(field.disabled)) {
                                                        newElement.attr('ng-disabled', field.disabled);
                                                    }
                                                    if (angular.isDefined(field.callback)) {
                                                        //  Some input types need listeners on click...
                                                        if (["button", "fieldset", "image", "legend", "reset", "submit"].indexOf(field.type) > -1) {
                                                            cbAtt = 'ng-click';
                                                        }
                                                        //  ...the rest on change.
                                                        else {
                                                            cbAtt = 'ng-change';
                                                        }
                                                        newElement.attr(cbAtt, field.callback);
                                                    }
                                                }
                                            }
                                            if (field.type === 'imageUpload')
                                            {
                                                var temp = attrs.ngModel + "." + field.model;
                                                $scope.$watch(temp, function () {
                                                    $scope.imgsrc = $scope[attrs.ngModel][field.model];
                                                    var a = '';
                                                    if ($scope[attrs.ngModel][field.model]) {
                                                        a = a + $scope[attrs.ngModel][field.model];
                                                    }
                                                    var img = attrs.ngModel + field.model;
                                                    $scope[img] = rootScope.appendAuthToken("api/fileUpload/getimage?file_name=" + a);
                                                });
                                            }

                                            // Arbitrary attributes
                                            if (angular.isDefined(field.attributes)) {
                                                angular.forEach(field.attributes, function (val, attr) {
                                                    if (attr !== 'maxLength') {
                                                        newElement.attr(attr, val);
                                                    }
                                                });
                                            }
                                        }

                                        //  If there's a label, add it.
                                        if (angular.isDefined(field.label)) {
//                                        if (!attrs.viewOnly) {
                                            //  Some elements have already applied their labels.
                                            if (["image", "hidden"].indexOf(field.type) > -1) {
                                                angular.noop();
                                            }
                                            //  Fieldset elements put their labels in legend child elements.
                                            else if (["fieldset"].indexOf(field.type) > -1) {
                                                newElement.prepend(angular.element($document[0].createElement('legend')).html(field.label));
                                            }
                                            //  Button elements get their labels from their contents.
                                            else if (["button", "legend", "reset", "submit"].indexOf(field.type) > -1) {
                                                newElement.html('{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                            } else {
                                                //  Everything else should be wrapped in a label tag.
//                                            if (angular.isDefined(field.hint)) {
//                                                 
//                                                  newElement = newElement.wrap('<div class=""> </div>').parent();
//                                         
//                                                var hintElement =  angular.element("<span class='position:relative  '  tooltip=" + field.hint + " tooltip-trigger=mouseenter tooltip-placement=right>?</span>");
//                                                newElement = newElement.append(hintElement);
//                                            }
                                                if (mainDiv === null) {
                                                    mainDiv = angular.element('<div class="form-group" ></div>');
                                                }

                                                if (field.type !== 'checkbox' && !(field.type === 'date' && field.attributes && (field.attributes.type === 'timerange' || field.attributes.type === 'datetimerange' || field.attributes.type === 'daterange'))) {
//                                                    alert('1');

                                                } else if ((!attrs.noOfFieldPerRow || attrs.noOfFieldPerRow === 1) && field.type !== 'checkbox') {
//                                                    newElement = newElement.wrap('<div class="' + attrs.inputCss + '"></div>').parent();
                                                } else if (field.type === 'checkbox') {
//                                                    alert('3');

                                                    if (field.formatValue === 'before') {
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div class="col-md-4 control-label"></div>').parent();
                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div class="col-md-3 control-label"></div>').parent();
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:25px;"></div>').parent();
                                                        }

//                                                        newElement = newElement.wrap('<div class="col-lg-11 col-md-11 col-xs-12"></div>').parent();
                                                    } else if (field.formatValue === 'after') {
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div class="col-md-8 control-label" style="text-align:left"></div>').parent();
                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div class="col-md-8 control-label" style="text-align:left"></div>').parent();
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div  style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:20px;"></div>').parent();
                                                        }
                                                    }
                                                    newElement = newElement.wrap('<div ng-class="{\'has-error\': ' + attrs.formName + '.' + field.model + '.$invalid && (' + submitFlagName + ') }"  ></div>').parent();
                                                }
                                                if (field.type !== 'checkbox') {
                                                    if (elementPerRow === 3) {
                                                        newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.formName + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" class="col-md-10"></div>').parent();
                                                    }
                                                    if (elementPerRow === 2) {
                                                        newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.formName + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" class="col-md-8 form-control-static"></div>').parent();
                                                    }
                                                    if (elementPerRow === 10) {
                                                        newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.formName + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:0px;padding-right:0px;"></div>').parent();
                                                    }

                                                }
                                                if (field.type === 'textarea' && field.attributes && field.attributes.maxLength) {
                                                    var textNumElement = angular.element("<div class='pull-right center'>{{" + field.attributes.maxLength + " - " + attrs.ngModel + "." + field.model + ".length}}&nbsp;  {{entity + 'characters left'| translate }}</div>");
                                                    newElement = newElement.append(textNumElement);
                                                    var clearfix = "<div class='clearfix'></div>";
                                                    newElement = newElement.append(clearfix);
                                                }
                                                if (field.type === 'number' || field.type === 'percent' || field.type === 'currency' || field.type === 'date')
                                                {
                                                    var divvElement = angular.element('<div id="const_' + field.model + '" class="text-danger error,help-block ng-hide" > Invalid value constraint </div>');
                                                    newElement = newElement.append(divvElement);
                                                }
                                                if (field.type === 'date') {
                                                    var divElement = angular.element('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.min">' + field.label + ' violates minimum constraint </span>');
                                                    newElement = newElement.append(divElement);
                                                    divElement = angular.element('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.max">' + field.label + ' violates maximum constraint</span>');
                                                    newElement = newElement.append(divElement);
                                                    divElement = angular.element('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.date">' + field.label + ' invalid date format</span>');
                                                    newElement = newElement.append(divElement);
                                                }
                                                if (field.type !== 'checkbox') {

                                                    var divElement = angular.element(' <div ng-show="(' + attrs.formName + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.formName + '.' + field.model + '.$invalid" class="error,help-block" ></div>');

                                                    if (field.type !== 'number' && field.type !== 'percent' && field.type !== 'Angle' && field.type !== 'currency')
                                                    {
                                                        console.log("if...." + field.model)
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid</span>');
                                                        newElement = newElement.append(divElement);
                                                    }

                                                    divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.minlength">' + field.label + ' must contain at least ' + field.minLength + ' characters</span>');
                                                    newElement = newElement.append(divElement);
                                                    divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.maxlength">' + field.label + ' length exceeded</span>');
                                                    newElement = newElement.append(divElement);
                                                }
                                                if (angular.isDefined(field.required) && field.required === true && field.type !== 'checkbox') {
                                                    if (field.type === 'date') {
                                                        divElement = divElement.prepend('<span class="help-block" ng-show="' +
                                                                attrs.formName + '.' + field.model + '.$error.required && !(' +
                                                                attrs.formName + '.' + field.model + '.$error.min || ' +
                                                                attrs.formName + '.' + field.model + '.$error.max || ' +
                                                                attrs.formName + '.' + field.model + '.$error.date) && ' +
                                                                submitFlagName + '">' + field.label + '  should not be empty</span>');
                                                    } else {
                                                        divElement = divElement.prepend('<span class="help-block" ng-show="' + attrs.formName + '.' + field.model + '.$error.required && ' + submitFlagName + '">' + field.label + '  should not be empty</span>');
                                                    }
                                                    newElement = newElement.append(divElement);
                                                }
                                                if (field.type === 'number' || field.type === 'percent' || field.type === 'Angle' || field.type === 'currency')
                                                {
                                                    console.log("min.." + field.min + "---max" + field.max)
                                                    if (field.min !== undefined && field.max !== undefined) {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-show="' + attrs.formName + '.' + field.model + '.$error.min || ' + attrs.formName + '.' + field.model + '.$error.max"> Invalid value. Entered value should be between ' + field.min + ' and ' + field.max + ' </span>');
                                                        newElement = newElement.append(divElement);
                                                    } else
                                                    if (field.min !== undefined) {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-show="' + attrs.formName + '.' + field.model + '.$error.min "> Invalid value. Entered value should be >=' + field.min + ' </span>');
                                                        newElement = newElement.append(divElement);
                                                    }
                                                    else if (field.max !== undefined) {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-show="' + attrs.formName + '.' + field.model + '.$error.max "> Invalid value. Entered value should be <= ' + field.max + ' </span>');
                                                        newElement = newElement.append(divElement);
                                                    }
                                                    else
                                                    {

                                                    }
                                                    if (field.digitsBeforeDecimal !== undefined && field.digitsAfterDecimal !== undefined)
                                                    {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid.Digits before decimal should be' + field.digitsBeforeDecimal + ' and after decimal should be ' + field.digitsAfterDecimal + '</span>');
                                                        newElement = newElement.append(divElement);
                                                    }
                                                    else
                                                    if (field.digitsBeforeDecimal !== undefined)
                                                    {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid.No decimal allowed.Only ' + field.digitsBeforeDecimal + ' digits allowed.</span>');

                                                        newElement = newElement.append(divElement);

                                                    } else if (field.digitsAfterDecimal !== undefined)
                                                    {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid.Digits after decimal should be' + field.digitsAfterDecimal + '</span>');
                                                        newElement = newElement.append(divElement);


                                                    } else
                                                    {
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.formName + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid.');
                                                        newElement = newElement.append(divElement);

                                                    }

                                                }
                                                if (field.type !== 'checkbox') {
                                                    if (elementPerRow === 2) {
                                                        if (attrs.viewOnly)
                                                        {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '" class="col-lg-6 col-md-6 col-xs-12  " style="padding-left:0px;padding-right:0px " ></div>').parent();
                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '" class="col-lg-6 col-md-6 col-xs-12  " style="padding-left:0px;padding-right:0px " ></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }
                                                    }
                                                    if (elementPerRow === 3) {
                                                        if (attrs.viewOnly) {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '" class="col-lg-4 col-md-4 col-xs-12 " style="padding-left:0px;padding-right:0px "></div>').parent();

                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '" class="col-lg-4 col-md-4 col-xs-12 " style="padding-left:0px;padding-right:0px "></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }
                                                    }
                                                    if (elementPerRow === 10) {
                                                        if (attrs.viewOnly) {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '"   style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px ng-hide"></div>').parent();

                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '"   style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px ng-hide"></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }
                                                    }
                                                }

                                                if (angular.isDefined(field.required) && field.required === true) {

                                                    if (field.type === 'checkbox') {

                                                        if (field.formatValue === "before") {
                                                            if (elementPerRow === 2 || elementPerRow === 3) {
                                                                var element = angular.element('<div class="col-md-8 control-label " style="text-align:left"></div>');
                                                            }

                                                            if (elementPerRow === 10) {
                                                                var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></div>');
                                                                if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                    var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                    field.label = field.label.slice(0, 4);
//                                                         
                                                                }
                                                            }
                                                            var labelElement = angular.element('<label for="' + field.model + '"></label>');
                                                            var elementAsterik = angular.element('<span style="color:red"></span');
                                                            elementAsterik = elementAsterik.append('&nbsp;*');
                                                            labelElement = labelElement.append(elementAsterik);
                                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                            labelElement = labelElement.append(labelTooltipElement);
                                                            element = element.append(labelElement);
                                                            newElement = newElement.append(element);
                                                        } else if (field.formatValue === "after") {

                                                            if (elementPerRow === 2) {
                                                                var element = angular.element('<div class="col-md-4 control-label "></div>');
                                                            }
                                                            if (elementPerRow === 3) {
                                                                var element = angular.element('<div class="col-md-4 control-label wordRap" style="padding-right:0px"></div>');
                                                            }
                                                            if (elementPerRow === 10) {
                                                                var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></div>');
                                                                if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                    var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                    field.label = field.label.slice(0, 4);
                                                                    //                                                         
                                                                }
                                                            }
                                                            var labelElement = angular.element('<label for="' + field.model + '"></label>');
                                                            var elementAsterik = angular.element('<span style="color:red"></span');
                                                            elementAsterik = elementAsterik.append('&nbsp;*');
                                                            labelElement = labelElement.append(elementAsterik);
                                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                            labelElement = labelElement.append(labelTooltipElement);
                                                            element = element.append(labelElement);
                                                            newElement = newElement.prepend(element);
                                                        }
                                                        var clearfixElement = angular.element(' <div class="clearfix"></div>');
                                                        newElement = newElement.append(clearfixElement);
                                                        if (elementPerRow === 2) {
                                                            var divElement = angular.element(' <div ng-show="(' + attrs.formName + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.formName + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 38%;" ></div>');
                                                        }
                                                        if (elementPerRow === 3) {
                                                            var divElement = angular.element(' <div ng-show="(' + attrs.formName + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.formName + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 6%;" ></div>');
                                                        }
                                                        if (elementPerRow === 10) {
                                                            var divElement = angular.element(' <div ng-show="(' + attrs.formName + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.formName + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 10%;" ></div>');
                                                        }


                                                        divElement = divElement.prepend('<span class="help-block" ng-show="' + attrs.formName + '.' + field.model + '.$error.required && ' + submitFlagName + '">' + field.label + '  should not be empty</span>');
                                                        newElement = newElement.append(divElement);
                                                    } else {
                                                        if (elementPerRow === 2) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-4 control-label "></label>');
                                                        } else if (elementPerRow === 3) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-4 control-label" style="text-align:left"></label>')
                                                        }
                                                        else if (elementPerRow === 10) {
                                                            var labelElement = angular.element('<label  for = "' + field.model + '" class = "col-md-12 control-label" style = "text-align:left;padding-left:0px;padding-right:0px" </label>');
                                                            if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                field.label = field.label.slice(0, 4);
                                                                //                                                                alert(field.label);
                                                            }

                                                        }

                                                        var wrapElement;
                                                        if (angular.isDefined(field.hint) && field.hint.length > 0) {
                                                            var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
                                                            if (labelElement.hasClass('col-md-4')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-4 text-right"></div>').parent();
                                                                labelElement.removeClass('col-md-4');
                                                            }
                                                            if (labelElement.hasClass('col-md-12')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-12"></div>').parent();
                                                                labelElement.removeClass('col-md-12');
                                                            }
                                                            labelElement.css("display", "inline");
//                                                            labelElement = labelElement.append(hintElement);
                                                        }
                                                        var elementAsterik = angular.element('<span style="color:red"></span');
                                                        elementAsterik = elementAsterik.append('&nbsp;*');
                                                        labelElement = labelElement.append(elementAsterik);
                                                        labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                        labelElement = labelElement.append(labelTooltipElement);
                                                        if (angular.isDefined(wrapElement)) {
                                                            labelElement = wrapElement.append(labelElement);
                                                        }
                                                        newElement = newElement.prepend(labelElement);
                                                    }
                                                }
                                                else {
                                                    if (field.type === 'checkbox') {
                                                        if (field.formatValue === "before") {
                                                            if (elementPerRow === 2 || elementPerRow === 3) {
                                                                var element = angular.element('<div class="col-md-8 control-label " style="text-align:left"></div>');
                                                            }
                                                            if (elementPerRow === 10) {
                                                                var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:5px; padding-right:0px"></div>');
                                                                if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                    var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                    field.label = field.label.slice(0, 4);
                                                                }
                                                            }
                                                            var labelElement = angular.element('<label for="' + field.model + '"></label>');
                                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                            labelElement = labelElement.append(labelTooltipElement);
                                                            element = element.append(labelElement);
                                                            newElement = newElement.append(element);
                                                        } else if (field.formatValue === "after") {
                                                            if (elementPerRow === 2) {
                                                                var element = angular.element('<div class="col-md-4 control-label "></div>');
                                                            }
                                                            if (elementPerRow === 3) {
                                                                var element = angular.element('<div class="col-md-4 control-label wordRap" style="padding-right:0px"></div>');
                                                            }
                                                            if (elementPerRow === 10) {
                                                                var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:5px; padding-right:0px"></div>');
                                                                if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                    var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                    field.label = field.label.slice(0, 4);
//                                                         
                                                                }
                                                            }
                                                            var labelElement = angular.element('<label for="' + field.model + '"></label>');
                                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                            labelElement = labelElement.append(labelTooltipElement);
                                                            element = element.append(labelElement);
                                                            newElement = newElement.prepend(element);
                                                        }
                                                    } else {
                                                        //                                                      
                                                        if (elementPerRow === 2) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-4 control-label "></label>');
                                                        }
                                                        if (elementPerRow === 3) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-4 control-label" style="text-align:left"></label>');
                                                        }
                                                        else if (elementPerRow === 10) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></label>');
                                                            if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign"  tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                field.label = field.label.slice(0, 4);
                                                            }
                                                        }
                                                        labelElement = labelElement.append('{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                        var wrapElement;
                                                        if (angular.isDefined(field.hint) && field.hint.length > 0) {
                                                            var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
                                                            if (labelElement.hasClass('col-md-4')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-4 text-right"></div>').parent();
                                                                labelElement.removeClass('col-md-4');
                                                            }
                                                            if (labelElement.hasClass('col-md-12')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-12"></div>').parent();
                                                                labelElement.removeClass('col-md-12');
                                                            }
                                                            labelElement.css("display", "inline");
//                                                            labelElement = labelElement.append(hintElement);
                                                        }
                                                        labelElement = labelElement.append(labelTooltipElement);
                                                        if (angular.isDefined(wrapElement)) {
                                                            labelElement = wrapElement.append(labelElement);
                                                        }
                                                        newElement = newElement.prepend(labelElement);
                                                    }
                                                }
                                                if (field.type === 'checkbox') {
                                                    if (elementPerRow === 2) {
                                                        if (attrs.viewOnly) {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '" class="col-lg-6 col-md-6 col-xs-12" style="padding-left:0px;padding-right:0px "></div>').parent();

                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '" class="col-lg-6 col-md-6 col-xs-12" style="padding-left:0px;padding-right:0px "></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }

                                                    }
                                                    if (elementPerRow === 3) {
                                                        if (attrs.viewOnly) {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '" class="col-lg-4 col-md-4 col-xs-12" style="padding-left:0px;padding-right:0px "></div>').parent();

                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '" class="col-lg-4 col-md-4 col-xs-12" style="padding-left:0px;padding-right:0px "></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }
                                                    }
                                                    if (elementPerRow === 10) {
                                                        if (attrs.viewOnly) {
                                                            newElement = newElement.wrap('<div  id="dv_view_' + field.modelWithoutSeperators + '" style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px"></div>').parent();

                                                        } else {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.modelWithoutSeperators + '" style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px"></div>').parent();
                                                        }
                                                        if (field.isDependant)
                                                        {
                                                            newElement.addClass('ng-hide');
                                                        }
                                                        else
                                                        {
                                                            if (newElement.hasClass('ng-hide'))
                                                            {
                                                                newElement.removeClass('ng-hide');
                                                            }

                                                        }
                                                    }
                                                }
                                            }
//                                        }
//                                        else {
//                                            if (mainDiv === null) {
//
//                                                mainDiv = angular.element('<div  class="form-group row"></div>');
//                                            }
//                                            newElement = newElement.wrap('<div class="' + attrs.inputCss + '"></div>').parent();
//                                            newElement = newElement.wrap('<div  class="form-group row"></div>').parent();
//                                            var labelElement = angular.element('<label for="' + field.model + '"class="' + attrs.labelCss + '"></label>');
//                                            //                                                labelElement = labelElement.prepend(document.createTextNode(field.label + ' '));
//
//                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                            if (angular.isDefined(field.hint) && field.hint.length > 0) {
//                                                var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
//                                                labelElement = labelElement.prepend(hintElement);
//                                            }
//                                            newElement = newElement.prepend(labelElement);
//                                            //                                            newElement = newElement.append(' <div class="row">&nbsp;</div>')
//                                        }
                                        }
                                        //                                    if (!field.isDependant) {
                                        //                                    mainDiv = mainDiv.add('ng-show', !field.isDependant);
//                                    if (field.isDependant)
//                                    {
//                                        mainDiv.addClass('ng-hide');
//                                    }
//                                    else
//                                    {
//                                        if (mainDiv.hasClass('ng-hide'))
//                                        {
//                                            mainDiv.removeClass('ng-hide');
//                                        }
//
//                                    }

                                        mainDiv = mainDiv.append(newElement);
                                        // Add the element to the page
                                        elementCnt++;
//                                    console.log(elementCnt % elementPerRow);
//                                            alert('lenght ::::::::: >> ' + template.length + "elemnet count" + elementCnt);
                                        if (elementCnt % elementPerRow === 0) {
                                            //                                        alert('inside modulo......' + elementCnt);

                                            this.append(mainDiv);
                                            //                                        this.append('<div class="row">&nbsp;</div>')
                                            mainDiv = null;
                                        }
                                        // for handling even num of elments
                                        else if (template.length % 2 === 0)
                                        {
                                            if (template.length - 1 === elementCnt)
                                            {
                                                //                                        alert('same' +(attrs.dbMap.length + 1)+'----->>'+elementCnt);
                                                if (elementCnt % elementPerRow !== 0) {
//                                            alert('not equals 0 ');
                                                    this.append(mainDiv);
                                                    this.append('<div class="row">&nbsp;</div>');
                                                }
                                            }
                                        }
                                        // for handling odd num of elemnts
                                        else if (template.length % 2 !== 0)
                                        {
                                            if (template.length === elementCnt)
                                            {
                                                //                                        alert('same' +(attrs.dbMap.length + 1)+'----->>'+elementCnt);
                                                if (elementCnt % elementPerRow !== 0) {
//                                            alert('not equals 0 ');
                                                    this.append(mainDiv);
                                                    this.append('<div class="row">&nbsp;</div>');
                                                }
                                            }
                                        }
//                                            else if (template.length === elementCnt) {
//                                                //                                        alert('same' +(attrs.dbMap.length + 1)+'----->>'+elementCnt);
//                                                if (elementCnt % elementPerRow !== 0) {
////                                            alert('not equals 0 ');
//                                                    this.append(mainDiv);
//                                                    this.append('<div class="row">&nbsp;</div>');
//                                                }
//                                            }
                                        newElement = null;
                                    }
                                };
                                angular.forEach(template, buildFields, element);
                                //  Determine what tag name to use (ng-form if nested; form if outermost)
                                while (!angular.equals(iterElem.parent(), $document) && iterElem.parent().length) {
                                    if (['form', 'ngForm'].indexOf(attrs.$normalize(angular.lowercase(iterElem.parent()[0].nodeName))) > -1) {
                                        foundOne = true;
                                        break;
                                    }
                                    iterElem = iterElem.parent();
                                }
                                if (foundOne) {
//                                newElement = angular.element($document[0].createElement('ng-form'));
                                    newElement = angular.element("<ng-form name=" + attrs.formName + "></ng-form>");
                                }
                                else {
                                    newElement = angular.element("<form></form>");
                                }

                                //  Psuedo-transclusion
                                angular.forEach(attrs.$attr, function (attName, attIndex) {
                                    newElement.attr(attName, attrs[attIndex]);
                                });
                                newElement.attr('model', attrs.ngModel);
                                newElement.removeAttr('ng-model');
                                angular.forEach(element[0].classList, function (clsName) {
                                    newElement[0].classList.add(clsName);
                                });
                                newElement.addClass('dynamic-form');
                                newElement.append(element.contents());
                                //  onReset logic
                                newElement.data('$_cleanModel', angular.copy(model));
                                newElement.bind('reset', function () {
                                    $timeout(function () {
                                        $scope.$broadcast('reset', arguments);
                                    }, 0);
                                });
                                $scope.$on('reset', function () {
                                    $scope.$apply(function () {
                                        $scope[attrs.ngModel] = {};
                                    });
                                    $scope.$apply(function () {
                                        $scope[attrs.ngModel] = angular.copy(newElement.data('$_cleanModel'));
                                    });
                                });
                                //  Compile and update DOM
                                $compile(newElement)($scope);
                                element.replaceWith(newElement);
                            });
                        }
                    }, true);
                };
                render();
            };
            return {
                restrict: 'E',
                transclude: true,
                link: link
            };

        }]);
    //  Not a fan of how Angular's ngList is implemented, so here's a better one (IMO).  It will ONLY
    //  apply to <dynamic-form> child elements, and replaces the ngList that ships with Angular.
    globalProvider.compileProvider.directive('ngList', [function () {
            return {
                require: '?ngModel',
                link: function (scope, element, attr, ctrl) {
                    var match = /\/(.*)\//.exec(element.attr(attr.$attr.ngList)),
                            separator = match && new RegExp(match[1]) || element.attr(attr.$attr.ngList) || ',';
                    if (element[0].form !== null && !angular.element(element[0].form).hasClass('dynamic-form')) {
                        return;
                    }

                    ctrl.$parsers.splice(0, 1);
                    ctrl.$formatters.splice(0, 1);
                    ctrl.$parsers.push(function (viewValue) {
                        var list = [];
                        if (angular.isString(viewValue)) {
                            //  Don't have Angular's trim() exposed, so let's simulate it:
                            if (String.prototype.trim) {
                                angular.forEach(viewValue.split(separator), function (value) {
                                    if (value)
                                        list.push(value.trim());
                                });
                            }
                            else {
                                angular.forEach(viewValue.split(separator), function (value) {
                                    if (value)
                                        list.push(value.replace(/^\s*/, '').replace(/\s*$/, ''));
                                });
                            }
                        }

                        return list;
                    });
                    ctrl.$formatters.push(function (val) {
                        var joinBy = angular.isString(separator) && separator || ', ';
                        if (angular.isArray(val)) {
                            return val.join(joinBy);
                        }

                        return undefined;
                    });
                }
            };
        }]);
    globalProvider.controllerProvider.register('SubentityFileUploadController', ["$rootScope", "$scope",
        "fileuploadservice", function ($rootScope, $scope,
                fileuploadservice) {
            $scope.UploadedFiles = [];
            $scope.addFileToArray = function (fileName) {
                $rootScope.uploadingFiles.fileName.push(fileName);
            };
            $scope.removeFileFromArray = function (fileName) {
                var index = $rootScope.uploadingFiles.fileName.indexOf(fileName);
                $rootScope.uploadingFiles.fileName.splice(index, 1);
            };
            $scope.fileAdded = function (file, flow, filetype, maxsize, singleFile, parent, modelName) {

                if (!filetype || !!filetype[file.getExtension()]) {
                    if (!maxsize || maxsize > file.size) {
                        if (parent && modelName) {
                            if ($scope[parent][modelName]) {
                                var fileList = $scope[parent][modelName];
                                for (var i = 0; i < fileList.length; i++) {
                                    var fileSavedName = fileList[i];
                                    if (fileSavedName.indexOf(file.name) > -1)
                                    {
                                        alert("file name(" + file.name + ") already exist")
                                        $scope.InvalidFileFlag = true;
                                        return false;
                                    }
                                }
                            }
                        }
                        $scope.InvalidFileFlag = false;
                        $scope.addFileToArray(file.name);
                        if (singleFile) {

                            $scope.flag = true;
                        }
                        return true;
                    }
                    else {
                        alert(file.name + " has invalid size.. max upload size is " + (maxsize / (1024 * 1024)) + " MB");
                        $scope.InvalidFileFlag = true;
                        return false;
                    }
                } else {
                    alert(file.name + "has invalid extension " + file.getExtension() + "\n\extension allowed are : " + filetype);
                    $scope.InvalidFileFlag = true;
                    return false;
                }
            };
            $scope.fileError = function (file, message)
            {
                $scope.removeFileFromArray(file.name);
            }
            ;
            $scope.fileSuccess = function (file, flow, modelName, parent, singleFile) {
                var info = [file.name, modelName];
                fileuploadservice.uploadFiles(info, function (result) {
                    if (result.res) {
                        if (singleFile) {
                            $scope.UploadedFiles = [result.res];
                            $scope[parent][modelName] = [result.res];
                        }
                        else {
                            if (!$scope.UploadedFiles) {
                                $scope.UploadedFiles = [];
                            }
                            if (!$scope[parent][modelName]) {
                                $scope[parent][modelName] = [];
                            }
                            $scope.UploadedFiles.push(result.res);
                            $scope[parent][modelName].push(result.res);
                        }
                        $scope.validUploadFlag = true;
                    }
                    if (result.bytecode)
                    {

                        $scope.bytecode = result.bytecode;
                    }
                    else {
                        $scope.validUploadFlag = false;
                    }
                    $scope.removeFileFromArray(file.name);
                    file.cancel();
                    if (singleFile) {

                        $scope.flag = false;
                    }
                });
            };
            $scope.fileProgress = function () {
            };
            $scope.removeLink = function (fileName, modelName, parent, singleFile) {
                var fileList = $scope[parent][modelName];
                var index = fileList.indexOf(fileName);
                fileList.splice(index, 1);
                if (fileList.length === 0) {
                    $scope[parent][modelName] = undefined;
                }
                else {
                    $scope[parent][modelName] = fileList;
                }
                var info = [fileName, modelName];
                fileuploadservice.cancelFile(info);
                if (singleFile) {
                    $scope.flag = false;
                }
            };
            $scope.remove = function (file, modelName, parent, singleFile) {
                file.cancel();
                var newFileList = $scope[parent][modelName];
                if (newFileList !== undefined) {
                    for (var i = 0; i < newFileList.length; i++) {
                        var fileSavedName = newFileList[i];
                        if (fileSavedName.indexOf(file.name) > -1)
                        {
                            $scope[parent][modelName].splice(i, 1);
                        }
                    }
                }
                if ($scope.UploadedFiles) {
                    var fileslist = $scope.UploadedFiles;
                    var info = [];
                    var flag = false;
                    if (fileslist !== undefined) {
                        for (var i = 0; i < fileslist.length; i++) {
                            var fileSavedName = fileslist[i];
                            if (fileSavedName.indexOf(file.name) > -1)
                            {
                                $scope.UploadedFiles.splice(i, 1);
                                info = [fileSavedName, modelName];
                                flag = true;
                            }
                        }
                        if (flag === false) {
                            info = [file.name, modelName];
                        }
                    }
                }

                if ($scope[parent][modelName]) {
                    if ($scope[parent][modelName].length === 0) {
                        $scope[parent][modelName] = undefined;
                    }
                }
                $scope.removeFileFromArray(file.name);
                fileuploadservice.cancelFile(info);
                if (singleFile) {
                    $scope.flag = false;
                }
                if ($scope.UploadedFiles.length === 0)
                {
                    $scope[parent][modelName] = undefined;
                }
            };
            $scope.cancel = function (flow, modelName, parent) {
                flow.cancel();
                if ($scope[parent][modelName]) {
                    for (var i = 0; i < $scope.UploadedFiles.length; i++) {
                        var fileSavedName = $scope.UploadedFiles[i];
                        var index = $scope[parent][modelName].indexOf(fileSavedName);
                        $scope[parent][modelName].splice(index, 1);
                    }
                    ;
                }

                var temp;
                var fileslist = $scope.UploadedFiles;
                if (fileslist.length > 0) {
                    temp = fileslist.concat(modelName);
                }
                else {
                    temp = [modelName];
                }
                $scope.UploadedFiles = [];
                $rootScope.uploadingFiles.fileName = [];
                fileuploadservice.cancelAll(temp);
            };
            $scope.pause = function (file) {
                file.pause();
            };
            $scope.resume = function (file) {
                file.resume();
            };
        }]);
    globalProvider.controllerProvider.register('SubentityImageUploadController', ["$rootScope", "$scope",
        "fileuploadservice", function ($rootScope, $scope,
                fileuploadservice) {
            $scope.UploadedFiles = [];
            $scope.addFileToArray = function (fileName) {
                $rootScope.uploadingFiles.fileName.push(fileName);
            };
            $scope.removeFileFromArray = function (fileName) {
                var index = $rootScope.uploadingFiles.fileName.indexOf(fileName);
                $rootScope.uploadingFiles.fileName.splice(index, 1);
            };
            $scope.fileAdded = function (file, flow, filetype, maxsize, singleFile) {
                if (!filetype || !!filetype[file.getExtension()]) {
                    if (!maxsize || maxsize > file.size) {
                        $scope.InvalidFileFlag = false;
                        $scope.addFileToArray(file.name);
                        return true;
                    }
                    else {
                        alert(file.name + " has invalid size.. max upload size is " + (maxsize / (1024 * 1024)) + " MB");
                        $scope.InvalidFileFlag = true;
                        return false;
                    }
                } else {
                    alert(file.name + "has invalid extension " + file.getExtension());
                    $scope.InvalidFileFlag = true;
                    return false;
                }
            };
            $scope.fileError = function (file, message)
            {
                $scope.removeFileFromArray(file.name);
            }
            ;
            $scope.fileSuccess = function (file, flow, modelName, parent, singleFile) {
                var info = [file.name, modelName];
                fileuploadservice.uploadFiles(info, function (result) {
                    if (result.res) {
                        $scope.UploadedFiles = [result.res];
                        $scope.validUploadFlag = true;
                    }
                    else {
                        $scope.validUploadFlag = false;
                    }
                    $scope[parent][modelName] = $scope.UploadedFiles;
                    $scope.removeFileFromArray(file.name);
                    file.cancel();
                });
            };
            $scope.fileProgress = function () {
            };
            $scope.remove = function (modelName, parent) {
                var file = $scope[parent][modelName];
                fileuploadservice.removeImageFile(file.toString());
                $scope[parent][modelName] = undefined;
            };
        }]);

    globalProvider.controllerProvider.register('SubEntitySingleSelectController', ["$rootScope", "$scope",
        "ManageMasterService", function ($rootScope, $scope,
                ManageMasterService) {
            $scope.defineLabelForSingleSelect = function (label, model, attribute, defaultValue)
            {
                $scope.defaultValue = defaultValue;

                $scope.model = model;
                $scope.attribute = attribute;
                $scope.dropdown = [];
                $scope.fieldLabel = label;
                var success = function (data) {

                    if (!$scope.userDefined) {
                        if (data.length !== 0) {
                            angular.forEach(data.masterDataBeans, function (item) {

                                $scope.dropdown.push({
                                    id: item.valueEntityId,
                                    text: item.value
                                });
                            });
                        }
                    } else {
                        $scope.dropdown = $scope.userDefinedData;
                    }
                };
                var failure = function () {
                };
                ManageMasterService.retrieveListOfMaster(function (data) {

                    $scope.listOfMaster = data;
                    $scope.masters = angular.copy($scope.listOfMaster);
                    $scope.builtInMaster = [];
                    $scope.customMaster = [];
                    for (var i = 0; i < $scope.masters.length; i++) {
                        var item = $scope.masters[i];
                        if (item.masterType === 'B' || item.masterType === 'b') {
                            $scope.builtInMaster.push(item);
                        }
                        else {
                            $scope.customMaster.push(item);
                        }
                    }
                    for (var j = 0; j < $scope.customMaster.length; j++)
                    {
                        if ($scope.customMaster[j].masterName === $scope.fieldLabel)
                        {
                            $scope.code = $scope.customMaster[j].code;
                        }
                    }
                    if ($scope.code != null) {
                        ManageMasterService.retrieveDetailsOfMaster({primaryKey: $scope.code}, success, failure);
                    }

                })
            };

        }]);
    globalProvider.provide.factory('ManageMasterService', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.apipath + 'master/:action', {}, {
                retrieveListOfMaster: {
                    method: 'GET',
                    isArray: true,
                    params: {
                        action: 'retrieve'
                    }
                },
                retrieveCustomOfMaster: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'retrieveMasterValues'
                    }
                },
                retrieveDetailsOfMaster: {
                    method: 'POST',
                    params: {
                        action: 'retrieve'
                    }
                }
            });
            return Master;
        }]);
    globalProvider.provide.factory('fileuploadservice', ['$resource', '$rootScope', function (resource, rootScope) {
            var user = resource(
                    rootScope.apipath + 'fileUpload/:action', //url being hit
                    {
                        action: '@actionName'
                    }, // url perameters

            {
                uploadFiles: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'onsubmit'
                    }
                },
                cancelFile: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'oncancel'
                    }
                },
                removeImageFile: {
                    method: 'POST',
                    params: {
                        action: 'removeImageFile'
                    }
                },
                cancelAll: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'oncancelall'
                    }
                }

            });
            return user;
        }]);
    globalProvider.provide.factory('UserManagementServiceSubEntity', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.apipath + 'customfield/:action', {}, {
                retrieveusers: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveusers'
                    }
                },
                retrieveDepartmentList: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveDepartmentList'
                    }
                },
                defaultSelection: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'defaultSelection'
                    }
                },
                retrieveroles: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveroles'
                    }
                }
            });
            return Master;
        }]);
});

