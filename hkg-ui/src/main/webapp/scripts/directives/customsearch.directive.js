
define(['angular', 'datepickersearch.directive'], function () {
    globalProvider.compileProvider.directive('customSearch', ['$q', '$parse', '$http', '$templateCache', '$compile', '$document', '$timeout', '$rootScope', '$filter',
        function ($q, $parse, $http, $templateCache, $compile, $document, $timeout, rootScope, $filter)
        {


            var supported = {
                //  Text-based elements
                'text': {element: 'input', type: 'text', editable: true, textBased: true},
                'date': {element: 'ag-date-picker-custom-search', type: 'date', editable: true, textBased: false},
                'datetime': {element: 'input', type: 'datetime', editable: true, textBased: true},
                'datetime-local': {element: 'input', type: 'datetime-local', editable: true, textBased: true},
                'email': {element: 'input', type: 'email', editable: true, textBased: true},
                'month': {element: 'input', type: 'month', editable: true, textBased: true},
                'number': {element: 'input', type: 'text', editable: true, textBased: true},
                'password': {element: 'input', type: 'password', editable: true, textBased: true},
                'search': {element: 'input', type: 'search', editable: true, textBased: true},
                'tel': {element: 'input', type: 'tel', editable: true, textBased: true},
                'textarea': {element: 'textarea', editable: true, textBased: true},
                'time': {element: 'input', type: 'time', editable: true, textBased: true},
                'url': {element: 'input', type: 'url', editable: true, textBased: true},
                'week': {element: 'input', type: 'week', editable: true, textBased: true},
                //  Specialized editables
                'checkbox': {element: 'input', type: 'hidden', editable: true, textBased: false},
                'color': {element: 'input', type: 'color', editable: true, textBased: false},
                'file': {element: 'input', type: 'file', editable: true, textBased: false},
                'range': {element: 'input', type: 'range', editable: true, textBased: false},
                'select': {element: 'select', editable: true, textBased: false},
                'pointerselect': {element: 'select', editable: true, textBased: false},
                //  Pseudo-non-editables (containers)
                'checklist': {element: 'div', editable: false, textBased: false},
                'fieldset': {element: 'fieldset', editable: false, textBased: false},
                'radio': {element: 'div', editable: false, textBased: false},
                //  Non-editables (mostly buttons)
//                'button': {element: 'button', type: 'button', editable: false, textBased: false, class: "btn btn-hkg "},
                'hidden': {element: 'input', type: 'hidden', editable: false, textBased: false},
                'image': {element: 'input', type: 'image', editable: false, textBased: false},
                'legend': {element: 'legend', editable: false, textBased: false},
                'reset': {element: 'button', type: 'reset', editable: false, textBased: false},
                'submit': {element: 'button', type: 'submit', editable: false, textBased: false},
//                'imageUpload': {element: 'input', type: 'text', editable: true, textBased: true, class: 'form-control'},
                'currency': {element: 'input', type: 'text', editable: true, textBased: true},
                'exchangeRate': {element: 'input', type: 'text', editable: true, textBased: true},
//                'fileUpload': {element: 'input', type: 'text', editable: true, textBased: true, class: 'form-control'},
                'fileDownload': {element: 'input', type: 'hidden', editable: true, textBased: true},
                'multiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'percent': {element: 'input', type: 'text', editable: true, textBased: true},
                'UserMultiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'AutoGenerated': {element: 'input', type: 'text', editable: false, textBased: true},
                'pointer_multiSelect': {element: 'input', type: 'text', editable: true, textBased: true},
                'Angle': {element: 'input', type: 'text', editable: true, textBased: true},
                'formula': {element: 'input', type: 'text', editable: true, textBased: true},
                'subEntity': {element: 'select', editable: true, textBased: false},
            };

//            return {
//                restrict: 'E', // supports using directive as element only
            var link = function ($scope, element, attrs) {
                $scope.orderByName = $filter('orderBy');
                //  Basic initialization
                var render = function () {
                    var elementCnt = 0;
                    var newElement = null,
                            mainDiv = null,
                            newChild = null,
                            cbAtt = '',
                            foundOne = false,
                            iterElem = element,
                            model = null,
                            dtbMap = null,
                            submitFlagName = attrs.submitFlagName;
                    if (!submitFlagName) {
                        submitFlagName = "submitted";
                    }
                    var elementPerRow = 4;
                    //  Check that the required attributes are in place
                    if (angular.isDefined(attrs.ngModel) && (angular.isDefined(attrs.template) || angular.isDefined(attrs.templateUrl)) && !element.hasClass('dynamic-form')) {
                        model = $parse(attrs.ngModel)($scope);
                        if (attrs.noOfFieldPerRow) {
                            elementPerRow = parseInt(attrs.noOfFieldPerRow);
                        }
                        if (!model) {
                            var objModel = attrs.ngModel.split(".");
                            $scope[objModel[0]] = {};
                            var tmp = $parse(objModel[0])($scope);
                            for (var i = 1; i < objModel.length; i++)
                            {
                                tmp[objModel[i]] = {};
                                tmp = tmp[objModel[i]];
                            }
                            model = tmp;
                            $scope[attrs.ngModel] = {};
                            model = $scope[attrs.ngModel];
                        }

                        dtbMap = $parse(attrs.dbMap)($scope);
                        if (!dtbMap) {
                            var objProps = attrs.dbMap.split(".");
                            $scope[objProps[0]] = {};
                            var temp = $parse(objProps[0])($scope);
                            for (var i = 1; i < objProps.length; i++)
                            {
                                temp[objProps[i]] = {};
                                temp = temp[objProps[i]];
                            }
                            dtbMap = temp;
                        }
                        //  Grab the template. either from the template attribute, or from the URL in templateUrl
                        (attrs.template ? $q.when($parse(attrs.template)($scope)) :
                                $http.get(attrs.templateUrl, {cache: $templateCache}).then(function (result) {
                            return result.data;
                        })
                                ).then(function (template) {
                            var buildFields = function (field, id) {
                                // Condition added by Shifa as we dnt have to show image and file component in Search
                                if (rootScope.haveValue === 'off' && (field.model === 'is_hidden$CB$Boolean' || field.isCurrencyInvolvedInField || field.type === 'currency')) {
                                } else {
                                    if (field.type !== 'imageUpload' && field.type !== 'fileUpload') {
                                        var isDateRange = false;
                                        if (field.type === 'date' && field.attributes && (field.attributes.type === 'date' || field.attributes.type === 'datetime')) {
                                            field.fromModel = 'from' + field.model;
                                            field.toModel = 'to' + field.model;
                                            field.format = 'dd/MM/yyyy';
                                            isDateRange = true;

                                        }
                                        //created map dtbMap to map model as key and dbtype as value
                                        if (angular.isDefined(field.dbType)) {
                                            if (field.type === 'date' && field.attributes && (field.attributes.type === 'date' || field.attributes.type === 'datetime' || field.attributes.type === 'timerange' || field.attributes.type === 'datetimerange' || field.attributes.type === 'daterange')) {
                                                dtbMap[field.fromModel] = field.dbType;
                                                dtbMap[field.toModel] = field.dbType;
                                            } else {
                                                dtbMap[field.model] = field.dbType;
                                            }
                                        }
                                        if (!angular.isDefined(supported[field.type]) || supported[field.type] === false) {
                                            //  Unsupported.  Create SPAN with field.label as contents
                                            newElement = angular.element('<span></span>');
                                            if (angular.isDefined(field.label)) {
                                                angular.element(newElement).html(field.label);
                                            }
                                            angular.forEach(field, function (val, attr) {
                                                if (["label", "type"].indexOf(attr) > -1) {
                                                    return;
                                                }
                                                newElement.attr(attr, val);
                                            });
                                            this.append(newElement);
                                            newElement = null;
                                        }
                                        else {
                                            if ((angular.isDefined(attrs.isDiamond) && attrs.isDiamond === 'true') || attrs.isDiamond === true) {
                                                attrs.isDiamond = true;
                                            } else {
                                                attrs.isDiamond = false;
                                            }
                                            if ((angular.isDefined(attrs.viewOnly) && attrs.viewOnly === 'true') || attrs.viewOnly === true) {
                                                attrs.viewOnly = true;
                                            } else {
                                                attrs.viewOnly = false;
                                            }
                                            if (angular.isDefined(attrs.userDefined) && attrs.userDefined !== null) {
                                                $scope.userDefined = true;
                                                $scope.userDefinedData = $scope[attrs.userDefined];
                                            } else {
                                                $scope.userDefined = false;
                                            }
                                            if (attrs.viewOnly) {
                                                newElement = angular.element('<span></span>');

                                                if (field.type === 'date' || field.type === 'timerange') {
                                                    var dateElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.fromModel + '" ></span>');
                                                    dateElement.prepend('{{' + attrs.ngModel + "['from" + field.model + "']" + '}}' + '{{' + attrs.ngModel + "['to" + field.model + "']" + '}}');

                                                    newElement.prepend(dateElement);
                                                    var dateElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.fromModel + '" ></span>');
                                                    dateElement1.prepend('N/A');

                                                    newElement.prepend(dateElement1);
//                                            newElement = newElement.append('{{' + attrs.ngModel + "['from" + field.model + "']" + '}}' + '{{' + attrs.ngModel + "['to" + field.model + "']" + '}}');


                                                }

                                                else if (field.type === 'percent')
                                                {
                                                    var percentElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    percentElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}}  % ');

                                                    newElement.prepend(percentElement);
                                                    var percentElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    percentElement1.prepend('N/A');

                                                    newElement.prepend(percentElement1);


                                                }

                                                else if (field.type === 'currency')
                                                {

                                                    var symbolElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    symbolElement.prepend(format(field.currencyformat, '{{' + attrs.ngModel + "['" + field.model + "']" + '}}'));
                                                    if (field.currencyPrefix === 'P')
                                                    {
                                                        symbolElement.prepend(document.createTextNode(" " + field.currencytype + " "));
                                                        newElement.prepend(symbolElement);
                                                    }
                                                    else
                                                    {
                                                        symbolElement.append(document.createTextNode("  " + field.currencytype));
                                                        newElement.append(symbolElement);
                                                    }

                                                    var symbolElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    symbolElement1.prepend('N/A');

                                                    newElement.prepend(symbolElement1);


                                                }
                                                else if (field.type === 'exchangeRate')
                                                {

                                                    var symbolElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    symbolElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}}');
                                                    if (field.currencyPrefix === 'P')
                                                    {
                                                        symbolElement.prepend(document.createTextNode(" " + field.currencytype + " "));
                                                        newElement.prepend(symbolElement);
                                                    }
                                                    else
                                                    {
                                                        symbolElement.append(document.createTextNode("  " + field.currencytype));
                                                        newElement.append(symbolElement);
                                                    }

                                                    var symbolElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    symbolElement1.prepend('N/A');

                                                    newElement.prepend(symbolElement1);


                                                }

                                                else {

                                                    var allElement = angular.element('<span  ng-hide="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    allElement.prepend('{{' + attrs.ngModel + "['" + field.model + "']" + '}} ');

                                                    newElement.prepend(allElement);
                                                    var allElement1 = angular.element('<span  ng-show="!' + attrs.ngModel + '.' + field.model + '" ></span>');
                                                    allElement1.prepend('N/A');

                                                    newElement.prepend(allElement1);



                                                }
                                            }
                                            //-----------------Non View Only Code-----------------------
                                            else {
                                                //  Supported.  Create element (or container) according to type
                                                if (!angular.isDefined(field.model)) {
                                                    field.model = id;
                                                }

                                                newElement = angular.element($document[0].createElement(supported[field.type].element));
                                                if (angular.isDefined(supported[field.type].type)) {
                                                    if (isDateRange) {
                                                        newElement.attr('type', 'daterange');
                                                    } else {
                                                        newElement.attr('type', supported[field.type].type);
                                                    }
                                                }
//                                        if (angular.isDefined(supported[field.type].class)) {
//                                            newElement.attr('class', supported[field.type].class);
//                                        }

                                                //  Editable fields (those that can feed models)
                                                if (angular.isDefined(supported[field.type].editable) && supported[field.type].editable) {
                                                    if (angular.isDefined(field.fromModel) && angular.isDefined(field.toModel)) {
                                                        newElement.attr('name', field.fromModel);
                                                        newElement.attr('from-model', attrs.ngModel + "['" + field.fromModel + "']");
                                                        newElement.attr('name', field.toModel);
                                                        newElement.attr('to-model', attrs.ngModel + "['" + field.toModel + "']");
                                                    } else {
                                                        newElement.attr('id', field.model);
                                                        newElement.attr('name', field.model);
                                                        newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");

                                                    }
                                                    if (angular.isDefined(field.readonly)) {
                                                        newElement.attr('ng-readonly', field.readonly);
                                                    }
                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//                                                        newElement.attr('ng-required', field.required);
//                                                    }
                                                    //--By Shreya Removing the code for the defualt value coming in custom field for search
//                                                    if (angular.isDefined(field.val)) {
//                                                        model[field.model] = angular.copy(field.val);
//                                                        newElement.attr('value', field.val);
//                                                    }
                                                }
                                                //  Fields based on input type=text

                                                if (angular.isDefined(supported[field.type].textBased) && supported[field.type].textBased) {
                                                    newElement.attr('class', 'form-control');
                                                    // For Email pattern check is must in search also
                                                    // For text
                                                    if (angular.isDefined(field.defaultPatternForText)) {                                                        
                                                        if (field.type !== 'AutoGenerated') {
                                                            newElement.attr('ng-pattern', field.defaultPatternForText)
                                                        }
                                                    }
// For Email And Phone
                                                    else if (angular.isDefined(field.defaultPatternForEmail)) {
                                                        newElement.attr('ng-pattern', field.defaultPatternForEmail);
                                                    }

                                                }
                                                //  Special cases  

                                                if (field.type === 'number' || field.type === 'range') {
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('negativeAllowed', true);

                                                }
                                                else if (['text', 'textarea'].indexOf(field.type) > -1) {
                                                    if (angular.isDefined(field.splitBy)) {
                                                        newElement.attr('ng-list', field.splitBy);
                                                    }
                                                }
                                                else if (field.type === 'checkbox') {

                                                    var newElement = angular.element("<select class='form-control'></select>");
                                                    var elements = '<option value="">Select</option>';
                                                    newElement.append(elements);
                                                    newElement.attr('ng-options', 'check.id as check.text for check in defaultcheckBoxList');
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                    var newt = "<div ng-controller='SearchCheckBoxController' ng-init='defineLabelForCheckBox();'> </div>";
                                                    newElement = newElement.wrap(newt).parent();



                                                }
                                                else if (field.type === 'checklist') {
                                                    //--By Shreya Removing the code for the defualt value coming in custom field for search
//                                                    if (angular.isDefined(field.val)) {
//                                                        model[field.model] = angular.copy(field.val);
//                                                    }
                                                    if (angular.isDefined(field.values)) {
                                                        if (!(angular.isDefined(model[field.model]) && angular.isObject(model[field.model]))) {
                                                            model[field.model] = {};
                                                        }
                                                        angular.forEach(field.values, function (option, childId) {
                                                            newChild = angular.element('<input type="checkbox" />');
                                                            newChild.attr('name', field.model + '.' + childId);
                                                            newChild.attr('ng-model', attrs.ngModel + "['" + field.model + "']" + "['" + childId + "']");
                                                            if (angular.isDefined(option['class'])) {
                                                                newChild.attr('ng-class', option['class']);
                                                            }
                                                            if (angular.isDefined(field.disabled)) {
                                                                newChild.attr('ng-disabled', field.disabled);
                                                            }
                                                            if (angular.isDefined(field.readonly)) {
                                                                newChild.attr('ng-readonly', field.readonly);
                                                            }
                                                            //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                            if (angular.isDefined(field.required)) {
//                                                                newChild.attr('ng-required', field.required);
//                                                            }
                                                            if (angular.isDefined(field.callback)) {
                                                                newChild.attr('ng-change', field.callback);
                                                            }
                                                            if (angular.isDefined(option.isOn)) {
                                                                newChild.attr('ng-true-value', option.isOn);
                                                            }
                                                            if (angular.isDefined(option.isOff)) {
                                                                newChild.attr('ng-false-value', option.isOff);
                                                            }
                                                            if (angular.isDefined(option.slaveTo)) {
                                                                newChild.attr('ng-checked', option.slaveTo);
                                                            }
                                                            if (angular.isDefined(option.val)) {
                                                                model[field.model][childId] = angular.copy(option.val);
                                                                newChlid.attr('value', field.val);
                                                            }

                                                            if (angular.isDefined(option.label)) {
                                                                newChild = newChild.wrap('<label class="col-md-4"></label>').parent();
                                                                newChild = newChild.append('{{' + attrs.internationalizationLabel + '+\'' + option.label + '\'| translate }}');
//                                                    newChild.append(document.createTextNode(' ' + option.label));

                                                            }
                                                            newElement.append(newChild);
                                                        });
                                                    }
                                                }
                                                else
                                                if (field.type === 'select')
                                                {

                                                    newElement.attr('ng-options', 'color.id as color.text for color in dropdown');
                                                    newElement.attr('class', 'form-control');

                                                    var element = '<option value="">Select</option>';
                                                    newElement.prepend(element);
                                                    var displayShortcutCode;
                                                if (field.displayShortcutCode !== null && field.displayShortcutCode !== undefined)
                                                {
                                                    displayShortcutCode = field.displayShortcutCode;

                                                } else
                                                {
                                                    displayShortcutCode = false;
                                                }
                                                    var newt = "<div ng-controller='SearchSingleSelectController' ng-init='defineLabelForSingleSelect(\"" + field.label + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + field.val + "\",\"" + attrs.isDiamond + "\",\"" + field.fieldId + "\",\"" + displayShortcutCode + "\");'> </div>";
                                                    newElement = newElement.wrap(newt).parent();
                                                }

                                                else
                                                if (field.type === 'subEntity')
                                                {


                                                    var element = '<option value="">Select</option>';
                                                    newElement.prepend(element);
                                                    newElement.attr('ng-options', 'color.text as color.id for color in dropdownForSubEntity');

                                                    newElement.attr('class', 'form-control');

                                                    var newt = "<div ng-controller='SearchSubEntityController' ng-init='defineLabelForSubEntity(\"" + field.CustomFieldId + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + attrs.isDiamond + "\");'> </div>";
                                                    newElement = newElement.wrap(newt).parent();
                                                }
                                                // added by Shifa on 29 December for pointer select
                                                else
                                                if (field.type === 'pointerselect')
                                                {
                                                    newElement.attr('ng-options', 'color.id as color.text for color in dropdown');
                                                    newElement.attr('class', 'form-control');
//                                              newElement.attr('ng-change','changeDrop(\"" + color + "\")');
                                                    var element = '<option value="">Select</option>';
                                                    newElement.prepend(element);
                                                      var displayShortcutCode;
                                                if (field.displayShortcutCode !== null && field.displayShortcutCode !== undefined)
                                                {
                                                    displayShortcutCode = field.displayShortcutCode;

                                                } else
                                                {
                                                    displayShortcutCode = false;
                                                }
                                                    var newt = "<div ng-controller='SearchSingleSelectController' ng-init='defineLabelForSingleSelect(\"" + field.pointerlabel + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + field.val + "\",\"" + attrs.isDiamond + "\",\"" + field.pointerFieldId + "\",\"" + displayShortcutCode + "\");'> </div>";
                                                    newElement = newElement.wrap(newt).parent();

                                                }

                                                else if (field.type === 'AutoGenerated') {
                                                    console.log()
                                                    newElement.attr('ui-select2', 'autoComplete');
                                                    newElement.attr('class', 'col-xs-12 hkg-nopadding');
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                    var newt = "<div  ng-controller='AutoGeneratedSingleSelectController' ng-init='defineLabel(\"" + field.label + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + field.val + "\",\"" + attrs.isDiamond + "\");'> </div>";
                                                    newElement = newElement.wrap(newt).parent();
                                                }

                                                else if (field.type === 'hidden') {
                                                    newElement.attr('name', field.model);
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                    //--By Shreya Removing the code for the defualt value coming in custom field for search
//                                                    if (angular.isDefined(field.val)) {
//                                                        model[field.model] = angular.copy(field.val);
//                                                        newElement.attr('value', field.val);
//                                                    }
                                                }

                                                else if (field.type === 'percent')
                                                {

                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                    newElement.attr('negativeAllowed', true);

                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//
//                                                        newElement.attr('ng-required', field.required);
//                                                    }

                                                    if (angular.isDefined(field.readonly)) {
                                                        newElement.attr('ng-readonly', field.readonly);
                                                    }
                                                    if (angular.isDefined(field.readonly)) {
                                                        newElement.attr('ng-readonly', field.readonly);
                                                    }

                                                    newElement = newElement.wrap('<div class="input-group"> </div>').parent();
                                                    var suffixElement = angular.element('<div class="input-group-addon"></div>');
                                                    suffixElement.append(document.createTextNode("%"));
                                                    newElement.append(suffixElement);
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");

                                                }
                                                else if (field.type === 'Angle')
                                                {
                                                    newElement.attr('negativeAllowed', true);
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//
//                                                        newElement.attr('ng-required', field.required);
//                                                    }

                                                    if (angular.isDefined(field.readonly)) {
                                                        newElement.attr('ng-readonly', field.readonly);
                                                    }
                                                    if (angular.isDefined(field.readonly)) {
                                                        newElement.attr('ng-readonly', field.readonly);
                                                    }

                                                    newElement = newElement.wrap('<div class="input-group"> </div>').parent();
                                                    var suffixElement = angular.element('<div class="input-group-addon" ><span class="">&#176</span></div>');
                                                    newElement.append(suffixElement);
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                }
                                                else if (field.type === 'currency')
                                                {
                                                    newElement.attr('negativeAllowed', true);
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                }
                                                else if (field.type === 'exchangeRate')
                                                {
                                                    newElement.attr('negativeAllowed', false);
                                                    newElement.attr('numbers-only', true);
                                                    newElement.attr('decimalallowed', true);
                                                }
//                                                else if (field.type === 'currency') {
//
//                                                    var currencyTextElement = angular.element('<input type="text" class="form-control " >');
//
//                                                    if (field.attributes && field.attributes.negativeAllowed && angular.isDefined(field.attributes.negativeAllowed))
//                                                    {
////                                              newElement.attr('numbers-only', false); 
////                                               newElement.attr('decimalallowed', false);
//                                                    } else
//                                                    {
//                                                        currencyTextElement.attr('numbers-only', true);
//                                                        currencyTextElement.attr('decimalallowed', true);
//                                                    }
////                                            newElement.attr('currencyallowed', true);
//                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
////                                                    if (angular.isDefined(field.required)) {
////
////                                                        currencyTextElement.attr('ng-required', field.required);
////                                                    }
//                                                    if (field.attributes !== undefined) {
//                                                        if (angular.isDefined(field.attributes.min)) {
//                                                            currencyTextElement.attr('min', field.attributes.min);
//                                                        }
////                                                        if (angular.isDefined(field.attributes.max)) {
////                                                            currencyTextElement.attr('max', field.attributes.max);
////                                                        }
//                                                    }
//                                                    if (angular.isDefined(field.readonly)) {
//                                                        currencyTextElement.attr('ng-readonly', field.readonly);
//                                                    }
//                                                    if (angular.isDefined(field.readonly)) {
//                                                        currencyTextElement.attr('ng-readonly', field.readonly);
//                                                    }
//                                                    currencyTextElement.addClass('col-md-4');
//                                                    currencyTextElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
////                                                    var divForText = angular.element('<div id="divForText" class="col-md-5 "> </div>');
////                                                    currencyTextElement = currencyTextElement.wrap(divForText).parent();
//                                                    var divElement = angular.element('<div id="new" class="col-md-12 form-group"> </div>');
//                                                    newElement = newElement.wrap(divElement).parent();
////                                            newElement = newElement.wrap('<div id="new"> </div>').parent();
//                                                    var codeVal = field.model + "@CurrencyCode";
////                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "@CurrencyValue']");
//                                                    currencyTextElement.attr('id', 'currencyValue')
//                                                    var currencyCodeModel = $scope[attrs.ngModel + "." + field.model];
//
//                                                    if (!attrs.editFlag) {
//                                                        model[codeVal] = field.currencyCode;
//                                                    }
//                                                    //
//                                                    var element = '<option value="">Select</option>';
//                                                    var idElement = angular.element("<select id='selectCurrencyCode' class='form-control input-group-addon' style=\"width:45%;\"></select>");
//                                                    idElement.prepend(element);
//                                                    idElement.attr('ng-options', 'currency.id as currency.text for currency in dropdownForCurrencyCode');
//                                                    var codeModel = "['" + field.model + "@CurrencyCode']";
//                                                    idElement.attr('ng-model', attrs.ngModel + codeModel);
//
//                                                    var newt = "<div ng-controller='CurrencyController' class='input-group' style=\"display:inline-flex;\" ng-init='fillDropDownForCurrencyCode(\"" + field.CustomFieldId + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\");'> </div>";
//                                                    idElement = idElement.wrap(newt).parent();
//
//                                                    //
//
////                                            var idElement = angular.element('<div id="idElem" class="col-md-8"><input  type="text" class="form-control" name="cardNumber"></div>');
////                                            idElement.attr('ng-model', attrs.ngModel + "['shifs" + field.model + "']");
//                                                    idElement = idElement.append(currencyTextElement);
//                                                    newElement = newElement.append(idElement);
//                                                }
                                                else if (field.type === 'multiSelect')
                                                {
                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//
//                                                        newElement.attr('ng-required', field.required);
//                                                    }
                                                    newElement.attr('ui-select2', 'autoComplete');
                                                    newElement.attr('class', 'col-xs-12 hkg-nopadding');
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                    var displayShortcutCode;
                                                if (field.displayShortcutCode !== null && field.displayShortcutCode !== undefined)
                                                {
                                                    displayShortcutCode = field.displayShortcutCode;

                                                } else
                                                {
                                                    displayShortcutCode = false;
                                                }
                                                    var newt = "<div  ng-controller='SearchMultiSelectController' ng-init='defineLabel(\"" + field.label + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + field.val + "\",\"" + attrs.isDiamond + "\",\"" + field.fieldId + "\",\"" + displayShortcutCode + "\");'> </div>";

                                                    newElement = newElement.wrap(newt).parent();
                                                }
                                                // added by Shifa on 29 December for handling pointer multiselect
                                                else if (field.type === 'pointer_multiSelect')
                                                {
                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//
//                                                        newElement.attr('ng-required', field.required);
//                                                    }
                                                      var displayShortcutCode;
                                                if (field.displayShortcutCode !== null && field.displayShortcutCode !== undefined)
                                                {
                                                    displayShortcutCode = field.displayShortcutCode;

                                                } else
                                                {
                                                    displayShortcutCode = false;
                                                }
                                                    var newt = "<div ng-controller='SearchMultiSelectController' ng-init='defineLabel(\"" + field.pointerlabel + "\",\"" + field.model + "\",\"" + attrs.ngModel + "\",\"" + field.val + "\",\"" + attrs.isDiamond + "\",\"" + field.pointerFieldId + "\",\"" + displayShortcutCode +"\");'> </div>";
                                                    newElement = newElement.wrap(newt).parent();
                                                    newElement.attr('ui-select2', 'autoComplete');
                                                    newElement.attr('class', 'col-xs-12 hkg-nopadding');

                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");

                                                }

                                                else if (field.type === 'UserMultiSelect')
                                                {
                                                    //--By Shreya Removing the code for the required condition and * coming with custom fields for search
//                                                    if (angular.isDefined(field.required)) {
//
//                                                        newElement.attr('ng-required', field.required);
//                                                    }
                                                    newElement.attr('ng-model', attrs.ngModel + "['" + field.model + "']");
                                                    newElement.attr('ui-select2', 'autoCompleteUser');
                                                    newElement.attr('class', 'col-xs-12 hkg-nopadding ');
                                                    var newt = "<div ng-controller='SearchUserMultiSelectController' ng-init='defineLabel(\"" + field.isEmployee + "\",\"" + field.isDepartment + "\",\"" + field.isDesignation + "\",\"" + field.isFranchise + "\",\"" + field.model + "\",\"" + field.isMultiSelect + "\",\"" + attrs.ngModel + "\",\"" + attrs.isDiamond + "\");'> </div>";
                                                    var newEle = "<div ng-controller='SearchUserSingleSelectController' ng-init='defineLabel(\"" + field.isEmployee + "\",\"" + field.isDepartment + "\",\"" + field.isDesignation + "\",\"" + field.isFranchise + "\",\"" + field.model + "\",\"" + field.isMultiSelect + "\",\"" + attrs.ngModel + "\",\"" + attrs.isDiamond + "\");'> </div>";
//                                                    "\",\"" + '{{' + attrs.ngModel + "['" + field.model + "']" + '}} ' + "\");'> </div>";

                                                    newElement = newElement.wrap('<div  class="input-group"></div>').parent();

                                                    newElement = newElement.append('<span class="input-group-addon"><span class="glyphicon glyphicon-info-sign" tooltip-html-unsafe="{{customPopover}}"  tooltip-trigger="mouseenter" tooltip-placement="right"></span></span>');
                                                    if (field.isMultiSelect !== undefined) {
                                                        newElement = newElement.wrap(newt).parent();
                                                    } else {
                                                        newElement = newElement.wrap(newEle).parent();
                                                    }
                                                }

                                                else if (field.type === 'date' && field.attributes && field.attributes.type && (field.attributes.type === 'timerange' || field.attributes.type === 'date' || field.attributes.type === 'datetime')) {
                                                    newElement.attr('submitted', submitFlagName);
                                                    newElement.attr('form', attrs.name);
                                                    if (!attrs.noOfFieldPerRow || attrs.noOfFieldPerRow === 1) {
                                                        newElement.attr('input-class', 'col-md-12');
                                                        newElement.attr('label-class', 'col-md-12 text-center');
                                                    } else {
                                                        newElement.attr('input-class', attrs.inputCss);
                                                        newElement.attr('label-class', attrs.labelCss);
                                                    }
                                                    newElement.attr('to-label', 'To');
                                                    newElement.attr('from-label', 'From');
                                                }
                                                else if (field.type === 'fieldset') {
                                                    if (angular.isDefined(field.fields)) {
                                                        var workingElement = newElement;
                                                        angular.forEach(field.fields, buildFields, newElement);
                                                        newElement = workingElement;
                                                    }
                                                }

                                                //  Common attributes; radio already applied these...
                                                if (field.type !== "radio") {
                                                    if (angular.isDefined(field['class'])) {
                                                        newElement.attr('ng-class', field['class']);
                                                    }
                                                    //  ...and checklist has already applied these.
                                                    if (field.type !== "checklist") {
                                                        if (angular.isDefined(field.disabled)) {
                                                            newElement.attr('ng-disabled', field.disabled);
                                                        }
                                                        if (angular.isDefined(field.callback)) {
                                                            //  Some input types need listeners on click...
                                                            if (["button", "fieldset", "image", "legend", "reset", "submit"].indexOf(field.type) > -1) {
                                                                cbAtt = 'ng-click';
                                                            }
                                                            //  ...the rest on change.
                                                            else {
                                                                cbAtt = 'ng-change';
                                                            }
                                                            newElement.attr(cbAtt, field.callback);
                                                        }
                                                    }
                                                }
//                                        if (field.type === 'imageUpload')
//                                        {
//                                            var temp = attrs.ngModel + "." + field.model;
//                                            $scope.$watch(temp, function () {
//                                                $scope.imgsrc = $scope[attrs.ngModel][field.model];
//                                                var a = '';
//                                                if ($scope[attrs.ngModel][field.model]) {
//                                                    a = a + $scope[attrs.ngModel][field.model];
//                                                }
//                                                var img = attrs.ngModel + field.model;
//                                                $scope[img] = rootScope.appendAuthToken("api/fileUpload/getimage?file_name=" + a);
//                                            });
//                                        }

                                                // Arbitrary attributes
                                                if (angular.isDefined(field.attributes)) {
                                                    // Don't add Maxlength in Search.MaxLength was getting added from attributes instead of field
                                                    angular.forEach(field.attributes, function (val, attr) {
                                                        if (attr !== 'maxLength' && attr !== 'type') {
                                                            if (attr === 'format' && isDateRange) {
                                                                newElement.attr(attr, 'dd/MM/yyyy');
                                                            } else {
                                                                newElement.attr(attr, val);
                                                            }
                                                        }
                                                    });
                                                }
                                            }

                                            //  If there's a label, add it.
                                            if (angular.isDefined(field.label)) {
//                                        if (!attrs.viewOnly) {
                                                //  Some elements have already applied their labels.
                                                if (["image", "hidden"].indexOf(field.type) > -1) {
                                                    angular.noop();
                                                }
                                                //  Fieldset elements put their labels in legend child elements.
                                                else if (["fieldset"].indexOf(field.type) > -1) {
                                                    newElement.prepend(angular.element($document[0].createElement('legend')).html(field.label));
                                                }
                                                //  Button elements get their labels from their contents.
                                                else if (["button", "legend", "reset", "submit"].indexOf(field.type) > -1) {
                                                    newElement.html('{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                } else {
                                                    //  Everything else should be wrapped in a label tag.
//                                            if (angular.isDefined(field.hint)) {
//                                                 
//                                                  newElement = newElement.wrap('<div class=""> </div>').parent();
//                                         
//                                                var hintElement =  angular.element("<span class='position:relative  '  tooltip=" + field.hint + " tooltip-trigger=mouseenter tooltip-placement=right>?</span>");
//                                                newElement = newElement.append(hintElement);
//                                            }
                                                    if (mainDiv === null) {
                                                        mainDiv = angular.element('<div class="form-group" ></div>');
                                                    }

                                                    if (field.type !== 'checkbox' && !(field.type === 'date' && field.attributes && (field.attributes.type === 'timerange' || field.attributes.type === 'datetimerange' || field.attributes.type === 'daterange'))) {
//                                                    alert('1');

                                                    } else if ((!attrs.noOfFieldPerRow || attrs.noOfFieldPerRow === 1) && field.type !== 'checkbox') {
//                                                    newElement = newElement.wrap('<div class="' + attrs.inputCss + '"></div>').parent();
                                                    } else if (field.type === 'checkbox') {
//                                                    alert('3');

//                                                        if (field.formatValue === 'before') {
//                                                            if (elementPerRow === 2) {
//                                                                newElement = newElement.wrap('<div class="col-md-4 control-label"></div>').parent();
//                                                            }
//                                                            if (elementPerRow === 3) {
//                                                                newElement = newElement.wrap('<div class="col-md-3 control-label"></div>').parent();
//                                                            }
//                                                            if (elementPerRow === 10) {
//                                                                newElement = newElement.wrap('<div style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:25px;"></div>').parent();
//                                                            }
//
////                                                        newElement = newElement.wrap('<div class="col-lg-11 col-md-11 col-xs-12"></div>').parent();
//                                                        } else if (field.formatValue === 'after') {
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div class="col-md-8 form-control-static" style="text-align:left"></div>').parent();
                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div class="col-md-8 form-control-static" style="text-align:left"></div>').parent();
                                                        }
                                                        if (elementPerRow === 4) {
                                                            newElement = newElement.wrap('<div class="col-md-12 form-control-static" style="text-align:left"></div>').parent();
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div  style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:20px;"></div>').parent();
                                                        }
//                                                        }
                                                        newElement = newElement.wrap('<div ng-class="{\'has-error\': ' + attrs.name + '.' + field.model + '.$invalid && (' + submitFlagName + ') }"  ></div>').parent();
                                                    }
                                                    if (field.type !== 'checkbox') {
                                                        if (elementPerRow === 4) {
                                                            newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.name + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" ></div>').parent();
                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.name + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" class="col-md-10"></div>').parent();
                                                        }
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.name + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" class="col-md-8 form-control-static"></div>').parent();
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div  ng-class="{\'has-error\': ' + attrs.name + '.' + field.model + '.$invalid && (' + submitFlagName + ') }" style="position: relative;min-height: 1px;float: left;width: 100%; padding-left:0px;padding-right:0px;"></div>').parent();
                                                        }

                                                    }
//                                                    if (field.type === 'textarea' && field.attributes && field.attributes.maxLength) {
//                                                        var textNumElement = angular.element("<div class='pull-right center'>{{" + field.attributes.maxLength + " - " + attrs.ngModel + "." + field.model + ".length}}&nbsp;  {{entity + 'characters left'| translate }}</div>");
//                                                        newElement = newElement.append(textNumElement);
//                                                        var clearfix = "<div class='clearfix'></div>";
//                                                        newElement = newElement.append(clearfix);
//                                                    }
//                                                    if (field.type === 'number' || field.type === 'percent' || field.type === 'currency' || field.type === 'date')
//                                                    {
//                                                        var divvElement = angular.element('<div id="const_' + field.model + '" class="text-danger error,help-block ng-hide" > Invalid value constraint </div>');
//                                                        newElement = newElement.append(divvElement);
//                                                    }
                                                    if (field.type !== 'checkbox') {

                                                        var divElement = angular.element(' <div ng-show="(' + attrs.name + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.name + '.' + field.model + '.$invalid" class="error,help-block" ></div>');
                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.name + '.' + field.model + '.$error.pattern">' + field.label + ' is invalid</span>');
                                                        newElement = newElement.append(divElement);
//                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.name + '.' + field.model + '.$error.minlength">' + field.label + ' must contain at least ' + field.minLength + ' characters</span>');
//                                                        newElement = newElement.append(divElement);
//                                                        divElement = divElement.prepend('<span class="text-danger"  ng-if="' + attrs.name + '.' + field.model + '.$error.maxlength">' + field.label + ' length exceeded</span>');
//                                                        newElement = newElement.append(divElement);
                                                    }
                                                    //By Shreya Removing code as there is no requirement of required condition in search
//                                                    if (angular.isDefined(field.required) && field.required === true && field.type !== 'checkbox') {
//
//                                                        divElement = divElement.prepend('<span class="help-block" ng-show="' + attrs.name + '.' + field.model + '.$error.required && ' + submitFlagName + '">' + field.label + '  should not be empty</span>');
//                                                        newElement = newElement.append(divElement);
//                                                    }
//                                                    if (field.type === 'number' || field.type === 'currency' || field.type === 'percent' || field.type === 'Angle')
//                                                    {
//                                                        if (field.attributes !== undefined) {
//                                                            divElement = divElement.prepend('<span class="text-danger"  ng-show="' + attrs.name + '.' + field.model + '.$error.min || ' + attrs.name + '.' + field.model + '.$error.max"> Invalid value. Entered value should be between ' + field.attributes.min + ' and ' + field.attributes.max + ' </span>');
//                                                            newElement = newElement.append(divElement);
//                                                        }
//                                                    }
                                                    if (field.type !== 'checkbox') {
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-6 col-md-6 col-xs-12  " style="padding-left:0px;padding-right:0px " ></div>').parent();

//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-4 col-md-4 col-xs-12 " style="padding-left:0px;padding-right:0px "></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                        if (elementPerRow === 4) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-3 col-md-3 col-xs-12 " style="padding-left:5px;padding-right:5px "></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '"   style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px ng-hide"></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                    }

//                                                    if (angular.isDefined(field.required) && field.required === true) {
//
//                                                        if (field.type === 'checkbox') {
//
//                                                            if (field.formatValue === "before") {
//                                                                if (elementPerRow === 2 || elementPerRow === 3) {
//                                                                    var element = angular.element('<div class="col-md-8 control-label " style="text-align:left"></div>');
//                                                                }
//
//                                                                if (elementPerRow === 10) {
//                                                                    var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></div>');
//                                                                    if (angular.isDefined(field.label) && field.label.length > 4) {
//                                                                        var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
//                                                                        field.label = field.label.slice(0, 4);
////                                                         
//                                                                    }
//                                                                }
//                                                                var labelElement = angular.element('<label for="' + field.id + '"></label>');
//                                                                var elementAsterik = angular.element('<span style="color:red"></span');
//                                                                elementAsterik = elementAsterik.append('&nbsp;*');
//                                                                labelElement = labelElement.append(elementAsterik);
//                                                                labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                                                labelElement = labelElement.append(labelTooltipElement);
//                                                                element = element.append(labelElement);
//                                                                newElement = newElement.append(element);
//                                                            } else if (field.formatValue === "after") {
//
//                                                                if (elementPerRow === 2) {
//                                                                    var element = angular.element('<div class="col-md-4 control-label "></div>');
//                                                                }
//                                                                if (elementPerRow === 3) {
//                                                                    var element = angular.element('<div class="col-md-4 control-label wordRap" style="padding-right:0px"></div>');
//                                                                }
//                                                                if (elementPerRow === 10) {
//                                                                    var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></div>');
//                                                                    if (angular.isDefined(field.label) && field.label.length > 4) {
//                                                                        var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
//                                                                        field.label = field.label.slice(0, 4);
//                                                                        //                                                         
//                                                                    }
//                                                                }
//                                                                var labelElement = angular.element('<label for="' + field.id + '"></label>');
//                                                                var elementAsterik = angular.element('<span style="color:red"></span');
//                                                                elementAsterik = elementAsterik.append('&nbsp;*');
//                                                                labelElement = labelElement.append(elementAsterik);
//                                                                labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                                                labelElement = labelElement.append(labelTooltipElement);
//                                                                element = element.append(labelElement);
//                                                                newElement = newElement.prepend(element);
//                                                            }
//                                                            var clearfixElement = angular.element(' <div class="clearfix"></div>');
//                                                            newElement = newElement.append(clearfixElement);
//                                                            if (elementPerRow === 2) {
//                                                                var divElement = angular.element(' <div ng-show="(' + attrs.name + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.name + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 38%;" ></div>');
//                                                            }
//                                                            if (elementPerRow === 3) {
//                                                                var divElement = angular.element(' <div ng-show="(' + attrs.name + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.name + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 6%;" ></div>');
//                                                            }
//                                                            if (elementPerRow === 10) {
//                                                                var divElement = angular.element(' <div ng-show="(' + attrs.name + '.' + field.model + '.$dirty || ' + submitFlagName + ') && ' + attrs.name + '.' + field.model + '.$invalid" class="error,help-block,col-md-12" style="position: relative;left: 10%;" ></div>');
//                                                            }
//
//
//                                                            divElement = divElement.prepend('<span class="help-block" ng-show="' + attrs.name + '.' + field.model + '.$error.required && ' + submitFlagName + '">' + field.label + '  should not be empty</span>');
//                                                            newElement = newElement.append(divElement);
//                                                        } else {
//                                                            if (elementPerRow === 2) {
//                                                                var labelElement = angular.element('<label for="' + field.id + '" class="col-md-4 control-label "></label>');
//                                                            } else if (elementPerRow === 3) {
//                                                                var labelElement = angular.element('<label for="' + field.id + '" class="col-md-4 control-label" style="text-align:left"></label>')
//                                                            }
//                                                            else if (elementPerRow === 10) {
//                                                                var labelElement = angular.element('<label  for = "' + field.id + '" class = "col-md-12 control-label" style = "text-align:left;padding-left:0px;padding-right:0px" </label>');
//                                                                if (angular.isDefined(field.label) && field.label.length > 4) {
//                                                                    var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
//                                                                    field.label = field.label.slice(0, 4);
//                                                                    //                                                                alert(field.label);
//                                                                }
//
//                                                            }
//
//                                                            var wrapElement;
//                                                            if (angular.isDefined(field.hint) && field.hint.length > 0) {
//                                                                var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
//                                                                if (labelElement.hasClass('col-md-4')) {
//                                                                    wrapElement = hintElement.wrap('<div class="col-md-4 text-right"></div>').parent();
//                                                                    labelElement.removeClass('col-md-4');
//                                                                }
//                                                                if (labelElement.hasClass('col-md-12')) {
//                                                                    wrapElement = hintElement.wrap('<div class="col-md-12"></div>').parent();
//                                                                    labelElement.removeClass('col-md-12');
//                                                                }
//                                                                labelElement.css("display", "inline");
////                                                            labelElement = labelElement.append(hintElement);
//                                                            }
//                                                            var elementAsterik = angular.element('<span style="color:red"></span');
//                                                            elementAsterik = elementAsterik.append('&nbsp;*');
//                                                            labelElement = labelElement.append(elementAsterik);
//                                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                                            labelElement = labelElement.append(labelTooltipElement);
//                                                            if (angular.isDefined(wrapElement)) {
//                                                                labelElement = wrapElement.append(labelElement);
//                                                            }
//                                                            newElement = newElement.prepend(labelElement);
//                                                        }
//                                                    }
//                                                    else {
                                                    if (field.type === 'checkbox') {
//                                                            if (field.formatValue === "before") {
//                                                                if (elementPerRow === 2 || elementPerRow === 3) {
//                                                                    var element = angular.element('<div class="col-md-8 control-label " style="text-align:left"></div>');
//                                                                }
//                                                                if (elementPerRow === 10) {
//                                                                    var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:5px; padding-right:0px"></div>');
//                                                                    if (angular.isDefined(field.label) && field.label.length > 4) {
//                                                                        var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
//                                                                        field.label = field.label.slice(0, 4);
//                                                                    }
//                                                                }
//                                                                var labelElement = angular.element('<label for="' + field.id + '"></label>');
//                                                                labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                                                labelElement = labelElement.append(labelTooltipElement);
//                                                                element = element.append(labelElement);
//                                                                newElement = newElement.append(element);
//                                                            } else if (field.formatValue === "after") {
                                                        if (elementPerRow === 2) {
                                                            var element = angular.element('<div class="col-md-4 control-label "></div>');
                                                        }
                                                        if (elementPerRow === 3) {
                                                            var element = angular.element('<div class="col-md-10 control-label wordRap" style="padding-right:0px"></div>');
                                                        }
                                                        if (elementPerRow === 4) {
                                                            var element = angular.element('<div class="col-md-12 control-label wordRap" style="padding-right:0px"></div>');
                                                        }
                                                        if (elementPerRow === 10) {
                                                            var element = angular.element('<div class="col-md-12 control-label" style="text-align:left; padding-left:5px; padding-right:0px"></div>');
                                                            if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign" tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                field.label = field.label.slice(0, 4);
//                                                         
                                                            }
                                                        }
                                                        var labelElement = angular.element('<label for="' + field.model + '"></label>');
                                                        labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                        labelElement = labelElement.append(labelTooltipElement);
                                                        element = element.append(labelElement);
                                                        newElement = newElement.prepend(element);
//                                                            }
                                                    } else {
                                                        //                                                      
                                                        if (elementPerRow === 2) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-4 control-label "></label>');
                                                        }
                                                        if (elementPerRow === 3) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-10 control-label" style="text-align:left"></label>');
                                                        }
                                                        if (elementPerRow === 4) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-12 control-label form-group" style="text-align:left"></label>');
                                                        }
                                                        else if (elementPerRow === 10) {
                                                            var labelElement = angular.element('<label for="' + field.model + '" class="col-md-12 control-label" style="text-align:left; padding-left:0px; padding-right:0px"></label>');
                                                            if (angular.isDefined(field.label) && field.label.length > 4) {
                                                                var labelTooltipElement = angular.element('<span class="glyphicon glyphicon-info-sign"  tooltip=" ' + field.label + ' " tooltip-trigger="mouseenter" tooltip-placement="right" style="padding-left:5px"></span>');
                                                                field.label = field.label.slice(0, 4);
                                                            }
                                                        }
                                                        labelElement = labelElement.append('{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
                                                        var wrapElement;
                                                        if (angular.isDefined(field.hint) && field.hint.length > 0) {
                                                            var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
                                                            if (labelElement.hasClass('col-md-4')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-4 text-right"></div>').parent();
                                                                labelElement.removeClass('col-md-4');
                                                            }
                                                            if (labelElement.hasClass('col-md-12')) {
                                                                wrapElement = hintElement.wrap('<div class="col-md-12"></div>').parent();
                                                                labelElement.removeClass('col-md-12');
                                                            }
                                                            labelElement.css("display", "inline");
//                                                            labelElement = labelElement.append(hintElement);
                                                        }
                                                        labelElement = labelElement.append(labelTooltipElement);
                                                        if (angular.isDefined(wrapElement)) {
                                                            labelElement = wrapElement.append(labelElement);
                                                        }
                                                        newElement = newElement.prepend(labelElement);
                                                    }
//                                                    }
                                                    if (field.type === 'checkbox') {
                                                        if (elementPerRow === 2) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-6 col-md-6 col-xs-12" style="padding-left:0px;padding-right:0px "></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }

                                                        }
                                                        if (elementPerRow === 3) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-4 col-md-4 col-xs-12"></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                        if (elementPerRow === 4) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" class="col-lg-3 col-md-3 col-xs-12"></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                        if (elementPerRow === 10) {
                                                            newElement = newElement.wrap('<div  id="dv_' + field.model + '" style="position: relative;min-height: 1px;float: left;width: 10%; padding-left:5px;padding-right:5px"></div>').parent();
//                                                            if (field.isDependant)
//                                                            {
//                                                                newElement.addClass('ng-hide');
//                                                            }
//                                                            else
//                                                            {
//                                                                if (newElement.hasClass('ng-hide'))
//                                                                {
//                                                                    newElement.removeClass('ng-hide');
//                                                                }
//
//                                                            }
                                                        }
                                                    }
                                                }
//                                        }
//                                        else {
//                                            if (mainDiv === null) {
//
//                                                mainDiv = angular.element('<div  class="form-group row"></div>');
//                                            }
//                                            newElement = newElement.wrap('<div class="' + attrs.inputCss + '"></div>').parent();
//                                            newElement = newElement.wrap('<div  class="form-group row"></div>').parent();
//                                            var labelElement = angular.element('<label for="' + field.id + '"class="' + attrs.labelCss + '"></label>');
//                                            //                                                labelElement = labelElement.prepend(document.createTextNode(field.label + ' '));
//
//                                            labelElement = labelElement.append('&nbsp;{{' + attrs.internationalizationLabel + '+\'' + field.label + '\'| translate }}');
//                                            if (angular.isDefined(field.hint) && field.hint.length > 0) {
//                                                var hintElement = angular.element('<span class="glyphicon glyphicon-question-sign"  tooltip=" ' + field.hint + ' " tooltip-trigger="mouseenter" tooltip-placement="right"></span>');
//                                                labelElement = labelElement.prepend(hintElement);
//                                            }
//                                            newElement = newElement.prepend(labelElement);
//                                            //                                            newElement = newElement.append(' <div class="row">&nbsp;</div>')
//                                        }
                                            }
                                            //                                    if (!field.isDependant) {
                                            //                                    mainDiv = mainDiv.add('ng-show', !field.isDependant);
//                                    if (field.isDependant)
//                                    {
//                                        mainDiv.addClass('ng-hide');
//                                    }
//                                    else
//                                    {
//                                        if (mainDiv.hasClass('ng-hide'))
//                                        {
//                                            mainDiv.removeClass('ng-hide');
//                                        }
//
//                                    }

                                            mainDiv = mainDiv.append(newElement);

                                            // Add the element to the page
                                            elementCnt++;
//                                    console.log(elementCnt % elementPerRow);
                                            //                                    alert('lenght ::::::::: >> ' + template.length);
                                            if (elementCnt % elementPerRow === 0) {
                                                //                                        alert('inside modulo......' + elementCnt);

                                                this.append(mainDiv);
                                                //                                        this.append('<div class="row">&nbsp;</div>')
                                                mainDiv = null;
                                            }

                                            else if (template.length % 2 === 0)
                                            {
                                                if (template.length - 1 === elementCnt)
                                                {
                                                    //                                        alert('same' +(attrs.dbMap.length + 1)+'----->>'+elementCnt);
                                                    if (elementCnt % elementPerRow !== 0) {
//                                            alert('not equals 0 ');
                                                        this.append(mainDiv);
//                                                        this.append('<div class="row">&nbsp;</div>');
                                                    }
                                                }
                                            }
                                            else if (template.length % 2 !== 0)
                                            {
                                                if (template.length === elementCnt)
                                                {
                                                    //                                        alert('same' +(attrs.dbMap.length + 1)+'----->>'+elementCnt);
                                                    if (elementCnt % elementPerRow !== 0) {
//                                            alert('not equals 0 ');
                                                        this.append(mainDiv);
//                                                        this.append('<div class="row">&nbsp;</div>');
                                                    }
                                                }
                                            }
                                            newElement = null;
                                            //
                                        }
                                    }
                                }
                            };
                            angular.forEach(template, buildFields, element);
                            //  Determine what tag name to use (ng-form if nested; form if outermost)
                            while (!angular.equals(iterElem.parent(), $document) && iterElem.parent().length) {
                                if (['form', 'ngForm'].indexOf(attrs.$normalize(angular.lowercase(iterElem.parent()[0].nodeName))) > -1) {
                                    foundOne = true;
                                    break;
                                }
                                iterElem = iterElem.parent();
                            }
                            if (foundOne) {
//                                newElement = angular.element($document[0].createElement('ng-form'));
                                newElement = angular.element("<ng-form name=" + attrs.name + "></ng-form>");
                            }
                            else {
                                newElement = angular.element("<form></form>");
                            }

                            //  Psuedo-transclusion
                            angular.forEach(attrs.$attr, function (attName, attIndex) {
                                newElement.attr(attName, attrs[attIndex]);
                            });
                            newElement.attr('model', attrs.ngModel);
                            newElement.removeAttr('ng-model');
                            angular.forEach(element[0].classList, function (clsName) {
                                newElement[0].classList.add(clsName);
                            });
                            newElement.addClass('dynamic-form');
                            newElement.append(element.contents());
                            //  onReset logic
                            newElement.data('$_cleanModel', angular.copy(model));
                            newElement.bind('reset', function () {
                                $timeout(function () {
                                    $scope.$broadcast('reset', arguments);
                                }, 0);
                            });
                            $scope.$on('reset', function () {
                                $scope.$apply(function () {
                                    $scope[attrs.ngModel] = {};
                                });
                                $scope.$apply(function () {
                                    $scope[attrs.ngModel] = angular.copy(newElement.data('$_cleanModel'));
                                });
                            });
                            //  Compile and update DOM
                            $compile(newElement)($scope);
                            element.replaceWith(newElement);
                        });
                    }

                }
                render();
            };
            return {
                restrict: 'E',
                transclude: true,
                link: link
            };

        }]);
    //  Not a fan of how Angular's ngList is implemented, so here's a better one (IMO).  It will ONLY
    //  apply to <dynamic-form> child elements, and replaces the ngList that ships with Angular.
    globalProvider.compileProvider.directive('ngList', [function () {
            return {
                require: '?ngModel',
                link: function (scope, element, attr, ctrl) {
                    var match = /\/(.*)\//.exec(element.attr(attr.$attr.ngList)),
                            separator = match && new RegExp(match[1]) || element.attr(attr.$attr.ngList) || ',';
                    if (element[0].form !== null && !angular.element(element[0].form).hasClass('dynamic-form')) {
                        return;
                    }

                    ctrl.$parsers.splice(0, 1);
                    ctrl.$formatters.splice(0, 1);
                    ctrl.$parsers.push(function (viewValue) {
                        var list = [];
                        if (angular.isString(viewValue)) {
                            //  Don't have Angular's trim() exposed, so let's simulate it:
                            if (String.prototype.trim) {
                                angular.forEach(viewValue.split(separator), function (value) {
                                    if (value)
                                        list.push(value.trim());
                                });
                            }
                            else {
                                angular.forEach(viewValue.split(separator), function (value) {
                                    if (value)
                                        list.push(value.replace(/^\s*/, '').replace(/\s*$/, ''));
                                });
                            }
                        }

                        return list;
                    });
                    ctrl.$formatters.push(function (val) {
                        var joinBy = angular.isString(separator) && separator || ', ';
                        if (angular.isArray(val)) {
                            return val.join(joinBy);
                        }

                        return undefined;
                    });
                }
            };
        }]);


    globalProvider.controllerProvider.register('SearchSubEntityController', ["$rootScope", "$scope",
        "SearchSubEntityService", "CenterCustomService", function ($rootScope, $scope,
                SearchSubEntityService, CenterCustomService) {
            $scope.defineLabelForSubEntity = function (fieldId, model, attribute, isDiamond)
            {
                $scope.model = model;
                $scope.attribute = attribute;
                $scope.dropdownForSubEntity = [];
                $scope.fieldId = fieldId;
                $scope.isDiamond = isDiamond;
                var success = function (data) {
                    if (data.length !== 0) {
                        angular.forEach(data, function (item) {

                            $scope.dropdownForSubEntity.push({
                                id: item.value,
                                text: item.label
                            });
                        });
                    }

                };
                var failure = function () {
                };
                if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                    // Center Call
                    CenterCustomService.createDropDownListForSubEntity($scope.fieldId, success, failure);
                } else {
                    // Master Call
                    SearchSubEntityService.createDropDownListForSubEntity($scope.fieldId, success, failure);
                }
            };
        }
    ]);
    globalProvider.controllerProvider.register('SearchMultiSelectController', ["$rootScope", "$scope",
        "CustomMasterService", "CustomCenterMasterService", function ($rootScope, $scope,
                CustomMasterService, CustomCenterMasterService) {
            $scope.defineLabel = function (label, model, attribute, defaultValue, isDiamond, fieldId,displayShortcutCode)
            {
                $scope.defaultValue = defaultValue;
                $scope.model = model;
                $scope.attribute = attribute;
                $scope.fieldLabel = label;
                $scope.isDiamond = isDiamond;
                $scope.fieldId = fieldId;
                $scope.displayShortcutCode =displayShortcutCode;
            };
            $scope.autoComplete = {
                multiple: true,
                closeOnSelect: false,
                placeholder: 'Select',
                initSelection: function (element, callback) {
                    $rootScope.maskLoading();
                    setTimeout(function () {

                        $scope.defaultList = [];
                        $scope.initList = [];
                        $scope.names = [];
                        var attrs = $scope.attribute;
                        var model = $scope.model;
                        if ($scope[attrs][model] !== null && $scope[attrs][model] !== undefined && $scope[attrs][model].length > 0) {
                            $scope.dataModel = $scope[attrs][model].replace(/&/g, ',');
                        }
                        if ($scope.dataModel !== undefined)
                        {
                            var success = function (response) {

                                if (response.data !== null && response.data !== undefined) {

                                   var displayElement;
                                        if ($scope.displayShortcutCode === true || $scope.displayShortcutCode === 'true')
                                        {
                                            displayElement = parseInt(response.shortcutCode) + "-" + response.label;
                                        } else
                                        {
                                            displayElement = response.label;
                                        }
                                        $scope.names.push({
                                            id: parseInt(response.value),
                                            text: displayElement
                                        });

                                }
                                if ($scope.dataModel !== undefined && $scope.dataModel !== 'undefined' && $scope.dataModel.length > 0) {
                                    var tempdata = angular.copy($scope.dataModel);
                                    ;
                                    var temp = $scope.dataModel.split(',');
                                    if (temp !== undefined) {
                                        for (var i = 0; i < $scope.names.length; i++)
                                        {
                                            for (var a in temp) {
                                                if (temp[a].trim().toString() === $scope.names[i].id.toString())
                                                {
                                                    $scope.initList.push($scope.names[i]);
                                                }
                                            }
                                        }
                                        var initValue = [];
                                        angular.forEach($scope.initList, function (recipient) {
                                            initValue.push({id: recipient.id,
                                                text: recipient.text,
                                            });
                                        });
                                        callback(initValue);
                                        $scope[attrs][model] = tempdata;
                                    }
                                }


                                $rootScope.unMaskLoading();
                            };
                            var failure = function () {
                                $rootScope.unMaskLoading();
                            };
                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call center methods
                                CustomCenterMasterService.retrieveAllValuesForMasters({primaryKey: $scope.fieldId}, success, failure);
                            } else
                            {
                                // Call master methods
                                CustomMasterService.retrieveAllValuesForMasters({primaryKey: $scope.fieldId}, success, failure);
                            }

                        }
                        $rootScope.unMaskLoading();
                    },
                            500);
                },
                formatResult: function (item) {

                    return item.text;
                },
                formatSelection: function (item) {

                    return item.text;
                },
                query: function (query) {
                    $scope.names = [];
                    var success = function (response) {


                        if (response.data !== null && response.data !== undefined) {

                            angular.forEach(response.data, function (response)
                            {
                                 var displayElement;
                                if ($scope.displayShortcutCode === true || $scope.displayShortcutCode === 'true')
                                {
                                    displayElement = parseInt(response.shortcutCode) + "-" + response.label;
                                } else
                                {
                                    displayElement = response.label;
                                }
                                $scope.names.push({
                                    id: parseInt(response.value),
                                    text: displayElement
                                });
                            });

                        }
                        query.callback({
                            results: $scope.names
                        });
                    };
                    var failure = function () {
                    };
                    var searchterm = query.term.trim();
                    var searchDetail = [$scope.fieldId, searchterm];
                    console.log("search detail/." + searchDetail);
                    if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                        // Call center methods
                        CustomCenterMasterService.retrieveAllValuesForMastersFrMultiSelect(searchDetail, success, failure);
                    } else
                    {
                        // Call master methods

                        CustomMasterService.retrieveAllValuesForMastersFrMultiSelect(searchDetail, success, failure);
                    }

                }

            }


        }]);

    globalProvider.controllerProvider.register('AutoGeneratedSingleSelectController', ["$rootScope", "$scope", function ($rootScope, $scope) {
            $scope.defineLabel = function (label, model, attribute, defaultValue, isDiamond)
            {

                $scope.defaultValue = defaultValue;
                $scope.model = model;
                $scope.attribute = attribute;

                $scope.fieldLabel = label;
                $scope.isDiamond = isDiamond;
            };

            $scope.autoComplete = {
                multiple: true,
                closeOnSelect: false,
                placeholder: 'Select',
                allowClear: true,
                initSelection: function (element, callback) {
                    var data = [];
                    console.log('here.. ' + data)
                    callback(data);

                },
                formatResult: function (item) {

                    return item.text;
                },
                formatSelection: function (item) {

                    return item.text;
                },
                ajax: {
                    url: $rootScope.appendAuthToken($rootScope.centerapipath + "customfield/searchautogenerated"),
                    dataType: 'json',
                    data: function (term, page) { // page is the one-based page number tracked by Select2
                        return {
                            q: term, //search term
                            page_limit: 10, // page size
                            page: page - 1, // page numbe
                            field_name: $scope.model
                        };
                    },
                    results: function (data, page) {
                        data = data.data;
                        var more = (page * 10) < data.total;
                        var colorColumnData = [];
                        angular.forEach(data.records, function (value, key) {
                            colorColumnData.push({id: value, text: value});
                        });
                        colorColumnData = $scope.orderByName(colorColumnData, ['text']);
                        // notice we return the value of more so Select2 knows if more results can be loaded
                        return {results: colorColumnData, more: more};
                    }
                }
            }
        }]);

    globalProvider.controllerProvider.register('SearchUserMultiSelectController', ["$rootScope", "$scope",
        "UserManagementServiceSearch", "CenterCustomService", function ($rootScope, $scope,
                UserManagementService, CenterCustomService) {

            $scope.isEmp = false;
            $scope.isDep = false;
            $scope.isDeg = false;
            $scope.isFran = false;
            $scope.defineLabel = function (isEmployee, isDepartment, isDesignation, isFranchise, model, isMulti, attr, isDiamond)
            {
                //                        $scope.numberSeleccted = 1;
                $scope.model = model;
                $scope.attribute = attr;
                var dep = null;
                var emp = null;
                var desg = null;
                var fran = null;
                $scope.isDiamond = isDiamond;
                if (isEmployee === true || isEmployee === 'true') {
                    $scope.isEmp = true;
                    emp = "<tr>\n\<td >'@E' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Employees</td>\n\</tr>";
                }
                if (isDepartment === true || isDepartment === 'true') {
                    $scope.isDep = true;
                    dep = "<tr>\n\<td >'@D' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Departments</td>\n\</tr>";
                }
                if (isDesignation === true || isDesignation === 'true') {
                    $scope.isDeg = true;
                    desg = "<tr>\n\<td >'@R' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Designations</td>\n\</tr>";
                }
                if (isFranchise === true || isFranchise === 'true') {
                    $scope.isFran = true;
                    fran = "<tr>\n\<td >'@F' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Franchises</td>\n\</tr>";
                }
                if (isMulti !== 'undefined') {
                    $scope.isMulti = isMulti;
                }
                var finalString = '';
                if (emp !== null) {
                    finalString = finalString + emp;
                }
                if (dep !== null) {
                    finalString = finalString + dep;
                }
                if (desg !== null) {
                    finalString = finalString + desg;
                }
                if (fran !== null) {
                    finalString = finalString + fran;
                }

                $scope.customPopover = "<NOBR>\n\<font color='red;'>Use the shortcuts to search </font></NOBR><br/>\n\<table cellpadding='0' cellspacing='0'>";
                if (finalString !== null) {
                    $scope.customPopover = $scope.customPopover + finalString;
                }
                $scope.customPopover = $scope.customPopover + "</table>";

            };

            $scope.autoCompleteUser = {
                multiple: true,
                closeOnSelect: false,
                //                        maximumSelectionSize: $scope.numberSeleccted,
                placeholder: 'Select',
                initSelection: function (element, callback) {
                    setTimeout(function () {
                        var attrs = $scope.attribute;
                        var model = $scope.model;
                        $scope.dataModel = $scope[attrs][model];
                        if ($scope.dataModel !== undefined) {
                            var tempdata = $scope.dataModel;
                            var array = $scope.dataModel.split(',');
                            if (array !== undefined) {

                                if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                    // Call Center Method
                                    CenterCustomService.defaultSelection(array, function (res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        $scope[attrs][model] = tempdata;
                                    }, function () {
                                    });
                                } else
                                {
                                    // Call Master Method
                                    UserManagementService.defaultSelection(array, function (res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        $scope[attrs][model] = tempdata;
                                    }, function () {
                                    });
                                }

                            }
                        }

                    }, 500);
                    //                           
                },
                formatResult: function (item) {
                    return item.text;
                },
                formatSelection: function (item) {
                    return item.text;
                },
                query: function (query) {
                    var selected = query.term;
                    $scope.names = [];
                    var success = function (data) {
                        if (data.length !== 0) {
                            $scope.names = [];
                            angular.forEach(data, function (item) {

                                $scope.names.push({
                                    id: item.value + ":" + item.description,
                                    text: item.label
                                });
                            });
                        }
                        query.callback({
                            results: $scope.names
                        });
                    };
                    var failure = function () {
                    };

                    if ($scope.isEmp === true) {
                        var searchEmp = false;
                        var search;
                        if ($scope.isDep === false && $scope.isDeg === false && $scope.isFran === false)
                        {
                            // If only employee ,then search directly
                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                searchEmp = true;
                                search = query.term.slice(2);
                            } else {
                                searchEmp = true;
                                search = query.term;
                            }
                        } else {
                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                searchEmp = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchEmp === true) {
                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call Center method
                                CenterCustomService.retrieveusers(search.trim(), success, failure);
                            } else
                            {
                                // Call Master method
                                UserManagementService.retrieveusers(search.trim(), success, failure);
                            }
                        }
                    }

                    if ($scope.isDep === true) {
                        var search;
                        var searchDep = false;
                        if ($scope.isEmp === false && $scope.isDeg === false && $scope.isFran === false)
                        {
                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                searchDep = true;
                                search = query.term.slice(2);

                            } else {
                                searchDep = true;
                                search = query.term;
                            }
                        } else
                        {
                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                searchDep = true;
                                search = query.term.slice(2);

                            }
                        }
                        if (searchDep === true) {
                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call Center method
                                CenterCustomService.retrieveDepartmentList(search.trim(), success, failure);
                            } else
                            {
                                // Call Master method
                                UserManagementService.retrieveDepartmentList(search.trim(), success, failure);
                            }
                        }
                    }
                    if ($scope.isDeg === true) {
                        var search;
                        var searchRole = false;
                        if ($scope.isEmp === false && $scope.isDep === false && $scope.isFran === false) {
                            if (selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                searchRole = true;
                                search = query.term.slice(2);
                            } else {
                                searchRole = true;
                                search = query.term;
                            }
                        } else
                        {
                            if (selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                searchRole = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchRole === true) {

                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call Center method
                                CenterCustomService.retrieveroles(search.trim(), success, failure);
                            } else
                            {
                                UserManagementService.retrieveroles(search.trim(), success, failure);
                            }
                        }
                    }
                    if ($scope.isFran === true) {

                        var search;
                        var searchFranchise = false;
                        if ($scope.isEmp === false && $scope.isDep === false && $scope.isDeg === false) {

                            if (selected.substring(0, 2) === '@F' || selected.substring(0, 2) === '@f') {
                                searchFranchise = true;
                                search = query.term.slice(2);
                            } else {
                                searchFranchise = true;
                                search = query.term;
                            }
                        } else
                        {
                            if (selected.substring(0, 2) === '@F' || selected.substring(0, 2) === '@f') {
                                searchFranchise = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchFranchise === true) {



                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Center call  

                                CenterCustomService.retrieveFranchises(search.trim(), success, failure);
                            } else {
                                // MAster call
                                UserManagementService.retrieveFranchises(search.trim(), success, failure);
                            }
                        }
                    }

                }
            };
        }]);
    globalProvider.controllerProvider.register('SearchUserSingleSelectController', ["$rootScope", "$scope",
        "UserManagementServiceSearch", "CenterCustomService", function ($rootScope, $scope,
                UserManagementService, CenterCustomService) {

            $scope.isEmp = false;
            $scope.isDep = false;
            $scope.isDeg = false;
            $scope.isFran = false;
            $scope.defineLabel = function (isEmployee, isDepartment, isDesignation, isFranchise, model, isMulti, attr, isDiamond)
            {
                //                        $scope.numberSeleccted = 1;
                $scope.model = model;
                $scope.attribute = attr;
                $scope.isDiamond = isDiamond;
                var dep = null;
                var emp = null;
                var desg = null;
                var fran = null;
                if (isEmployee === true || isEmployee === 'true') {
                    $scope.isEmp = true;
                    emp = "<tr>\n\<td >'@E' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Employees</td>\n\</tr>";
                }
                if (isDepartment === true || isDepartment === 'true') {
                    $scope.isDep = true;
                    dep = "<tr>\n\<td >'@D' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Departments</td>\n\</tr>";
                }
                if (isDesignation === true || isDesignation === 'true') {
                    $scope.isDeg = true;
                    desg = "<tr>\n\<td >'@R' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Designations</td>\n\</tr>";
                }
                if (isFranchise === true || isFranchise === 'true') {
                    $scope.isFran = true;
                    fran = "<tr>\n\<td >'@F' </td>\n\<td> &nbsp;  &nbsp;</td>\n\<td align='left'>Franchises</td>\n\</tr>";
                }
                if (isMulti !== 'undefined') {
                    $scope.isMulti = isMulti;
                }
                var finalString = '';
                if (emp !== null) {
                    finalString = finalString + emp;
                }
                if (dep !== null) {
                    finalString = finalString + dep;
                }
                if (desg !== null) {
                    finalString = finalString + desg;
                }
                if (fran !== null) {
                    finalString = finalString + fran;
                }

                $scope.customPopover = "<NOBR>\n\<font color='red;'>Use the shortcuts to search </font></NOBR><br/>\n\<table cellpadding='0' cellspacing='0'>";
                if (finalString !== null) {
                    $scope.customPopover = $scope.customPopover + finalString;
                }
                $scope.customPopover = $scope.customPopover + "</table>";

            };

            $scope.autoCompleteUser = {
                multiple: true,
                closeOnSelect: false,
                maximumSelectionSize: 1,
                placeholder: 'Select',
                initSelection: function (element, callback) {
                    setTimeout(function () {
                        var attrs = $scope.attribute;
                        var model = $scope.model;
                        $scope.dataModel = $scope[attrs][model];
                        if ($scope.dataModel !== undefined) {
                            var tempdata = $scope.dataModel;
                            var array = $scope.dataModel.split(',');
                            if (array !== undefined) {
                                if ($scope.isDiamond === true || $scope.isDiamond === 'true') {

                                    // Call Center Method
                                    CenterCustomService.defaultSelection(array, function (res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        $scope[attrs][model] = tempdata;
                                    }, function () {
                                    });
                                } else
                                {
                                    // Call Master Method
                                    UserManagementService.defaultSelection(array, function (res) {
                                        var data = [];
                                        $scope.result = JSON.parse(angular.toJson(res));
                                        for (key in  $scope.result)
                                        {
                                            data.push({id: key, text: res[key]});
                                        }
                                        callback(data);
                                        $scope[attrs][model] = tempdata;
                                    }, function () {
                                    });
                                }


                            }
                        }

                    }, 500);
                    //                           
                },
                formatResult: function (item) {
                    return item.text;
                },
                formatSelection: function (item) {
                    return item.text;
                },
                query: function (query) {
                    var selected = query.term;
                    $scope.names = [];
                    var success = function (data) {
                        if (data.length !== 0) {
                            $scope.names = [];
                            angular.forEach(data, function (item) {

                                $scope.names.push({
                                    id: item.value + ":" + item.description,
                                    text: item.label
                                });
                            });
                        }
                        query.callback({
                            results: $scope.names
                        });
                    };
                    var failure = function () {
                    };
                    if ($scope.isEmp === true) {
                        var searchEmp = false;
                        var search;
                        if ($scope.isDep === false && $scope.isDeg === false && $scope.isFran === false)
                        {
                            // If only employee ,then search directly
                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                searchEmp = true;
                                search = query.term.slice(2);
                            } else {
                                searchEmp = true;
                                search = query.term;
                            }
                        } else {
                            if (selected.substring(0, 2) === '@E' || selected.substring(0, 2) === '@e') {
                                searchEmp = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchEmp === true) {

                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call center method
                                CenterCustomService.retrieveusers(search.trim(), success, failure);
                            } else
                            {
                                //  Call master method
                                UserManagementService.retrieveusers(search.trim(), success, failure);
                            }
                        }
                    }
                    if ($scope.isDep === true) {
                        var search;
                        var searchDep = false;
                        if ($scope.isEmp === false && $scope.isDeg === false && $scope.isFran === false)
                        {
                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                searchDep = true;
                                search = query.term.slice(2);
                            } else {
                                searchDep = true;
                                search = query.term;
                            }
                        } else
                        {
                            if (selected.substring(0, 2) === '@D' || selected.substring(0, 2) === '@d') {
                                searchDep = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchDep === true) {


                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call center method
                                CenterCustomService.retrieveDepartmentList(search.trim(), success, failure);
                            } else {
                                //  Call master method
                                UserManagementService.retrieveDepartmentList(search.trim(), success, failure);
                            }
                        }
                    }
                    if ($scope.isDeg === true) {

                        var search;
                        var searchRole = false;
                        if ($scope.isEmp === false && $scope.isDep === false && $scope.isFran === false) {
                            searchRole = true;
                            search = query.term;
                        } else
                        {
                            if (selected.substring(0, 2) === '@R' || selected.substring(0, 2) === '@r') {
                                searchRole = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchRole === true) {


                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Call center method
                                CenterCustomService.retrieveroles(search.trim(), success, failure);
                            } else {
                                // Call master method
                                UserManagementService.retrieveroles(search.trim(), success, failure);
                            }
                        }
                    }
                    if ($scope.isFran === true) {

                        var search;
                        var searchFranchise = false;
                        if ($scope.isEmp === false && $scope.isDep === false && $scope.isDeg === false) {
                            if (selected.substring(0, 2) === '@F' || selected.substring(0, 2) === '@f') {
                                searchFranchise = true;
                                search = query.term.slice(2);
                            } else {
                                searchFranchise = true;
                                search = query.term;
                            }
                        } else
                        {
                            if (selected.substring(0, 2) === '@F' || selected.substring(0, 2) === '@f') {
                                searchFranchise = true;
                                search = query.term.slice(2);
                            }
                        }
                        if (searchFranchise === true) {



                            if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                                // Center call  

                                CenterCustomService.retrieveFranchises(search.trim(), success, failure);
                            } else {
                                // MAster call
                                UserManagementService.retrieveFranchises(search.trim(), success, failure);
                            }
                        }
                    }
                }
            };
        }
    ]);
    globalProvider.controllerProvider.register('SearchSingleSelectController', ["$rootScope", "$scope",
        "CustomMasterService", "CustomCenterMasterService", "CenterCustomService", "CaratRangeService", "AssetCustomService", function ($rootScope, $scope,
                CustomMasterService, CustomCenterMasterService, CenterCustomService, CaratRangeService, AssetCustomService) {


            $scope.defineLabelForSingleSelect = function (label, model, attribute, defaultValue, isDiamond, fieldId,displayShortcutCode)
            {
                $scope.defaultValue = defaultValue;
                $scope.model = model;
                $scope.attribute = attribute;
                $scope.dropdown = [];
                $scope.fieldLabel = label;
                $scope.isDiamond = isDiamond;
                $scope.fieldId = fieldId;
                if (model === 'carate_range_of_lot$DRP$Long' || model === 'carate_range_of_packet$DRP$Long') {
                    var success = function (data) {
                        if (data.length !== 0) {
                            var res = JSON.parse(angular.toJson(data));
                            for (var key in res) {
                                $scope.dropdown.push({
                                    id: parseInt(key),
                                    text: res[key].toString()
                                });
                            }
                        }
                    };
                    var failure = function () {
                    };
                    if ($scope.isDiamond === true || $scope.isDiamond === 'true')
                    {
                        // Call Center method
                        CenterCustomService.makeValuesForCarateRange(success, failure);
                    } else {
                        // Call Master method
                        CaratRangeService.makeValuesForCarateRange(success, failure);
                    }
                } else if (model === 'machine_to_process_in$DRP$Long') {
                    var success = function (data) {
                        if (data.length !== 0) {
                            var res = JSON.parse(angular.toJson(data));
                            for (var key in res) {
                                $scope.dropdown.push({
                                    id: key,
                                    text: res[key].toString()
                                });
                            }
                        }
                    };
                    var failure = function () {
                    };
                    if ($scope.isDiamond === true || $scope.isDiamond === 'true') {
                        // Call center method
                        CenterCustomService.makeValuesForMachineAssets(success, failure);
                    } else {
                        // Call master method
                        AssetCustomService.makeValuesForMachineAssets(success, failure);
                    }
                } else {
                    var success = function (response) {
                        if (response.data !== null) {


                            angular.forEach(response.data, function (response)
                            {
                               var displayElement;
                                if (displayShortcutCode === true || displayShortcutCode === 'true')
                                {
                                    displayElement = parseInt(response.shortcutCode) + "-" + response.label;
                                } else
                                {
                                    displayElement = response.label;
                                }
                                $scope.dropdown.push({
                                    id: parseInt(response.value),
                                    text: displayElement
                                });
                            });


                        }

                    };
                    var failure = function () {
                    };
                    if ($scope.isDiamond === true || $scope.isDiamond === 'true')
                    {
                        CustomCenterMasterService.retrieveAllValuesForMasters({primaryKey: $scope.fieldId}, success, failure);
//                        // Call center methods
//                        
                    } else {
                        // Call master methods
//                     
                        CustomMasterService.retrieveAllValuesForMasters({primaryKey: $scope.fieldId}, success, failure);
                    }
                }

            };

        }]);
    globalProvider.controllerProvider.register('SearchCheckBoxController', ["$rootScope", "$scope", function ($rootScope, $scope) {


            $scope.defineLabelForCheckBox = function ()
            {

                var checkBoxList = [{
                        "id": true,
                        "text": "Yes"
                    },
                    {
                        "id": false,
                        "text": "No"
                    }];
                $scope.defaultcheckBoxList = [];
                angular.forEach(checkBoxList, function (item) {

                    $scope.defaultcheckBoxList.push({
                        id: item.id,
                        text: item.text
                    });
                });


            };

        }]);
    globalProvider.provide.factory('CustomMasterService', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.apipath + 'master/:action', {}, {
                retrieveListOfMaster: {
                    method: 'GET',
                    isArray: true,
                    params: {
                        action: 'retrieve'
                    }
                },
                retrieveDetailsOfMaster: {
                    method: 'POST',
                    params: {
                        action: 'retrieve'
                    }
                },
                retrieveAllValuesForMasters: {
                    method: 'POST',
                    params: {
                        action: 'retrieveAllValuesForMasters'
                    }
                },
                retrieveAllValuesForMastersFrMultiSelect: {
                    method: 'POST',
                    params: {
                        action: 'retrieveAllValuesForMastersFrMultiSelect'
                    }

                }

            });
            return Master;
        }]);
    globalProvider.provide.factory('CustomCenterMasterService', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.centerapipath + 'master/:action', {}, {
                retrieveListOfMaster: {
                    method: 'GET',
                    isArray: true,
                    params: {
                        action: 'retrieve'
                    }
                },
                retrieveDetailsOfMaster: {
                    method: 'POST',
                    params: {
                        action: 'retrieve'
                    }
                },
                retrieveAllValuesForMasters: {
                    method: 'POST',
                    params: {
                        action: 'retrieveAllValuesForMasters'
                    }
                },
                retrieveAllValuesForMastersFrMultiSelect: {
                    method: 'POST',
                    params: {
                        action: 'retrieveAllValuesForMastersFrMultiSelect'
                    }

                }
            });
            return Master;
        }]);
    globalProvider.provide.factory('fileuploadservice', ['$resource', '$rootScope', function (resource, rootScope) {
            var user = resource(
                    rootScope.apipath + 'fileUpload/:action', //url being hit
                    {
                        action: '@actionName'
                    }, // url perameters

            {
                uploadFiles: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'onsubmit'
                    }
                },
                cancelFile: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'oncancel'
                    }
                },
                removeImageFile: {
                    method: 'POST',
                    params: {
                        action: 'removeImageFile'
                    }
                },
                cancelAll: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'oncancelall'
                    }
                }

            });
            return user;
        }]);
    globalProvider.provide.factory('SearchSubEntityService', ['$resource', '$rootScope', function (resource, rootScope) {
            var customfieldManagment = resource(rootScope.apipath + 'customfield/:action', {}, {
                createDropDownListForSubEntity: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: "createDropDownListForSubEntity"
                    }
                },
            });
            return customfieldManagment;
        }]);
    globalProvider.provide.factory('UserManagementServiceSearch', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.apipath + 'customfield/:action', {}, {
                retrieveusers: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveusers'
                    }
                },
                retrieveDepartmentList: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveDepartmentList'
                    }
                },
                defaultSelection: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'defaultSelection'
                    }
                },
                retrieveroles: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveroles'
                    }
                },
                retrieveFranchises: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrievefranchises'
                    }
                }
            });
            return Master;
        }]);

    globalProvider.provide.factory('CenterCustomService', ['$resource', '$rootScope', function (resource, rootScope) {
            var Master = resource(rootScope.centerapipath + 'customfield/:action', {}, {
                makeValuesForCarateRange: {
                    method: 'GET',
                    params: {
                        action: 'makeValuesforcaraterange'
                    }
                },
                makeValuesForMachineAssets: {
                    method: 'GET',
                    params: {
                        action: 'makevaluesformachineassets'
                    }
                },
                retrieveusers: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveusers'
                    }
                },
                retrieveDepartmentList: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveDepartmentList'
                    }
                },
                defaultSelection: {
                    method: 'POST',
                    isArray: false,
                    params: {
                        action: 'defaultSelection'
                    }
                },
                retrieveroles: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrieveroles'
                    }
                },
                createDropDownListForSubEntity: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: "createDropDownListForSubEntity"
                    }
                },
                retrieveFranchises: {
                    method: 'POST',
                    isArray: true,
                    params: {
                        action: 'retrievefranchises'
                    }
                }
            });
            return Master;
        }]);

    globalProvider.provide.factory('CaratRangeService', ['$resource', '$rootScope', function (resource, rootScope) {
            var carateRangeManagment = resource(rootScope.apipath + 'customfield/:action', {}, {
                makeValuesForCarateRange: {
                    method: 'GET',
                    params: {
                        action: 'makeValuesforcaraterange'
                    }
                }
            });
            return carateRangeManagment;
        }]);

    globalProvider.provide.factory('AssetCustomService', ['$resource', '$rootScope', function (resource, rootScope) {
            var assetManagment = resource(rootScope.apipath + 'customfield/:action', {}, {
                makeValuesForMachineAssets: {
                    method: 'GET',
                    params: {
                        action: 'makevaluesformachineassets'
                    }
                }
            });
            return assetManagment;
        }]);
});


