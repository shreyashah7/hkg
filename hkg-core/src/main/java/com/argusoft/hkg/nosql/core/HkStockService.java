/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.argusoft.hkg.nosql.core;

import com.argusoft.hkg.nosql.model.GenericDocument;
import com.argusoft.hkg.nosql.model.HkFinalMakeableDocument;
import com.argusoft.hkg.nosql.model.HkInvoiceDocument;
import com.argusoft.hkg.nosql.model.HkIssueDocument;
import com.argusoft.hkg.nosql.model.HkIssueReceiveDocument;
import com.argusoft.hkg.nosql.model.HkLotDocument;
import com.argusoft.hkg.nosql.model.HkPacketDocument;
import com.argusoft.hkg.nosql.model.HkParcelDocument;
import com.argusoft.hkg.nosql.model.HkPersonCapabilityDocument;
import com.argusoft.hkg.nosql.model.HkPlanAccessPermissionDocument;
import com.argusoft.hkg.nosql.model.HkPlanDocument;
import com.argusoft.hkg.nosql.model.HkPurchaseDocument;
import com.argusoft.hkg.nosql.model.HkRoughMakeableDocument;
import com.argusoft.hkg.nosql.model.HkRoughStockDetailDocument;
import com.argusoft.hkg.nosql.model.HkSellDocument;
import com.argusoft.hkg.nosql.model.HkSubLotDocument;
import com.argusoft.hkg.nosql.model.HkTransferDocument;
import com.argusoft.hkg.nosql.model.HkUserGradeStatusDocument;
import com.argusoft.hkg.nosql.model.HkUserGradeSuggestionDocument;
import com.argusoft.sync.center.model.HkFieldDocument;
import com.argusoft.sync.center.model.HkLeaveDocument;
import com.argusoft.sync.center.model.HkPriceListDetailDocument;
import com.argusoft.sync.center.model.HkSystemConfigurationDocument;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.bson.BasicBSONObject;
import org.bson.types.ObjectId;

/**
 *
 * @author mmodi
 */
public interface HkStockService {

    //------------------------------------------ Stock Service Starts -------------------------------------//
    /**
     * This method is used to update the person capability considering the 4 C's
     * property.
     *
     * @Author sshah
     * @param forPerson Id of the person who has estimated the property value.
     * @param expectedPropertyValueMap Map of expected property name and value
     * map.
     * @param actualPropertyValueMap Map of actual property name and value map.
     * @param franchise Company Id of the forPerson
     */
    public void updatePersonCapabilityForProperty(Long forPerson, Map<String, Long> expectedPropertyValueMap, Map<String, Long> actualPropertyValueMap, Long franchise);

    public void updateBreakagePercentage(Long forPerson, boolean haveBreakage, Long franchise);

    public HkSystemConfigurationDocument retrieveSystemConfig(String id);

    /**
     *
     * @param forUsers for which user the leave is applied
     * @param fromDate start day of leave
     * @param toDate end day of leave
     * @return List of HkLeaveDocument
     */
    public List<HkLeaveDocument> retrieveLeavesForUserBetweenFromDateAndToDate(List<Long> forUsers, Date fromDate, Date toDate, Boolean currentlyOnLeave);

    /**
     *
     * @param franchise id of company
     * @return id and date associated with priceList
     */
    public Map<Long, Date> retrievePriceListIdAndDate(Long franchise);

    /**
     *
     * @param id of pricelist
     * @return List of HkPriceListDetailDocument
     */
    public List<HkPriceListDetailDocument> retrievePriceListDetailDocumentsFromPriceListId(Long id);

    /**
     *
     * @param priceListDocument document of price list
     * @param franchise id of franchise
     * @param modifyby id of the logged in user who is updating the price list
     */
//    public void reCaluclatePriceForPlannedPlans(HkPriceListDocument priceListDocument, Long franchise, Long modifyby);
    //------------------------------------------ Stock Service Ends -------------------------------------//
    //------------------------------------------ Invoice Service Starts -------------------------------------//
    /**
     * This method is use to create/update Invoice
     *
     * @author dhwani
     * @param invoiceCustomMap custom field value map
     * @param invoiceDbTypeMap field type map
     * @param uiFieldMap
     * @param franchise franchise id
     * @param createdBy created by
     * @param sequenceNumber
     * @param autogeneratedLabelMap
     * @param totalformulaList
     * @param featureId
     * @return success result
     */
    public String saveInvoice(Map<String, Object> invoiceCustomMap, Map<String, String> invoiceDbTypeMap, Map<String, String> uiFieldMap, Long franchise, Long createdBy, Integer sequenceNumber, Map<String, String> autogeneratedLabelMap, List<HkFieldDocument> totalformulaList, Long featureId);

    public Integer getNextInvoiceSequence();

    public Boolean isInvoiceSequenceExist(Integer invoiceId, ObjectId invoiceObjectId);

    /**
     * This method is use to retrieve Invoice by Id
     *
     * @author dhwani
     * @param invoiceId id of HkInvoiceDocument
     * @return HkInvoiceDocument
     */
    public HkInvoiceDocument retrieveInvoiceById(ObjectId invoiceId);

    /**
     * This method is use to retrieve All Invoice
     *
     * @author dhwani
     * @param franchise id of franchise
     * @param isActive status
     * @return List of HkInvoiceDocument
     */
    public List<HkInvoiceDocument> retrieveAllInvoice(Long franchise, Boolean isActive);

    public List<HkInvoiceDocument> retrieveAllInvoiceByCriteria(Long franchise, Boolean isActive, Integer offset, Integer limit);

    public long getCountofInvoiceDocumentsFromCriteria(Long franchise, Boolean isActive,List<ObjectId> invoiceIds);

    /**
     * This method is used to retrieve invoice documents by either fieldValues
     *
     * @param isArchive
     * @param invoiceIds
     * @param haveLot
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param franchise id of company
     * @return List of HkInvoiceDocument
     */
    public List<HkInvoiceDocument> retrieveInvoices(Map<String, Object> fieldValues, long franchise, Boolean isArchive, List<ObjectId> invoiceIds, Boolean haveLot,Integer offset,Integer Limit);

    /**
     *
     * @param invoiceIds
     * @param franchise
     * @param isArchive
     * @return
     */
    public List<HkInvoiceDocument> retrieveInvoices(List<ObjectId> invoiceIds, Long franchise, Boolean isArchive);

    /**
     * This method is used to retrieve invoice ids by fieldValues
     *
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param franchise id of company
     * @param isArchive status of parcel
     * @return List of ids of HkInvoiceDocument
     */
    public List<ObjectId> retrieveInvoiceIds(Map<String, Object> fieldValues, long franchise, Boolean isArchive);

    /**
     * This method is use to create/update Invoice
     *
     * @author dhwani
     * @param id id of document
     * @param invoiceCustomMap custom field value map
     * @param invoiceDbTypeMap field type map
     * @param mapForFeatureInvolvedInFormula
     * @param totalFormulaList
     * @param dbFieldWithFormulaMap
     * @param featureIdWithNameMap
     * @param franchise franchise id
     * @param updatedBy updated by
     * @param featureId
     * @param invoiceSequence
     * @param autogeneratedLabelMap
     * @return id of document
     */
    public Boolean updateInvoice(ObjectId id, Map<String, Object> invoiceCustomMap, Map<String, String> invoiceDbTypeMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, List<HkFieldDocument> totalFormulaList, Map<Long, String> featureIdWithNameMap, Long franchise, Long updatedBy, Long featureId, Integer invoiceSequence, Map<String, String> autogeneratedLabelMap);

    public Boolean deleteInvoice(ObjectId id, Long updatedBy);

    //------------------------------------------ Invoice Service Ends -------------------------------------//
    // ----------------------------------------- Parcel Service starts ----------------------------------//
    /**
     * This method is use to retrieve Parcel by Id
     *
     * @author dhwani
     * @param parcelId id of HkParcelDocument
     * @return HkParcelDocument
     */
    public HkParcelDocument retrieveParcelById(ObjectId parcelId);

    /**
     * This method is use to retrieve All Parcel
     *
     * @author dhwani
     * @param franchise id of franchise
     * @param isActive status
     * @param statusList
     * @param parcelIds
     * @return List of HkParcelDocument
     */
    public List<HkParcelDocument> retrieveAllParcel(Long franchise, Boolean isActive, List<String> statusList, List<ObjectId> parcelIds);


    /**
     * This method is use to delete Parcel
     *
     * @author dhwani
     * @param parcelId id of HkParcelDocument
     * @param updatedBy User Id
     */
    public void deleteParcel(ObjectId parcelId, Long updatedBy);

    /**
     * This method is used to retrieve parcel documents by either fieldValues or
     * invoiceIds or by both
     *
     * @param parcelIds
     * @param haveLot
     * @param status
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param invoiceIds ids of invoice
     * @param franchise id of company
     * @param isActive status of parcel
     * @return List of HkParcelDocument
     */
    public List<HkParcelDocument> retrieveParcels(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, long franchise, Boolean isArchieve, Boolean haveLot, String status, Integer offset, Integer limit);

    /**
     *
     * @param parcelIds
     * @param franchise
     * @param isArchive
     * @return
     */
    public List<HkParcelDocument> retrieveParcels(List<ObjectId> parcelIds, Long franchise, Boolean isArchive);

    /**
     * This method is used to retrieve parcel ids by either fieldValues or
     * invoiceIds or by both
     *
     * @param isArchive
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param invoiceIds ids of invoice
     * @param franchise id of company
     * @return List of ids of HkParcelDocument
     */
    public List<ObjectId> retrieveParcelIds(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, long franchise, Boolean isArchive);

    /**
     * This method is use to create/update Parcel
     *
     * @author dhwani
     * @param id id of parcel
     * @param parcelCustomMap custom field value map
     * @param parcelDbTypeMap field type map
     * @param mapForFeatureInvolvedInFormula
     * @param uiFieldMap
     * @param lotUIFieldMap
     * @param dbFieldWithFormulaMap
     * @param featureIdWithNameMap
     * @param franchise franchise id
     * @param createdBy created by
     * @param featureId
     * @param parcelSequence
     * @param autoGeneratedLabelMap
     * @return id of document
     */
    public Boolean updateParcel(ObjectId id, Map<String, Object> parcelCustomMap, Map<String, String> parcelDbTypeMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, Map<String, String> uiFieldMap, Map<String, String> lotUIFieldMap, List<HkFieldDocument> totalformulaList, Map<Long, String> featureIdWithNameMap, Long franchise, Long createdBy, Long featureId, Integer parcelSequence, Map<String, String> autoGeneratedLabelMap);

    public Integer getNextParcelSequence();

    public Boolean isParcelSequenceExist(Integer parcelId, ObjectId parcelObjectId);

    /**
     * This method is use to create/update Parcel
     *
     * @param basicBSONObjects list of field values
     * @param totalformulaList
     * @param dbFieldWithFormulaMap
     * @param franchise franchise id
     * @param createdBy created by
     * @param invoiceId invoice associated with parcel
     * @param parcelSequence
     * @param featureId
     * @return List of parcelNumber
     */
    public String createParcel(BasicBSONObject basicBSONObjects, List<HkFieldDocument> totalformulaList, Long franchise, Long createdBy, ObjectId invoiceId, Long featureId, Integer parcelSequence);

    /**
     * This method is use to merge parcels
     *
     * @param basicBSONObjects list of field values
     * @param franchise franchise id
     * @param createdBy created by
     * @param parent parent invoice selected by user
     * @param idsTomerge Array of parcels from which the this parcel will create
     * @return Id of newly created parcel
     */
    public Boolean mergeParcel(ObjectId parent, List<ObjectId> idsTomerge, List<BasicBSONObject> basicBSONObjects, Long franchise, Long createdBy);
    
    public long getCountofParcelDocumentsFromCriteria(Long franchise, Boolean isActive,ObjectId invoiceId);

    //----------------------------------------Parcel Service ends ---------------------------------------//
    //------------------------------------------ Lot Service Starts -------------------------------------//
    /**
     * This method is use to retrieve Lot by Id
     *
     * @author dhwani
     * @param lotId id of HkLotDocument
     * @return HkLotDocument
     */
    public HkLotDocument retrieveLotById(ObjectId lotId);

    /**
     * This method is use to retrieve All Lot
     *
     * @author dhwani
     * @param franchise id of franchise
     * @param isActive status
     * @param statusList
     * @return List of HkLotDocument
     */
    public List<HkLotDocument> retrieveAllLot(Long franchise, Boolean isActive, List<String> statusList);

    /**
     * This method is use to delete Lot
     *
     * @author dhwani
     * @param lotId id of HkLotDocument
     * @param updatedBy updatedBy User Id
     */
    public void deleteLot(ObjectId lotId, Long updatedBy);

    /**
     * This method is used to retrieve parcel documents by either fieldValues or
     * invoiceIds or by both
     *
     * @param lotIds
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param invoiceIds ids of invoice
     * @param parcelIds ids of parcel
     * @param franchise id of company
     * @param isActive status of parcel
     * @return List of HkParcelDocument
     */
    public List<HkLotDocument> retrieveLots(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, Long franchise, Boolean isActive);

    /**
     * This method is use to create/update Lot
     *
     * @author dhwani
     * @param id id of parcel
     * @param hasPacket has packet or not
     * @param lotCustomMap custom field value map
     * @param lotDbTypeMap field type map
     * @param mapForFeatureInvolvedInFormula
     * @param uiFieldMap
     * @param dbFieldWithFormulaMap
     * @param featureIdWithNameMap
     * @param franchise franchise id
     * @param updatedBy created by
     * @param featureId
     * @param sequenceNumber
     * @param subLots
     * @return id of document
     */
    public String updateLot(ObjectId id, Boolean hasPacket, Map<String, Object> lotCustomMap, Map<String, String> lotDbTypeMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, Map<String, String> uiFieldMap, List<HkFieldDocument> totalformulaList, Map<Long, String> featureIdWithNameMap, Long franchise, Long updatedBy, Long featureId, Long sequenceNumber, List<ObjectId> subLots);

    /**
     * This method is used to merge lots
     *
     * @param parentParcel parent parcel selected by user
     * @param mergedFrom Array of lots from which the this lot has been created
     * @param basicBSONObjects
     * @param franchise franchise id
     * @param createdBy
     * @param workAllocationIds
     * @return Id of merged Lot
     */
    public String mergeLot(ObjectId parentParcel, List<ObjectId> mergedFrom, List<BasicBSONObject> basicBSONObjects, Long franchise, Long createdBy, List<ObjectId> workAllocationIds);

    /**
     * This method is use to create/update Lot
     *
     * @param basicBSONObject
     * @param totalformulaList
     * @param dbFieldWithFormulaMap
     * @param franchise franchise id
     * @param createdByFranchise
     * @param createdBy created by
     * @param invoiceId invoice associated with lot
     * @param parcelId parcel associated with lot
     * @param featureId
     * @param sequenceNumber
     * @param subLots
     * @return List of lotNumber
     */
    public HkLotDocument createLot(BasicBSONObject basicBSONObject, List<HkFieldDocument> totalformulaList, Long franchise, Long createdByFranchise, Long createdBy, ObjectId invoiceId, ObjectId parcelId, Long featureId, Long sequenceNumber, List<ObjectId> subLots);

    public List<String> splitLot(ObjectId parentParcel, ObjectId splitFrom, List<BasicBSONObject> basicBSONObjects, Long franchise, Long createdBy, ObjectId workAllocationId);

    public List<HkLotDocument> retrieveLotsByIds(List<ObjectId> lotIds, Long franchise, Boolean isArchive, List<String> status, Boolean hasPacket, Boolean isConversionRequired);

    public Long getNextLotSequence(Long franchise);

    /**
     *
     * @param sequenceNumber
     * @param franchise
     * @return
     */
    public Boolean isLotSequenceExist(Long sequenceNumber, Long franchise);

    //------------------------------------------ Lot Service Ends -------------------------------------//
    //------------------------------------------ Packet service starts -----------------------------------//
    /**
     * This method is use to retrieve Packet by Id
     *
     * @author dhwani
     * @param packetId id of HkPacketDocument
     * @return HkPacketDocument
     */
    public HkPacketDocument retrievePacketById(ObjectId packetId, Boolean isConversionRequired);

    /**
     * This method is use to retrieve All Packet
     *
     * @author dhwani
     * @param franchise id of franchise
     * @param isActive status
     * @return List of HkPacketDocument
     */
    public List<HkPacketDocument> retrieveAllPacket(Long franchise, Boolean isActive);

    /**
     * This method is use to delete Packet
     *
     * @author dhwani
     * @param packetId id of HkPacketDocument
     */
    public Boolean deletePacket(ObjectId packetId);

    /**
     * This method is used to retrieve packet documents by either fieldValues or
     * invoiceIds/parcelIds/lotIds or by all
     *
     * @param isArchive
     * @param inStockOf
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param invoiceIds ids of invoice
     * @param parcelIds ids of parcel
     * @param lotIds ids of lot
     * @param franchise id of company
     * @return List of HkParcelDocument
     */
    public List<HkPacketDocument> retrievePackets(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, long franchise, Boolean isArchive, String inStockOf, String status, ObjectId splittedFrom, Long pieces);

    /**
     * This method is used to retrieve parcel documents by either fieldValues or
     * invoiceIds or by both
     *
     * @autor dhwani
     * @param fieldValues field values of parcel
     * @param invoiceIds ids of invoice
     * @param parcelIds ids of parcel
     * @param lotIds ids of lot
     * @param franchise id of company
     * @param isActive status of parcel
     * @return List of ids of HkParcelDocument
     */
    public List<ObjectId> retrievePacketIds(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, long franchise, Boolean isActive);

    /**
     * e
     *
     * @param id
     * @param lotCustomMap
     * @param lotDbTypeMap
     * @param mapForFeatureInvolvedInFormula
     * @param uiFieldMap
     * @param totalformulaList
     * @param dbFieldWithFormulaMap
     * @param featureIdWithNameMap
     * @param franchise
     * @param updatedBy
     * @param featureId
     * @return
     */
    public String updatePacket(ObjectId id, Map<String, Object> lotCustomMap, Map<String, String> lotDbTypeMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, Map<String, String> uiFieldMap, List<HkFieldDocument> totalformulaList, Map<Long, String> featureIdWithNameMap, Long franchise, Long updatedBy, Long featureId);

    /**
     * This method is used to merge packets
     *
     * @param parentpacket parent parcel selected by user
     * @param mergedFrom Array of lots from which the this lot has been created
     * @param basicBSONObjects
     * @param uiFieldMap
     * @param franchise franchise id
     * @param createdBy
     * @param workAllocationIds
     * @return Id of merged Packet
     */
    public ObjectId mergePacket(ObjectId parentpacket, List<ObjectId> mergedFrom, List<BasicBSONObject> basicBSONObjects, Map<String, String> uiFieldMap, Long franchise, Long createdBy, List<ObjectId> workAllocationIds);

    /**
     * This method is use to create/update packet
     *
     * @param basicBSONObject
     * @param totalformulaList
     * @param dbFieldWithFormulaMap
     * @param franchise franchise id
     * @param createdBy created by
     * @param invoiceId invoice associated with lot
     * @param parcelId parcel associated with lot
     * @param lotId packet associated with packet
     * @param featureId
     * @param sequenceNumber
     * @return List of lotNumber
     */
    public HkPacketDocument createpacket(BasicBSONObject basicBSONObject, List<HkFieldDocument> totalformulaList, Long franchise, Long createdBy, ObjectId invoiceId, ObjectId parcelId, ObjectId lotId, Long featureId, Long sequenceNumber);

    public List<String> splitPacket(ObjectId parentLot, ObjectId splitFrom, List<BasicBSONObject> basicBSONObjects, Long franchise, Long createdBy, Map<String, String> stockDbType);

    public List<HkPacketDocument> retrievePacketsByIds(List<ObjectId> packetIds, Long franchise, Boolean isArchive, List<String> status, Boolean isConversionRequired);

    public Boolean isPacketSequenceExist(Long sequenceNumber, Long franchise, ObjectId lotId);

    public Long getNextPacketSequence(Long franchise, ObjectId packetObjectId);

    //------------------------------------------ Packet Service Ends -------------------------------------//
    //------------------------------------------ Diamond service starts -----------------------------------//
    /**
     * This method retrieves map with key as object id and value as invoice
     * document
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as object id and value as HKInvoiceDocument
     * @author Shifa Salheen
     */
    public Map<ObjectId, HkInvoiceDocument> retrieveInvoiceIdAndDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves map with key as object id and value as Parcel
     * document
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as object id and value as HkParcelDocument
     * @author Shifa Salheen
     */
    public Map<ObjectId, HkParcelDocument> retrieveParcelIdAndDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves map with key as object id and value as Lot document
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as object id and value as HkLotDocument
     * @author Shifa Salheen
     */
    public Map<ObjectId, HkLotDocument> retrieveLotIdAndDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves map with key as object id and value as Packet
     * document
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as object id and value as HkPacketDocument
     * @author Shifa Salheen
     */
    public Map<ObjectId, HkPacketDocument> retrievePacketIdAndDocumentMap(Long franchise, Boolean isArchive);

    /**
     *
     * @param parcelDocument is the list of parcelDocument on which aggregrate
     * functions need to be implemented
     * @param propertyName is the property of the document on which aggregrate
     * function needs to be implemented
     * @param OperationType is the type of aggregrate function i.e
     * sum,min,max,avg,count
     * @return the result of aggregrate functions
     */
    public Double calculateParcelAggegateFunction(List<HkParcelDocument> parcelDocument, String propertyName, String OperationType);

    /**
     *
     * @param lotDocument is the list of lotDocument on which aggregrate
     * functions need to be implemented
     * @param propertyName is the property of the document on which aggregrate
     * function needs to be implemented
     * @param OperationType is the type of aggregrate function i.e
     * sum,min,max,avg,count
     * @return the result of aggregrate functions
     */
    public Double calculateLotAggegateFunction(List<HkLotDocument> lotDocument, String propertyName, String OperationType);

    /**
     *
     * @param packetDocument is the list of packetDocument on which aggregrate
     * functions need to be implemented
     * @param propertyName is the property of the document on which aggregrate
     * function needs to be implemented
     * @param OperationType is the type of aggregrate function i.e
     * sum,min,max,avg,count
     * @return the result of aggregrate functions
     */
    public Double calculatePacketAggegateFunction(List<HkPacketDocument> packetDocument, String propertyName, String OperationType);

    /**
     * This method retrieves key as parcel id and value as list of lot documnets
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as parcel id and value as list of lot documnets
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkLotDocument>> retrieveParcelIdAndLotDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves key as parcel id and value as list of packet
     * documents
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as parcel id and value as list of packet documents
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkPacketDocument>> retrieveParcelIdAndPacketDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves key as lot id and value as list of packet documents
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as lot id and value as list of packet documents
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkPacketDocument>> retrieveLotIdAndPacketDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves key as invoice id and value as list of packet
     * documents
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as lot id and value as list of packet documents
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkPacketDocument>> retrieveInvoiceIdAndPacketDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves key as invoice id and value as list of parcel
     * documents
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as lot id and value as list of packet documents
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkParcelDocument>> retrieveInvoiceIdAndParcelDocumentMap(Long franchise, Boolean isArchive);

    /**
     * This method retrieves key as invoice id and value as list of lot
     * documents
     *
     * @param franchise is the company Id
     * @param isArchive
     * @return a map with key as lot id and value as list of packet documents
     * @author Shifa Salheen
     */
    public Map<ObjectId, List<HkLotDocument>> retrieveInvoiceIdAndLotDocumentMap(Long franchise, Boolean isArchive);

    //------------------------------------------ Diamond service ends -------------------------------------//
    //------------------------------------------ Allocation Service Starts -------------------------------------//
    /**
     *
     * @param dbFieldWithFormulaMap
     * @param mapForFeatureInvolvedInFormula
     * @param featureIdNameMap
     * @Author dhwani
     * @param stockIds ids of lots/packets
     * @param isPacket is it packet
     * @param basicBSONObject for storing field values
     * @param franchise company id
     * @param allotTo allot to user
     * @param workAllocationIds ids of workAllocation
     * @param createdBy
     * @return true/false according to success/failure
     */
    public Boolean manualStockAllocation(List<ObjectId> stockIds, BasicBSONObject basicBSONObject, boolean isPacket, Long franchise, long allotTo, List<ObjectId> workAllocationIds, long createdBy, Map<String, String> dbFieldWithFormulaMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, Map<Long, String> featureIdNameMap);

    /**
     * @Author Gautam
     * @param propertyName to be used as parameter to prioritize.
     * @param franchiseId company id
     * @return person capability documents
     */
    public List<HkPersonCapabilityDocument> retrievePersonCapabilityWithBreakagePercentage(String propertyName, Long franchiseId);

    //------------------------------------------ Allocation Service Ends -------------------------------------//
    //------------------------------------------ Change Status Service Starts---------------------------------//
    /**
     * This method is used to change the status of lot/packets
     *
     * @param basicBSONObject field value object
     * @param packetIds ObjectIds of packet who's status needs to be changed
     * @param lotIds ObjectIds of lot who's status needs to be changed
     * @param dueDate entered by user for lot/packet.
     * @param status The proposed status that is to be changed of lots/packets.
     * @param franchise Company id of user.
     * @param createdBy Id of user.
     * @param dbFieldWithFormulaMap
     * @param mapForFeatureInvolvedInFormula
     * @param featureIdWithNameMap
     * @return the Boolean value of the response
     */
    public Boolean changeStatus(BasicBSONObject basicBSONObject, List<ObjectId> packetIds, List<ObjectId> lotIds, Date dueDate, String status, Long franchise, Long createdBy, Map<String, String> dbFieldWithFormulaMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, Map<Long, String> featureIdWithNameMap);

    /**
     * This method is used to retrieve the lot documents by criteria.
     *
     * @param fieldValues Map of fieldValues in lot documents.
     * @param invoiceIds ObjectIds of invoices to search in lot documents.
     * @param parcelIds ObjectIds of parcels to search in lot documents.
     * @param lotIds ObjectIds of lots to search in packet documents.
     * @param statusList Status of lots that needs to be retrieved.
     * @param proposedStatusList Proposed Status to which that lot's status
     * leads to.
     * @param franchise Company Id of User.
     * @param isPacket Boolean represents whether to retrieve lots or packets.
     * @param isArchive Archive status of the lots or packets.
     * @return List of Lot Documents.
     */
    public List retrieveLotsByCriteria(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, List<String> statusList, List<String> proposedStatusList, Long franchise, Boolean isArchive, Boolean isPacket);

    //------------------------------------------ Change Status Service Ends ----------------------------------//
    //------------------------------------------ EOD Srvice Starts ----------------------------------//
    /**
     * This method is used to retrieve Lots/Packets on the issue screen for the
     * end of the day service.
     *
     * @Author sshah
     * @param bsonObject for fetching Id of the user who has the stock currently
     * and need to issue to stock department
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Issuing.
     */
    public List retrieveLotsOrPacketsForIssueForEod(BasicBSONObject bsonObject, Boolean isPacket, Long franchise);

    /**
     * This method is used to retrieve Lots/Packets on the receive screen for
     * the end of the day service.
     *
     * @Author sshah
     * @param bsonObject for fetching Id of the department who needs to receive
     * all the stock.
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Receiving.
     */
    public List retrieveLotsOrPacketsForRecieveForEod(BasicBSONObject bsonObject, Boolean isPacket, Long franchise);

    /**
     * This method is used to retrieve Lots/Packets on the return screen for the
     * end of the day service.
     *
     * @Author sshah
     * @param createdBy Id of the user who has issued the lot or packet
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Returning.
     */
    public List retrieveLotsOrPacketsForReturnForEod(Long createdBy, Boolean isPacket, Long franchise);

    /**
     * This method is used to issue lots/packets to the stock department.
     *
     * @param dbFieldWithFormulaMap
     * @param companyId
     * @Author sshah
     * @param basicBSONObject for setting the id of the department in
     * in_stock_of_dept field of issue documents.
     * @param lotIds ObjectIds of lots to be issued.
     * @param packetIds ObjectIds of packets to be issued.
     * @param issuedBy User Id who issued the lots/packets.
     * @return Boolean flag for success or failure.
     */
    public Boolean issueLotsOrPacketsForEod(BasicBSONObject basicBSONObject, List<ObjectId> lotIds, List<ObjectId> packetIds, long issuedBy, Map<String, String> dbFieldWithFormulaMap, Long companyId);

    /**
     * This method is used to receive Lots/packets by the issued user.
     *
     * @Author sshah
     * @param issueDocuments List of issue documents which needs to be received.
     * @param franchise Company Id of the given user.
     */
    public void receiveLotsOrPacketsForEod(List<HkIssueDocument> issueDocuments, Long franchise);

    /**
     * This method is used to return the given stock to the user who issued that
     * stock.
     *
     * @Author sshah
     * @param issueDocuments List of issue documents which needs to be returned.
     * @param franchise Company Id of the given user.
     */
    public void returnLotsOrPacketsForEod(List<HkIssueDocument> issueDocuments, Long franchise);

    //------------------------------------------ EODService Ends ----------------------------------//
    //------------------------------------------ Issue Srvice Ends ----------------------------------//
    /**
     * This method is use to create/update Issue
     *
     * @author dhwani
     * @param document object of HkIssueDocument
     * @return id of document
     */
    public ObjectId saveOrUpdateIssue(HkIssueDocument document);

    /**
     * This method is use to retrieve Issue by Id
     *
     * @author dhwani
     * @param issueId id of HkIssueDocument
     * @return HkIssueDocument
     */
    public HkIssueDocument retrieveIssueById(ObjectId issueId);

    /**
     * This method is use to retrieve All Issue
     *
     * @author dhwani
     * @param franchise id of franchise
     * @param isActive status
     * @return List of HkIssueDocument
     */
    public List<HkIssueDocument> retrieveAllIssue(Long franchise, Boolean isActive);

    /**
     * This method is use to delete Issue
     *
     * @author dhwani
     * @param issueId id of HkIssueDocument
     */
    public void deleteIssue(ObjectId issueId);

    //------------------------------------------ Plan Service Starts --------------------------------//
    public void savePlanAccess(List<HkPlanAccessPermissionDocument> accessPermissionDocument);

    public List<HkPlanAccessPermissionDocument> retrieveActivePlanAccessByNode(Long nodeId, Long franchise);

    public void deactivatePlanAccess(Long id, Long companyId);

    //-------------------------------- WRITE SERVICE / FINALIZE SERVICE METHODS --------------------------------------------
    /**
     *
     * @Author dhwani
     * @param planType type of plan estimate/plan/parameter
     * @param nodeId id of current node
     * @param franchise id of company
     * @param objectId id of lot/packet
     * @param isPacket is it a packet or not
     * @param loggedIn id of logged in user
     * @return list of plans
     */
    public List<HkPlanDocument> retrieveExistingPlanEntities(String planType, long nodeId, long franchise, ObjectId objectId, Boolean isPacket, Long loggedIn);

    /**
     *
     * @Author dhwani
     * @param color id of selected color
     * @param cut id of selected cut
     * @param clarity id of selected clarity
     * @param caratId id of carat range
     * @param fluorescence value of fluorescence
     * @return related price found for the combination
     */
    public Double calculatePriceFromPriceList(Long color, Long cut, Long clarity, Long fluorescence, Long caratId);

    /**
     * @Author dhwani
     * @param caratValue value of carat
     * @return carat range id from the value
     */
    public Long retrieveCaratRangeFromCaratValue(Double caratValue);

    /**
     * @Author Shifa Salheen
     * @param caratIds is the list of carat ids of carat
     * @return map of caratId with its min and max value
     */
    public Map<Long, String> caratRangeMap(List<Long> caratIds);

    /**
     *
     * @param loggedInuser id of logged in user
     * @param franchise id of company
     * @return List of HkPlanDocument
     */
    public List<HkPlanDocument> retrieveEnteredPlansByLoggedInUsers(Long loggedInuser, Long franchise);

    /**
     * @Author dhwani
     * @param planIds plans' objectIds to be retrieve
     * @param franchise Id of company
     * @return List of plan documents
     */
    public List<HkPlanDocument> retrievePlansByIds(List<ObjectId> planIds, Long franchise);

    /**
     *
     * @param refrenceId id of refrence tag
     * @param franchise id of company
     * @return List of plan documents
     */
    public List<HkPlanDocument> retrievePlansByReferenceId(ObjectId refrenceId, Long franchise);

    /**
     * @param dbFieldWithFormulaMap
     * @param oldTabData
     * @Author dhwani
     * @param mainTag Tag A
     * @param planDocuments plan documents which you want to edit
     * @param deletePlanIds deleted plan ids (objectIds)
     * @param newlyAddedTabs newly added tags
     * @param franchise id of comapny
     * @param updatedBy id of updated by
     * @param priceMap map of tag wise prices
     * @param currencyCodeMap map of tag wise code
     * @return plan ids
     */
//    public Boolean editPlans(ObjectId mainTag, Map<String, BasicBSONObject> oldTabData, List<ObjectId> deletePlanIds, Map<String, BasicBSONObject> newlyAddedTabs, Long franchise, Long updatedBy, Map<String, Double> priceMap, Map<String, String> currencyCodeMap, Map<String, String> dbFieldWithFormulaMap);
    /**
     * @param planType type of plan
     * @Author dhwani
     * @param status status of plan
     * @param lot id of lot
     * @param packet id of packet
     * @return list of plan entity
     */
    public List<HkPlanDocument> retrievePreviousFinalizedPlansForLotOrPacket(String status, ObjectId lot, ObjectId packet, String planType);

    //------------------------------------------ Sell Service Starts -------------------------------//
    /**
     * This method is use to sell Lot
     *
     * @author Shreya
     * @param basicBSONObject field values object
     * @param franchise franchise id
     * @param createdBy created by
     * @param lotId lot id associated with it.
     * @param packetId packet id associated with it.
     * @param dbFieldWithFormulaMap
     * @return List of lotNumber
     */
    public String sellLot(BasicBSONObject basicBSONObject, Long franchise, Long createdBy, ObjectId lotId, ObjectId packetId, Map<String, String> dbFieldWithFormulaMap);

    public void sellParcel(HkSellDocument sellDocument, Long createdBy, Long franchise);

    /**
     * This method is used to retrieve sell documents.
     *
     * @param fieldValues the custom field values
     * @param parcelIds list of parcelIds
     * @param franchiseId company id
     * @param createdBy id of the user who created the sell document
     * @Author Shreya
     * @return list of sell documents based on the given criteria.
     */
    public List<HkSellDocument> retrieveSellDocuments(Map<String, Object> fieldValues, List<ObjectId> parcelIds, Long franchiseId, Long createdBy);

    /**
     * @Author Shreya
     * @param hkSellDocument for saving the document into db
     * @return
     */
    public ObjectId saveOrUpdateSellDocument(HkSellDocument hkSellDocument);

    public HkSellDocument retrieveSellDocumentById(ObjectId sellObjectId);

    //------------------------------------------ Sod Service Starts ---------------------------------//
    /**
     * This method is used to retrieve Lots/Packets on the issue screen for the
     * start of the day service.
     *
     * @Author sshah
     * @param bsonObject for fetching Id of the department who has the stock
     * currently in safe. and need to issue to particular user
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Issuing.
     */
    public List retrieveLotsOrPacketsForIssueForSod(BasicBSONObject bsonObject, Boolean isPacket, Long franchise);

    /**
     * This method is used to retrieve Lots/Packets on the receive screen for
     * the end of the day service.
     *
     * @Author sshah
     * @param bsonObject for fetching Id of the user who needs to receive all
     * the stock.
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Receiving.
     */
    public List retrieveLotsOrPacketsForRecieveForSod(BasicBSONObject bsonObject, Boolean isPacket, Long franchise);

    /**
     * This method is used to retrieve Lots/Packets on the return screen for the
     * start of the day service.
     *
     * @param bsonObject for fetching Id of the department who needs to receive
     * back all the stock.
     * @Author sshah
     * @param isPacket Boolean flag whether to retrieve lots or packets.
     * @param franchise Company Id of the user.
     * @return List of Lots/Packets documents for Returning.
     */
    public List retrieveLotsOrPacketsForReturnForSod(BasicBSONObject bsonObject, Boolean isPacket, Long franchise);

    /**
     * This method is used to issue lots/packets to the particular user.
     *
     * @param issueDocuments
     * @param dbFieldWithFormulaMap
     * @param companyId
     * @Author sshah
     * @param basicBSONObject for setting the id of the department in
     * in_stock_of_dept field of issue documents.
     * @return Boolean flag for success or failure.
     */
    public Boolean issueLotsOrPacketsForSod(BasicBSONObject basicBSONObject, List<HkIssueDocument> issueDocuments, Map<String, String> dbFieldWithFormulaMap, Long companyId);

    /**
     * This method is used to receive Lots/packets by the issued department.
     *
     * @Author sshah
     * @param issueDocuments List of issue documents which needs to be received.
     * @param franchise Company Id of the given user.
     */
    public void receiveLotsOrPacketsForSod(List<HkIssueDocument> issueDocuments, Long franchise);

    /**
     * This method is used to return the given stock to the department who
     * issued that stock.
     *
     * @Author sshah
     * @param issueDocuments List of issue documents which needs to be returned.
     * @param franchise Company Id of the given user.
     */
    public void returnLotsOrPacketsForSod(List<HkIssueDocument> issueDocuments, Long franchise);

    //------------------------------------------ Sod Service Ends ---------------------------------//
    //------------------------------------------ Track Service Starts ---------------------------------//
    public List retrieveLotsOrPacketsByCriteria(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, Long franchise, Boolean isArchive, Boolean isPacket);

    //------------------------------------------ Track Service Ends ---------------------------------//
    //------------------------------------------ Transfer Service Starts ---------------------------------//
    /**
     * This method is use to transfer Lot
     *
     * @author Shreya
     * @param basicBSONObject field values object
     * @param franchise franchise id
     * @param createdBy created by
     * @param lotId lot id associated with it.
     * @param packetId packet id associated with it.
     * @param dbFieldWithFormulaMap
     * @return List of lotNumber
     */
    public String transferLot(BasicBSONObject basicBSONObject, Long franchise, Long createdBy, ObjectId lotId, ObjectId packetId, Map<String, String> dbFieldWithFormulaMap);

    public List<HkTransferDocument> retrieveTransferDocuments(Map<String, Object> fieldValues, List<ObjectId> invoiceIds, List<ObjectId> parcelIds, List<ObjectId> lotIds, List<ObjectId> packetIds);

    //------------------------------------------ Transfer Service Ends ---------------------------------//
    public Map<String, String> createFieldNameWithComponentType(Map<String, Object> fieldValues);

    public List<HkIssueDocument> retrieveIssueByIds(List<ObjectId> issueId);

    //------------------------------------------ Rough Stock Service Starts ---------------------------------//
    /**
     * This method is used to create rough stock detail entry while transacting
     * parcels.
     *
     * @param hkRoughStockDetailDocument
     * @Author Shreya
     */
    public void createOrUpdateRoughStockDetail(HkRoughStockDetailDocument hkRoughStockDetailDocument);

    public void updateRoughStockDetailsWithParcel(List<HkRoughStockDetailDocument> hkRoughStockDetailDocuments, HkSellDocument hkSellDocument);

    public HkRoughStockDetailDocument retrieveRoughStockDetailById(ObjectId roughStockId);

    public List<HkRoughStockDetailDocument> retrieveRoughStockDetailByIds(List<ObjectId> roughStockIds);

    //------------------------------------------ Rough Stock Service Starts ---------------------------------//
    public String saveSubLot(Map<String, Object> subLotCustomMap, Map<String, String> subLotDbTypeMap, Map<String, String> uiFieldMap, Long franchise, Long createdBy, ObjectId parcelId, List<HkFieldDocument> totalformulaList, Long featureId);

    public List<? extends GenericDocument> retrieveAllDocumentsByCriteria(Long franchise, Boolean isActive, Class<? extends GenericDocument> class1);

    public GenericDocument retrieveDocumentById(ObjectId documentId, Class<?> class1);

    public Boolean updateSublot(ObjectId id, Map<String, Object> sublotCustomMap, Map<String, String> sublotDbTypeMap, Map<String, HkFieldDocument> mapForFeatureInvolvedInFormula, List<HkFieldDocument> totalformulaList, Map<Long, String> featureIdWithNameMap, Long franchise, Long updatedBy, Long featureId);

    public Boolean deleteDocument(ObjectId id, Long updatedBy, Class<? extends GenericDocument> class1);

    public List<HkSubLotDocument> retrieveSubLotsByCriteria(List<ObjectId> parcelIds, List<ObjectId> subLotIds, Long franchise, Boolean isArchive, Boolean excludeSubLotWithAssociatedLot, ObjectId includeSubLotWithAssociatedLot);

    public List<HkSubLotDocument> retrieveSubLotByIds(List<ObjectId> subLotIds);

    /**
     * @Author dhwani
     * @param packetIds id of packets for which you want to allocate
     * @param franchise id of company
     * @param empIds ids of employees' which belongs to the designation(s) those
     * are configured from the department configuration
     * @param department id of department
     * @param designation list of designation ids
     * @return List of user grade suggestion document
     */
    public List<HkUserGradeSuggestionDocument> allocateDiamondToEmpByGrade(List<ObjectId> packetIds, Long franchise, List<Long> empIds, Long department, List<Long> designation);

    //------------------------------------------ Issue Receive Servie Starts -------------------------------//
    /**
     * Create or Update list of issue receive documents
     *
     * @param issueReceiveDocuments documents to save
     */
    public void saveIssueReceieveDocuments(List<HkIssueReceiveDocument> issueReceiveDocuments);

    /**
     * Retrieve IssueReceieveDocuments by slip number
     *
     * @param slipDate Date of slip
     * @param slipNo for documents
     * @param department department Id
     * @param franchise Franchise Id
     * @param requestType Request Type
     * @return Issue receive documents having specified slip number
     */
    public List<HkIssueReceiveDocument> retrieveIssueReceiveDocumentsBySlipNo(Date slipDate, String slipNo, Long userId, Long department, Long franchise, String requestType);

    /**
     * Retrieve IssueReceieveDocuments by status
     *
     * @param status status to check
     * @param sourceDept source department id
     * @param destinationDept destination department id
     * @param stockDept stock department id
     * @return Issue receive documents having specified status
     */
    public List<HkIssueReceiveDocument> retrieveIssueReceiveDocumentsByStatusAndDepartment(String status, Long sourceDept, Long destinationDept, Long stockDept);

    /**
     * Retrieve Stock details and its parent details
     *
     * @param payload pass map of invoiceId or parcelId or lotId or packetId
     * @param franchise Company Id
     * @param userId In stock of user Id
     * @param department In stock of department
     * @return objects of invoice,parcel,lot and packet
     */
    public Map<String, Object> retrieveStockAndParentdetails(Map<String, String> payload, Long franchise, Long userId, Long department);

    /**
     * Request for issue receive
     *
     * @param issueReceiveDocuments documents to request
     * @param companyId comapny id of logged in user
     */
    public void issueReceiverequest(List<HkIssueReceiveDocument> issueReceiveDocuments, Long companyId);

    /**
     * Collect Requested documents
     *
     * @param issueReceiveDocumentIds Ids of issue receive documents
     * @param userId logged in userId
     * @param collectorDepartmentId Department id of collector
     * @param collectorFranchiseId Franchise id of collector
     * @param fielValsMap field values of custom fields
     * @param fieldDbType Db Type of fields
     */
    public void issueReceiveCollect(List<ObjectId> issueReceiveDocumentIds, Long userId, Long collectorDepartmentId, Long collectorFranchiseId, Map<ObjectId, Map<String, Object>> fielValsMap, Map<String, String> fieldDbType);

    /**
     * Retrieve details to collect stock
     *
     * @param stockDetails stock detail
     * @param stockDeptId Department id of stock
     * @param stockFranchiseId Franchise Id of stock department
     * @param requestType Type of request
     * @return Matched issue rececive document
     */
    public Map retrieveStockForCollectOrIssue(Map<String, String> stockDetails, Long stockDeptId, Long stockFranchiseId, String requestType);

    /**
     * Retrieve Issue receive documents by Ids
     *
     * @param objectIds List of object Ids
     * @return List of documents
     */
    public List<HkIssueReceiveDocument> retrieveIssueReceiveDocumentsByIds(List<ObjectId> objectIds);

    /**
     * Issue to user
     *
     * @param issuereceiveIds Issue receive document ids
     * @param destinationFranchiseId Franchise Id of destination User
     * @param userid User id of current user
     * @param issueToMap
     * @param fieldVals
     * @param fieldDbType
     * @return
     */
    public String issueReceiveIssue(List<ObjectId> issuereceiveIds, Long destinationFranchiseId, Long userid, Map<ObjectId, Long> issueToMap, Map<ObjectId, Map<String, Object>> fieldVals, Map<String, String> fieldDbType);

    /**
     * Receive issue receive stocks
     *
     * @param stockIds Ids of issue receive stock
     * @param userid Receiver Id
     * @param fieldVals
     * @param fieldDbType
     */
    public void issueReceiveReceive(List<ObjectId> stockIds, Long userid, Map<ObjectId, Map<String, Object>> fieldVals, Map<String, String> fieldDbType);

    /**
     * Direct Issue to any user
     *
     * @param listToSave List of stocks
     * @param department Source department id
     * @param destDeptId Destination department id
     * @param currentDesignation Source designation Id
     * @param destDesigId Destination designation id
     * @param issueTo User id of destination user
     * @param currentUserid Id of issuer
     * @param franchiseId Franchise Id of issuer
     * @return
     */
    public Integer issueReceiveInwardIssue(List<HkIssueReceiveDocument> listToSave, Long department, Long destDeptId, Long currentDesignation, Long destDesigId, Long issueTo, Long currentUserid, Long franchiseId);

    public void issueReceiveReceiveInward(List<ObjectId> objectIds, Map<ObjectId, Double> objectIdToCarat, Map<ObjectId, Integer> objectIdToPc, Map<ObjectId, Map<String, Object>> fieldVals, Map<String, String> fieldDbType);

    public List<HkIssueReceiveDocument> retrieveIssueReceiveDocumentsBySlipNoForDirectReceive(Date slipDate, String slipNo, Long department, Long franchise, String requestType);

    /**
     * Request for issue receive allotment
     *
     * @param stockDetail Map of stock detail If sending packet than Map should
     * only contain <"Packet",ObjectId of packet>, If sending lot than Map
     * should only contain <"Lot",ObjectId of lot>
     * If sending parcel than Map should only contain <"Parcel",ObjectId of
     * parcel>
     * @param createdByComapnyId Company id of issuer
     * @param createdBy Issuer Id
     * @param createdByDepartmentId Department id of issuer
     * @param issueTo User id of receiver
     */
    public void issueRequestAllotmentRequest(Map<String, List<ObjectId>> stockDetail, Map<ObjectId, Long> issueTo, Long createdByComapnyId, Long createdBy, Long createdByDepartmentId);

    /**
     * Reject requested stock
     *
     * @param stockIds issue receive document ids
     * @param id logged in user id
     * @param departmentId logged in user's department id
     * @param comapanyId logged in user's company id
     */
    public void issueReceiveReject(List<ObjectId> stockIds, Long id, Long departmentId, Long comapanyId);

    /**
     * Retrieve stocks to return
     *
     * @param userId logged in user's id
     * @param department logged in user's department
     * @param companyId logged in user's company Id
     * @return Stock available to return
     */
    public List<HkIssueReceiveDocument> retrieveIssueReceiveDocumentsForReturn(Long userId, Long department, Long companyId);

    /**
     * Return stock to issuer
     *
     * @param objectIds IssueReceive documents id to return
     * @param companyId logged in user's company id
     * @param userId logged in user's id
     * @param designation logged in user's designation
     */
    public void returnStock(List<ObjectId> objectIds, Long companyId, Long userId, Long designation);

    /**
     * Retrieve stock pending to receive
     *
     * @param userId User Id
     * @param department logged in user's department
     * @param requestType Request Type for IS or RC
     * @return
     */
    public List<HkIssueReceiveDocument> retrievePendingIssuedStock(Long userId, Long department, Long companyId, String requestType);

    public List<HkIssueReceiveDocument> retrieveAvailableStockToRequest(Long userId, Long companyId, Long designationId);

    //-------------------------- Issue receive services ends ---------------------------------//
    public HkUserGradeStatusDocument retrieveUserGradeStatusByUserId(Long userId);

    /**
     * @Author dhwani
     * @return next sequence of purchase
     */
    public Integer getNextPurchaseSequence();

    /**
     * @Author dhwani
     * @param purchaseNumber entered number
     * @param purchaseObjectId id of the purchase object
     * @return true/false
     */
    public Boolean isPurchaseSequenceExist(Integer purchaseNumber, ObjectId purchaseObjectId);

    /**
     * @Author dhwani
     * @param fieldValue field value of purchase
     * @param franchise id of created by which franchise
     * @param createdBy id of person who creates it
     * @param purchaseSequence sequence number of purchase,if entered
     * @return purchase number
     */
    public String savePurchase(BasicBSONObject fieldValue, Long franchise, Long createdBy, Integer purchaseSequence);

    /**
     * @Author dhwani
     * @param fieldValues field value of purchase to be compared
     * @param purchaseIds ids of purchases
     * @param franchise id of franchise
     * @param isArchieve is archived or not
     * @return List of HkPurchaseDocument
     */
    public List<HkPurchaseDocument> retrievePurchases(Map<String, Object> fieldValues, List<ObjectId> purchaseIds, long franchise, Boolean isArchieve,Integer offset,Integer limit);

    /**
     * @param id
     * @param purchaseCustomMap
     * @param purchaseDbTypeMap
     * @param franchise
     * @Author dhwani
     * @param purchaseDocument document to be updated
     * @param updatedBy id of person who updates it
     * @return true/false
     */
    public Boolean updatePurchase(ObjectId id, Map<String, Object> purchaseCustomMap, Map<String, String> purchaseDbTypeMap, Long franchise, Long updatedBy, Integer sequenceNumber, Map<String, String> autogeneratedLabelMap);

    /**
     * @Author dhwani
     * @param purchaseId id of purchase
     * @return document of HkPurchaseDocument
     */
    public HkPurchaseDocument retrievePurchaseDocumentById(ObjectId purchaseId);

    /**
     * @Author dhwani
     * @param purchaseId id of purchase
     * @param deletedBy if of person who deletes it
     * @return true/false
     */
    public Boolean deletePurchase(ObjectId purchaseId, Long deletedBy);

    public List<HkPurchaseDocument> retrievePurchaseByCriteria(List<ObjectId> parcelIds);
    
    public long getCountofPurchaseDocumentsFromCriteria(Long franchise, Boolean isActive,Map<String, Object> fieldValues, List<ObjectId> purchaseIds);

    public List<HkPurchaseDocument> retrieveNotAssociatedRoughPurchase();

    public List<HkParcelDocument> retrieveNotAssociatedParcels();

    public Boolean linkRoughParcelWithPurchase(List<ObjectId> parcelIds, List<ObjectId> purchaseIds);

    public Boolean deLinkRoughParcelWithPurchase(ObjectId parcelId);

    public String saveRoughMakeable(Map<String, Object> roughMakeableCustomMap, Map<String, String> roughMakeableDbTypeMap, List<String> uiFieldList, Long franchise, Long createdBy, ObjectId packetId);

    public HkRoughMakeableDocument retrieveRoughMakeableByPacketId(String packetId);

    public String updateRoughMakeable(Map<String, Object> roughMakeableCustomMap, Map<String, String> roughMakeableDbTypeMap, List<String> uiFieldList, Long franchise, Long modifiedBy, String roughMakeableId);

    public String saveFinalMakeable(Map<String, Object> finalMakeableCustomMap, Map<String, String> finalMakeableDbTypeMap, List<String> uiFieldList, Long franchise, Long createdBy, ObjectId packetId);

    public HkFinalMakeableDocument retrieveFinalMakeableByPacketId(String packetId);

    public String updateFinalMakeable(Map<String, Object> finalMakeableCustomMap, Map<String, String> finalMakeableDbTypeMap, List<String> uiFieldList, Long franchise, Long modifiedBy, String finalMakeableId);

    public List<HkParcelDocument> retrieveAllottedParcels(Long userId);

}
