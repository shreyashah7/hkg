/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.argusoft.hkg.nosql.core;

import com.argusoft.hkg.common.constantutil.HkSystemConstantUtil;
import com.argusoft.hkg.model.HkReferenceRateEntity;
import com.argusoft.hkg.nosql.model.CustomField;
import com.argusoft.hkg.nosql.model.HkFeatureFieldPermissionDocument;
import com.argusoft.hkg.nosql.model.HkSubEntityExceptionDocument;
import com.argusoft.hkg.nosql.model.HkSubFormFieldDocument;
import com.argusoft.hkg.nosql.model.HkSubFormValueDocument;
import com.argusoft.sync.center.model.CenterCompanyFeatureSectionDocument;
import com.argusoft.sync.center.model.HkFieldDocument;
import com.argusoft.sync.center.model.HkReferenceRateDocument;
import com.argusoft.sync.center.model.HkSectionDocument;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.bson.BasicBSONObject;
import org.bson.types.ObjectId;

/**
 *
 * @author dhwani
 */
public interface HkCustomFieldService {

    public Long saveOrUpdate(Long instanceId, HkSystemConstantUtil.FeatureNameForCustomField featureName, long companyId, Map<HkSystemConstantUtil.SectionNameForCustomField, List<CustomField>> sectionCustomFieldMap);

    public List<CustomField> makeCustomField(Map<Long, Map<String, Object>> val, Map<String, String> dbTypeMap, Map<String, String> uiFieldListWithComponentType, String featureName, long companyId, Object instanseId);

    public Object retrieveDocument(Long instanceId, HkSystemConstantUtil.FeatureNameForCustomField feature, long companyId);

    //public Map<HkSystemConstantUtil.SectionNameForCustomField, List<Map<Long, Map<String, Object>>>> retrieveDocumentByInstanceId(Long instanceId, HkSystemConstantUtil.FeatureNameForCustomField feature, long companyId, Map<String, String> uiFieldListWithComponentType);
    public Map<Long, Map<HkSystemConstantUtil.SectionNameForCustomField, List<Map<Long, Map<String, Object>>>>> retrieveDocumentByInstanceIds(List<Long> instanceIds, HkSystemConstantUtil.FeatureNameForCustomField feature, long companyId);

    public Long saveAll(List<Long> instanceId, HkSystemConstantUtil.FeatureNameForCustomField featureName, long companyId, Map<HkSystemConstantUtil.SectionNameForCustomField, List<CustomField>> sectionCustomFieldMap);

    public BasicBSONObject makeBSONObject(Map<String, Object> val, Map<String, String> dbTypeMap, Map<String, String> uiFieldListWithComponentType, String featureName, long companyId, Object instanceId, Boolean updateFlag, Map<String, Object> fieldValues, Map<String, String> autoGeneratedLabelMap);

    /**
     * @Author Akta Returns document that contains custom field feature section
     * map document on center side
     * @param id
     * @return
     */
    public CenterCompanyFeatureSectionDocument retrieveCenterCompanyFeatureSectionDocumentById(Long id);
    //------------------------------- Custom field srvice end-------------------------------------//

    //------------------------------- Field Document service start-------------------------------------//
    /**
     * This method is used to search the fields by given string.
     *
     * @param searchStr Search string for which searching needs to be done.
     * @param featureIdNameMap
     * @return Returns the map - < FeatureId, List< Final Label + Section ID >>
     * e.g. -
     * < 1, {"First Name - General - 12", "Last Name - General - 12"} >
     */
    public Map<Long, List<String>> searchFields(String searchStr, Map<Long, String> featureIdNameMap);

    public Map<HkSectionDocument, List<HkFeatureFieldPermissionDocument>> retrieveFeatureFieldPermissionForSearch(Long featureId, List<Long> designationIds);

    public List<HkFeatureFieldPermissionDocument> retrieveFeatureFieldPermissions(Long featureId, List<Long> designationIds);

    public BasicBSONObject makeBSONObject(Map<String, Object> val, Map<String, String> dbTypeMap, String featureName, long companyId, Object instanseId, Map<String, String> autoGeneratedLabelMap);

//    public Map<String, String> retrieveCustomUIFieldNameWithComponentTypes(Long featureId, Long companyId);
    public List<HkSubFormFieldDocument> retrieveListOfSubEntitiesAssociatedWithFieldId(Long hkFieldDocId, long companyId);
// Changed this Method remove database call

    public Map<String, String> retrieveUIFieldNameWithComponentTypes(List<String> UIFieldList);

    public HkFieldDocument retrieveCustomFieldByFieldId(Long fieldId);

    public Set<Long> retrieveFeaturesForExistingFields(Boolean isCustomField, Long companyId);

    public Map<String, HkFieldDocument> retrieveMapOfDBFieldNameWithEntity(List<String> dbFieldName, Long companyId);

    public Map<String, HkFieldDocument> retrieveMapOfDbFieldNameForFeatureInvolvedInFormula(Long companyId, String featureName, String componentType);

    public List<HkFieldDocument> retrieveAllFormulaList(Long featureId, Long franchiseId, String featureType, String componentType);

    public List<HkFieldDocument> retrieveFieldByFeatureAndComponentType(Long companyId, Long featureId, String componentType, Boolean isArchive);

    public Map<Long, HkSubFormFieldDocument> retrieveMapOfFieldIdAndItsDropListSubDocument();

    public List<HkFieldDocument> retrievePointerEntities();

    public Map<Long, String> mapOfPointerIdAndItsComponentType();

    /**
     * This method returns label and db field name
     *
     * @param companyId
     * @return e.g . key invoice.name value invoice.name$DRP$String
     */
    public Map<String, String> mapOfLabelAndDbFieldWithFeature(Long companyId);

    public Map<Long, String> mapOfFieldidAndDbFieldName(Long companyId);

    public Map<Long, HkFieldDocument> mapOfFieldIdAndHkFieldDocument(Long companyId);
    //------------------------------- Field Document service ends-------------------------------------//

    //------------------------------- Subform service start-------------------------------------//
    /**
     * @Author dmehta This method is used to save all subFormValueDocuments
     * @param subFormValueDocuments list of documents to be stored. Store
     * instance id to entity is mendatory
     */
    public void saveSubFormValues(List<HkSubFormValueDocument> subFormValueDocuments);

    /**
     * @param isArchive
     * @Author dmehta This method is used to retrieve HkSubFormValueDocuments
     * from their instance id
     * @param instanceId this is the instance id of subEntity in postgres
     * @return List of HkSubFormValueDocument
     */
    public List<HkSubFormValueDocument> retrieveSubFormValueByInstance(Long instanceId, Boolean isArchive);

    public List<HkSubFormValueDocument> retrieveSubFormValueByFranchise(Long franchiseId, Boolean isArchive);

    public List<HkSubFormValueDocument> retrieveSubFormValueByListOfInstanceIds(List<Long> instanceIds, Boolean isArchive);

    /**
     * @Author dmehta This method is to retrieve HkSubFormValueDocument from its
     * id
     * @param id of particular HkSubFormValueDocument
     * @return HkSubFormValueDocument
     */
    public HkSubFormValueDocument retrieveSubFormValueById(ObjectId id);

    public Map<ObjectId, HkSubFormValueDocument> mapOfObjectIdsWithDocuments(List<ObjectId> objectIds);

    //------------------------------- Subform service ends-------------------------------------//
    public Map<String, String> mapOfDbFieldWithCurrencyCode(Long companyId);

    public Map<String, Object> retrieveAutogeneratedFields(String dbFieldName, String search, Integer limit, Integer offset);

    public void saveValueExceptions(List<HkSubEntityExceptionDocument> hkSubEntityExceptionDocuments);

    public List<HkSubEntityExceptionDocument> retrieveValueExceptions(Long instanceId, Long companyId);

    /**
     * Check uniqueness of a given field.
     *
     * @param fieldModel
     * @param featureName
     * @param value
     * @param companyId
     * @param isEditMode
     * @return
     */
    public Boolean checkUniqueness(String fieldModel, String featureName, Object value, Long companyId);

    public List<HkSubEntityExceptionDocument> retrieveValueExceptionsByCriteria(Set<Long> dependentOnFieldId, Long companyId);

    public Boolean checkUniquenessForFields(Map<String, String> mapOfFields, Map<String, String> idRelatedFields, String modelValue, String modelName, String featureName, Long companyId);

    public List<HkFeatureFieldPermissionDocument> retrieveFeatureFieldPermissionsByFieldIds(List<Long> fieldIds);

    public void copyFeatureFieldPermission(Long sourceFranchise, Long destinationFranchise);

    public List<HkFeatureFieldPermissionDocument> retrieveFeatureFieldPermissionsByDesignationsFeatureAndSection(List<Long> designationIds, List<Long> featureIds, String sectionCode, Long franchise);

    public HkReferenceRateDocument retrieveActiveCurrencyRateByCode(String currencyCode);

    public Map<String, String> retrieveRecipientNames(List<String> recipientCodes);

    public Map<String, String> retrieveRoundOffValueForField(Long franchise, Long featureId, String componentType);
    
}
